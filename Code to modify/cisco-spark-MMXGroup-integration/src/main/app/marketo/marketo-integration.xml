<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
	<spring:beans>
		<spring:bean id="leadFields" class="com.marketo.webhook.JsonUtils" />
	</spring:beans>
	<http:request-config name="HTTP_RunTime_Request_Configuration"
		host="${integrations.runtime.host}" port="${integrations.runtime.port}"
		basePath="${integrations.runtime.path}" doc:name="HTTP Request Configuration" />

	<flow name="postIntegrationSettingsFlow1">
		<dw:transform-message doc:name="TransformPayload to Java">
			<dw:input-payload mimeType="application/json" />
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
		</dw:transform-message>
		<logger
			message="Integration Settings Payload:: #[message.payloadAs(java.lang.String)]"
			level="DEBUG" doc:name="Logger" />
		<enricher doc:name="Message Enricher" target="#[flowVars.webhook]">
			<flow-ref name="generateWebhookUrl" doc:name="generateWebhookUrl" />
		</enricher>
		<dw:transform-message doc:name="Build GetIntegration Settings Reponse">
			<dw:input-payload mimeType="application/json" />
			<dw:set-payload
				resource="classpath:dwScripts/buildPostMarketoWebHookDetails.dwl" />
		</dw:transform-message>
	</flow>
	<flow name="PostAuthDetailsFlow1">
		<dw:transform-message doc:name="Transform Payload to java">
			<dw:input-payload mimeType="application/json" />
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
		</dw:transform-message>

	</flow>
	<flow name="postformatMessageFlow1">
		<dw:transform-message doc:name="Transform Message">
			<dw:input-payload mimeType="application/json" />
			<dw:set-variable variableName="response"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
		</dw:transform-message>

		<logger message="ResponsePayload::#[flowVars['response']]"
			level="DEBUG" doc:name="Logger" />
		<set-payload value="#[flowVars['response']['userEvents']]"
			mimeType="application/json" doc:name="Set Payload" />
		<dw:transform-message doc:name="Transform Message">
			<dw:input-payload mimeType="application/json" />
			<dw:set-variable variableName="ConfigJsonValues"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
		</dw:transform-message>
		<logger message="ConfigJson Values:::::: #[flowVars.ConfigJsonValues]"
			level="DEBUG" doc:name="Logger" />
		<set-variable variableName="arrayVariable" value="#[new java.util.ArrayList()]"
			doc:name="Variable" />
		<logger
			message="MarketoApi Payload::::::#[flowVars['ConfigJsonValues']['marketoapis']]"
			level="DEBUG" doc:name="Logger" />

		<foreach doc:name="For Each"
			collection="#[flowVars['ConfigJsonValues']['marketoapis']]">
			<logger level="DEBUG" doc:name="Logger" message="Payload:::::::: #[payload]" />
			<choice doc:name="Choice">
				<when
					expression="#[payload=='lead' &amp;&amp; flowVars['response']['hookResponse'].containsKey('Lead')]">
					<foreach collection="#[flowVars['response']['hookResponse']['Lead']]"
						doc:name="For Each for Lead">
						<set-variable variableName="ResultOfLead" value="#[payload]"
							doc:name="Result Of Lead" />
						<set-variable variableName="leadId"
							value="#[flowVars['ResultOfLead']['Lead Id']]" doc:name="Lead Id" />
						<set-variable variableName="UpdatedAt"
							value="#[flowVars['ResultOfLead']['Updated At']]" doc:name="Updated At" />
						<set-variable variableName="createdDate"
							value="#[flowVars['ResultOfLead']['Created Date']]" doc:name="CreatedDate" />
						<set-variable variableName="CampaignId"
							value="#[flowVars['ResultOfLead']['Campaign Id']]" doc:name="Campaign Id" />
						<set-variable variableName="CampaignName"
							value="#[flowVars['ResultOfLead']['Campaign Name']]" doc:name="Campaign Name" />
						<logger message="Result Of Lead::::#[flowVars['ResultOfLead']]"
							level="DEBUG" doc:name="leadApiLogger" />
						<choice doc:name="Choice for Lead creation or updation">
							<when
								expression="#[flowVars['ResultOfLead']['Created Date']==flowVars['ResultOfLead']['Updated At']]">
								<set-payload value="#[flowVars['ResultOfLead']]"
									doc:name="Set Payload" />
								<json:object-to-json-transformer
									doc:name="Object to JSON" />
								<set-variable variableName="ResultOfLead" value="#[payload]"
									doc:name="Result of Lead as Json" />
								<logger message="Result of Lead as Json:::#[flowVars['ResultOfLead']]"
									level="DEBUG" doc:name="Logger" />
								<invoke name="leadKeys" object-ref="leadFields" method="jsonString2MapKey"
									methodArguments="#[flowVars['ResultOfLead']]"
									methodArgumentTypes="java.lang.String" />
								<set-variable variableName="Leadkey" value="#[payload]"
									doc:name="Lead Key" />
								<logger message="Lead Key:::#[flowVars['Leadkey']]"
									level="DEBUG" doc:name="Logger" />
								<invoke name="LeadKeyAndValues" object-ref="leadFields"
									method="jsonString2MapRuntimeValues" methodArguments="#[flowVars['ResultOfLead']],#[flowVars['Leadkey']]" />
								<set-variable variableName="leadKeyValue" value="#[payload]"
									doc:name="Lead Key Value" />
								<logger message="Lead Key Value::#[flowVars['leadKeyValue']]"
									level="DEBUG" doc:name="Logger" />
								<set-variable variableName="postMessage"
									value="#['In ['+flowVars['CampaignName']+'](https://app-ab20.marketo.com/#SC'+flowVars['CampaignId']+'A1) campaign, a new lead  ['+flowVars['leadId']+'](${marketo.baseUrl}?leadId='+flowVars['leadId']+') was created \n\n'+flowVars['leadKeyValue']+' \n  ']"
									doc:name="Lead Create API" />
								<logger message="Post Message:::: #[flowVars['postMessage']]"
									level="DEBUG" doc:name="Logger" />
							</when>
							<otherwise>
								<set-payload value="#[flowVars['ResultOfLead']]"
									doc:name="Set Payload" />
								<json:object-to-json-transformer
									doc:name="Object to JSON" />
								<set-variable variableName="ResultOfLead" value="#[payload]"
									doc:name="Result of Lead as Json" />
								<logger message="ResultOfLead::::#[flowVars['ResultOfLead']]"
									level="DEBUG" doc:name="Logger" />
								<invoke name="LeadKeys" object-ref="leadFields" method="jsonString2MapKey"
									methodArguments="#[flowVars['ResultOfLead']]"
									methodArgumentTypes="java.lang.String" />
								<set-variable variableName="leadKeys" value="#[payload]"
									doc:name="LeadKeys" />
								<logger message="Lead Keys::::#[flowVars['leadKeys']]"
									level="DEBUG" doc:name="Logger" />
								<invoke name="LeadKeyValues" object-ref="leadFields"
									method="jsonString2MapRuntimeValues" methodArguments="#[flowVars['ResultOfLead']],#[flowVars['leadKeys']]"
									methodArgumentTypes="java.lang.String,java.lang.String" />
								<set-variable variableName="leadKeyValuesMap"
									value="#[payload]" doc:name="LeadKey Values" />
								<logger message="LeadKeyValues:::#[flowVars['leadKeyValuesMap']]"
									level="DEBUG" doc:name="Logger" />
								<set-variable variableName="postMessage"
									value="#['In ['+flowVars['CampaignName']+'](https://app-ab20.marketo.com/#SC'+flowVars['CampaignId']+'A1) campaign, a lead  ['+flowVars['leadId']+'](${marketo.baseUrl}?leadId='+flowVars['leadId']+') was updated \n\n'+flowVars['leadKeyValuesMap']+' \n  ']"
									doc:name="Lead Update API" />
								<logger message="Post Message:::: #[flowVars['postMessage']]"
									level="DEBUG" doc:name="Logger" />
							</otherwise>
						</choice>

					</foreach>
					<choice doc:name="Choice">
						<when expression="#[flowVars.postMessage != empty]">
							<expression-component doc:name="Expression"><![CDATA[arrayVariable.add(flowVars.postMessage)]]></expression-component>
						</when>
						<otherwise>
							<logger message="+++++++++++#[flowVars.postMessage]+++++++++++++"
								level="INFO" doc:name="Logger" />
						</otherwise>
					</choice>
					<set-variable variableName="postMessage" value=""
						doc:name="Variable" />
				</when>
				<otherwise>
					<logger level="INFO" doc:name="Logger"
						message="Lead Did not selected by end user" />
				</otherwise>
			</choice>

		</foreach>
		<set-variable variableName="bufferStream"
			value="#[new java.lang.StringBuffer()]" doc:name="Variable" />
		<foreach collection="#[flowVars.arrayVariable]" doc:name="For Each">
			<expression-component doc:name="Expression"><![CDATA[bufferStream.append(payload)]]></expression-component>
			<expression-component doc:name="Expression"><![CDATA[bufferStream.append('\n \n')]]></expression-component>
		</foreach>
		<logger message="+++++buffer array #[flowVars['bufferStream']]"
			level="INFO" doc:name="Logger" />

		<dw:transform-message doc:name="BuildPostFormatMessage">
			<dw:input-payload mimeType="application/json" />
			<dw:set-payload resource="classpath:dwScripts/buildPostFormatMessage.dwl" />
		</dw:transform-message>
	</flow>
	<flow name="SetupIntegrationFlow1">
		<dw:transform-message doc:name="BuildSetup Integration Reponse">
			<dw:input-payload mimeType="application/json" />
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
		</dw:transform-message>
	</flow>
	<flow name="updateintegrationFlow1">
		<dw:transform-message doc:name="Transform Message to java">
			<dw:input-payload mimeType="application/json" />
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
		</dw:transform-message>
		<logger message="#[payload]" level="DEBUG" doc:name="Logger" />
		<enricher target="#[flowVars.updateIntegrationResponse]"
			doc:name="Message Enricher">
			<flow-ref name="updateIntegrationMarketoFlow" doc:name="updateIntegrationMarketoFlowReference" />
		</enricher>
		<dw:transform-message doc:name="Transform Update Reponse">
			<dw:input-payload mimeType="application/json" />
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
flowVars.updateIntegrationResponse]]></dw:set-payload>
		</dw:transform-message>
	</flow>
	<flow name="tearDownIntegrationFlow1">
		<dw:transform-message doc:name="Build TearDown Integration Response">
			<dw:input-payload mimeType="application/json" />
			<dw:set-payload resource="classpath:dwScripts/buildPostMarketoTearDown.dwl" />
		</dw:transform-message>
	</flow>


	<flow name="healthCheckFlow1">
		<object-to-string-transformer doc:name="Object to String" />
		<json:object-to-json-transformer
			doc:name="Object to JSON" />
		<dw:transform-message doc:name="Transform Message To Java">
			<dw:input-payload mimeType="application/json" />
			<dw:set-variable variableName="healthCheckRequest"
				resource="classpath:dwScripts/fromPayloadToJava.dwl">
			</dw:set-variable>
		</dw:transform-message>
        <expression-component doc:name="Set Values"><![CDATA[flowVars['integrationId'] = flowVars['healthCheckRequest']['integrationId'];
flowVars['userId'] = flowVars['healthCheckRequest']['userId'],]]></expression-component>
		<enricher target="#[flowVars['webhookResponse']]" doc:name="Message Enricher">
			<flow-ref name="generateWebhookUrl" doc:name="generateWebhookUrl" />
		</enricher>
		<http:request config-ref="HTTP_Integration_Runtime_Request_Configuration"
			path="/integrations/instances" method="GET" doc:name="Get Instance Details">
			<http:request-builder>
                <http:query-param paramName="client_id" value="${runtime.clientidenforcement.id}"/>
                <http:query-param paramName="client_secret" value="${runtime.clientidenforcement.secret}"/>
                <http:query-param paramName="integrationId" value="#[flowVars['integrationId']]"/>
                <http:query-param paramName="userId" value="#[flowVars['userId']]"/>
                <http:query-param paramName="status" value="#['ACTIVE']"/>

			</http:request-builder>
		</http:request>
		<dw:transform-message doc:name="Transform Message">
			<dw:input-payload mimeType="application/json" />
			<dw:set-variable variableName="instanceDetails">
    <![CDATA[%dw 1.0
%output application/java
--- 
payload]]>
			</dw:set-variable>
		</dw:transform-message>
		<choice doc:name="Choice">
			<when
				expression="#[flowVars['instanceDetails'].toString() !='{message=No results}']">
				<dw:transform-message doc:name="Transform Message">
					<dw:input-payload mimeType="application/json" />
					<dw:set-payload resource="classpath:dwScripts/buildPostInstanceDetails.dwl" />
				</dw:transform-message>
				<set-payload value="#[payload]" mimeType="application/json"
					doc:name="Set Payload" />
				<dw:transform-message doc:name="Build Health Check Response">
					<dw:input-payload mimeType="application/json" />
					<dw:set-payload
						resource="classpath:dwScripts/buildMarketoHealthCheckResponse.dwl" />
				</dw:transform-message>
			</when>
			<otherwise>
				<dw:transform-message doc:name="Build Health Check Response">
					<dw:set-payload
						resource="classpath:dwScripts/buildMarketoHealthCheckResponse.dwl" />
				</dw:transform-message>
			</otherwise>
		</choice>
		<catch-exception-strategy doc:name="Catch Exception Strategy">
			<set-variable variableName="healthCheckException" value="#[exception.message]"
				doc:name="HealthCheckException" />
			<dw:transform-message doc:name="Transform Message">
				<dw:input-payload mimeType="application/json" />
				<dw:set-payload
					resource="classpath:dwScripts/buildMarketoHealthCkeckException.dwl" />
			</dw:transform-message>
		</catch-exception-strategy>
	</flow>

</mule>
