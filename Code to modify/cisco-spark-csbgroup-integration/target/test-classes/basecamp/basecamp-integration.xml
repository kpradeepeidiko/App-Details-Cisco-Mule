<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    <http:request-config name="HTTP_Request_Configuration" protocol="HTTPS" host="launchpad.37signals.com" port="443" doc:name="HTTP Request Configuration"/>
    <http:request-config name="HTTP_Request_Configuration1" protocol="HTTPS" host="${basecamp.api.operations.host}" port="443" doc:name="HTTP Request Configuration"/>
   <http:request-config name="HTTP_Access_Token_Request_Configuration" protocol="HTTPS" host="${basecamp.api.access.token.host}" port="${basecamp.api.access.token.port}"  doc:name="HTTP Request Configuration" basePath="${basecamp.api.access.token.base.path}"/>
  	
 	<http:request-config name="HTTP_Operations_Request_Configuration" protocol="HTTPS" host="${basecamp.api.operations.host}" port="${basecamp.api.operations.port}"  doc:name="HTTP Request Configuration"/>
    
    <validation:config name="Validation_Configuration" doc:name="Validation Configuration"/>
    <http:request-config name="HTTP_Request_Configuration2" protocol="HTTPS" host="launchpad.37signals.com" port="443" basePath="/authorization" doc:name="HTTP Request Configuration"/>
    <flow name="postAuthDetailsFlow">
        <object-to-string-transformer doc:name="Object to String"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
       <dw:transform-message doc:name="Transform Payload to Java">
       <dw:input-payload mimeType="application/json"/>
            <dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
        </dw:transform-message>
        <logger message="code:#[payload['authSettings']['code']]" level="INFO" doc:name="Logger"/>
        
        <enricher target="#[flowVars['postTokenResponse']]" doc:name="Message Enricher">
            <flow-ref name="postBasecampTokenFlow" doc:name="postBasecampTokenFlow"/>
        </enricher>
        <logger message="#[flowVars['postTokenResponse']]" level="INFO" doc:name="Logger"/>
        
        <dw:transform-message doc:name="Build Post Auth Details Response">
        
            <dw:set-payload resource="classpath:dwScripts/buildPostAuthDetailsResponse.dwl"/>
        </dw:transform-message>
    </flow>


    <flow name="postIntegrationSettingsFlow">
        <object-to-string-transformer doc:name="Object to String"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>

       <dw:transform-message doc:name="Transform Payload to Java">
       <dw:input-payload mimeType="application/json"/>
            <dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
        </dw:transform-message>
        <logger message=" #[message.payloadAs(java.lang.String)]" level="DEBUG" doc:name="Logger"/>
        <set-variable variableName="integrationId" value="#[payload['integrationId']]" doc:name="Set IntegrationId"/>
        <set-variable variableName="userId" value="#[payload['userId']]" doc:name="Set userId"/>


        <flow-ref name="getRuntimeAccessTokenFlow" doc:name="getRuntimeAccessTokenFlow"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars['token'] != null]">
                <flow-ref name="getBasecampAuthorizationFlow" doc:name="getBasecampAuthorizationFlow"/>
                <choice doc:name="Choice">
                    <when expression="#[message.inboundProperties.'http.status' ==200]">
                        <enricher target="#[flowVars['userResponse']]" doc:name="Message Enricher">
                            <flow-ref name="getBasecampUserFlow" doc:name="getBasecampUserFlow"/>
                        </enricher>
                        <choice doc:name="Choice">
                            <when expression="#[flowVars['userResponse']['id'] != null]">
                                <set-variable variableName="pageValues" value="1" doc:name="Variable"/>
                                <set-variable variableName="projectsResponse" value="#[new java.util.ArrayList()]" doc:name="Variable"/>
                                <flow-ref name="getBasecampProjectsFlow" doc:name="getBasecampProjectsFlow"/>
                                <logger message="projects in authorized account  :::::::#[flowVars['projectsResponse']]" level="INFO" doc:name="Logger"/>
                            </when>
                            <when expression="#[flowVars['userResponse']['myValue']=='false']">
                                <dw:transform-message doc:name="Transform Message">
                               
                                    <dw:set-payload resource="classpath:dwScripts/buildCheckTokenValidity.dwl"/>
                                </dw:transform-message>
                            </when>
                            <when expression="#[flowVars['userResponse']['myValue']=='true']">
                                <dw:transform-message doc:name="Transform Message">
                                
                                    <dw:set-payload resource="classpath:dwScripts/buildCheckAccountExpiry.dwl"/>
                                </dw:transform-message>
                                <set-variable variableName="accountExpired" value="#[json:isAccountExpired]" doc:name="Variable"/>
                            </when>
                            <otherwise>
                                <logger message="no action found" level="INFO" doc:name="Logger"/>
                            </otherwise>
                        </choice>
                    </when>
                    <when expression="#[flowVars.validtoken==false]">
                        <dw:transform-message doc:name="Transform Message">
                            
                                    <dw:set-payload resource="classpath:dwScripts/buildCheckTokenValidity.dwl"/>
                        </dw:transform-message>
                        <set-variable variableName="validtoken" value="#[json:isValidToken]" doc:name="Variable"/>
                    </when>
                    <otherwise>
                        <logger level="INFO" doc:name="Logger" message="working"/>
                    </otherwise>
                </choice>

            </when>
            <otherwise>
                <logger message="No token from Database" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <choice doc:name="Choice">
            <when expression="#[flowVars.projectsResponse !=null]">
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload resource="classpath:dwScripts/buildPostSettingsResponse.dwl"/>
                </dw:transform-message>

            </when>
            <when expression="#[flowVars.projectsResponse !=null]">
                <dw:transform-message doc:name="Transform Message">
                    
                 <dw:set-payload resource="classpath:dwScripts/DispalyProjectCreateMessage.dwl"/>
                </dw:transform-message>
            </when>
            <when expression="#[flowVars.validtoken ==false]">
                <dw:transform-message doc:name="Transform Message">
                    
                 <dw:set-payload resource="classpath:dwScripts/buildCheckTokenValidity.dwl"/>
                </dw:transform-message>
            </when>
            <when expression="#[flowVars.accountExpired ==true]">
                <dw:transform-message doc:name="Transform Message">
                    
                     <dw:set-payload resource="dwScripts/buildCheckAccountExpiry.dwl"/>
                </dw:transform-message>
            </when>
            <otherwise>
                <logger message="no projects in your account" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>

    	
    </flow>
    


<flow name="postFormatMessageFlow">
        <logger message="Message  format initial payload #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>

       
        <dw:transform-message doc:name="Transform Format Message Request To Java">
        <dw:input-payload mimeType="application/json"/>
            <dw:set-variable resource="classpath:dwScripts/fromPayloadToJava.dwl" variableName="response"/>

        </dw:transform-message>
        <logger message="formatMessage#[payload]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="userId" value="#[flowVars['response']['instanceDetails']['userId']]" doc:name="Set UserId"/>
        <set-variable variableName="integrationId" value="#[flowVars['response']['instanceDetails']['integrationId']]" doc:name="Set IntegrationId"/>
        <expression-component doc:name="Expression"><![CDATA[flowVars.splitters=flowVars.response.hookResponse.kind.toString().split('_')]]></expression-component>
        <flow-ref name="getRuntimeAccessTokenFlow" doc:name="getRuntimeAccessTokenFlow"/>

        <flow-ref name="getBasecampAuthorizationFlow" doc:name="getBasecampAuthorizationFlow"/>
        <set-variable variableName="userName" value="#[flowVars['accountInfo']['identity']['first_name']]" doc:name="Variable"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload resource="classpath:dwScripts/buildConfigJson.dwl"/>

        </dw:transform-message>
        <logger message="configJson #[payload]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="isScheduledEntry" value="#[json:isScheduledEntry]" doc:name="Set isScheduledEntry"/>
        <set-variable variableName="event" value="#[json:event]" doc:name="Variable"/>
        <set-variable variableName="projectId" value="#[json:project_id]" doc:name="Set ProjectId"/>
        <set-variable variableName="projectId" value="#[json:project_id]" doc:name="Variable"/>
        <logger message="Event #[flowVars['event']] &amp;&amp;&amp;&amp;&amp; projectId #[flowVars['projectId']]" level="INFO" doc:name="Logger"/>
        <foreach collection="#[json:commentType]" doc:name="Select commentType">
            <set-variable variableName="commentType" value="#[payload]" doc:name="Variable"/>
            <logger message=" commentType#[flowVars['commentType']]" level="INFO" doc:name="Logger"/>
            <choice doc:name="Choice">
                <when expression="#[flowVars.response.hookResponse.kind=='upload_active']">
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId])#[flowVars.userName] uploaded a document [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) " level="INFO" doc:name="DOCUMENT-UPLOAD"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] uploaded a document [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) " doc:name="DOCUMENT-UPLOAD"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='document_created']">
                    <logger message="#[flowVars.userName] created a document [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) in the project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId])" level="INFO" doc:name="DOCUMENT-CREATE"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] created a document [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="DOCUMENT-CREATE"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='todo_created']">
                    <set-variable variableName="eventType" value="todos" doc:name="Variable"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <logger message="Recording information #[payload]" level="INFO" doc:name="Logger"/>
                    <logger message="starts_on::::::#[payload.starts_on]" level="INFO" doc:name="Logger"/>
                    <choice doc:name="Choice">
                        <when expression="#[flowVars.response.hookResponse.kind=='todo_created' &amp;&amp; payload.due_on ==null  &amp;&amp; payload.starts_on ==null &amp;&amp; payload.assignees ==[]]">
                            <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] created a todo [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) " level="INFO" doc:name="TODO-CREATE"/>
                            <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] created a todo [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="TODO-CREATE"/>
                        </when>
                        <when expression="#[flowVars.response.hookResponse.kind=='todo_created' &amp;&amp; payload.due_on !=null &amp;&amp; payload.starts_on ==null  &amp;&amp; payload.assignees==[]]">
                            <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] created a todo [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) with due date #[payload.due_on]" level="INFO" doc:name="TODO-DUE"/>
                            <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] created a todo [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) with due date #[payload['due_on']]" doc:name="TODO-DUE"/>
                        </when>
                        <when expression="#[flowVars.response.hookResponse.kind=='todo_created' &amp;&amp; payload.due_on ==null  &amp;&amp; payload.starts_on ==null &amp;&amp; payload.assignees !=[]]">
                            <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] created a todo [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) and assigned to #[payload.assignees[0].name]" level="INFO" doc:name="TODO-ASSIGNEE"/>
                            <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'), '+flowVars.userName+' created a todo ['+flowVars.response.hookResponse.recording.title+']('+flowVars.response.hookResponse.recording.app_url+') \n - AssignedTo : '+payload.assignees[0].name+'']" doc:name="TODO-ASSIGNEE"/>
                        </when>
                        <when expression="#[flowVars.response.hookResponse.kind=='todo_created' &amp;&amp; payload.starts_on !=null  &amp;&amp; payload.due_on !=null &amp;&amp; payload.assignees !=[] ]">
                            <logger message="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'),'+flowVars.userName+'created a todo ['+flowVars.response.hookResponse.recording.title+']('+flowVars.response.hookResponse.recording.app_url+') \n - starts_at : '+payload.starts_at+' /n - ends_at : '+payload.ends_at+' /n - Assigned to : '+payload.assignees[0].name+'']" level="INFO" doc:name="TODO-DUEDATE-ASSIGNEE"/>
                            <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'), '+flowVars.userName+' created a todo ['+flowVars.response.hookResponse.recording.title+']('+flowVars.response.hookResponse.recording.app_url+') \n - starts_at : '+payload.starts_on+' \n - ends_at : '+payload.due_on+' \n - Assigned to : '+payload.assignees[0].name+'']" doc:name="TODO-DUEDATE-ASSIGNEE"/>
                        </when>
                        <when expression="#[flowVars.response.hookResponse.kind=='todo_created' &amp;&amp; payload.starts_on ==null  &amp;&amp; payload.due_on !=null &amp;&amp; payload.assignees !=[]]">
                            <logger message="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'),'+flowVars.userName+'created a todo ['+flowVars.response.hookResponse.recording.title+']('+flowVars.response.hookResponse.recording.app_url+') \n - Due_date : '+payload.due_on+' \n - Assigned to : '+payload.assignees[0].name+'']" level="INFO" doc:name="TODO-ASSIGNEE_ONLY DUEDATE"/>
                            <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'), '+flowVars.userName+' created a todo ['+flowVars.response.hookResponse.recording.title+']('+flowVars.response.hookResponse.recording.app_url+') \n - Due_date : '+payload.due_on+' \n - Assigned to : '+payload.assignees[0].name+'']" doc:name="TODO-ASSIGNEE_ONLY DUEDATE"/>
                        </when>
                        <when expression="#[flowVars.response.hookResponse.kind=='todo_created' &amp;&amp; payload.starts_on !=null  &amp;&amp; payload.due_on !=null &amp;&amp; payload.assignees ==[]]">
                            <logger message="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'),'+flowVars.userName+' created a todo ['+flowVars.response.hookResponse.recording.title+']('+flowVars.response.hookResponse.recording.app_url+')  \n - starts_at : '+payload.starts_on+' \n - ends_at : '+payload.due_on+'']" level="INFO" doc:name="TODO-STARTS AND ENDS"/>
                            <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'), '+flowVars.userName+' created a todo ['+flowVars.response.hookResponse.recording.title+']('+flowVars.response.hookResponse.recording.app_url+')  \n - starts_at : '+payload.starts_on+' \n - ends_at : '+payload.due_on+'']" doc:name=""/>
                        </when>
                        <otherwise>
                            <logger message="no to-do matched" level="INFO" doc:name="Logger"/>
                        </otherwise>
                    </choice>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='todolist_created']">
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] created a todolist [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) " level="INFO" doc:name="TODOLIST-CRAETE"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] created a todolist [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="TODOLIST-CRAETE"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='question_created']">
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] posted a question [ **#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) " level="INFO" doc:name="QUESTION"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] posted a question [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) " doc:name="QUESTION"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='question_paused']">
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] paused a question [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) " level="INFO" doc:name="QUESTION-PAUSED"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] paused a question [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) " doc:name="QUESTION-PAUSED"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='schedule_entry_created' &amp;&amp; flowVars.isScheduledEntry =='true']">
                    <set-variable variableName="eventType" value="schedule_entries" doc:name="SET SHEDULE ENTRY"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] created event [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url])  and  assigned to #[payload.participants[0].name] " level="INFO" doc:name="SHEDULE-ENTRY"/>
                    <choice doc:name="Choice">
                        <when expression="#[payload['participants'][0]['name'] !=[]]">
                            <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] created event [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])  and  assigned to #[payload['participants'][0]['name']] " doc:name="SHEDULE-ENTRY"/>
                        </when>
                        <otherwise>
                            <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] created event [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) " doc:name="SHEDULE-ENTRY"/>
                        </otherwise>
                    </choice>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='question_schedule_code_changed']">
                    <set-variable variableName="eventType" value="questions" doc:name="SET QUESTION CODE UPDATE"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <logger message="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated event  [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) schedule to  #[payload['schedule_code']] and schedule time of day to #[payload['schedule_time_of_day']]" level="INFO" doc:name="SHEDULE-ENTRY"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated question [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) schedule to  #[payload['schedule_code']] and schedule time of day to #[payload['schedule_time_of_day']]" doc:name="SHEDULE-ENTRY"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='question_resumed']">
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] resumed a question [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) " level="INFO" doc:name="QUESTION-RESUMED"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] resumed a question [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) " doc:name="QUESTION-RESUMED"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='todo_completed']">
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] completed a todo [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) " level="INFO" doc:name="TODO_COMPLETE"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] completed a todo [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) " doc:name="TODO-COMPLETE"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='todo_uncompleted']">
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] reopened a todo [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) " level="INFO" doc:name="TODO-UNCOMPLETE"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] reopened a todo [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) " doc:name="TODO-UNCOMPLETE"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_created' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='Todolist' &amp;&amp; flowVars.commentType=='TodoComment']">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="Attachment #[flowVars.commentValue]" level="INFO" doc:name="Logger"/>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] commented on a todolist [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENT-ONTODOLIST"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] commented on a todolist [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars['commentValue'].trim()]&quot;" doc:name="COMMMENT-ONTODOLIST"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_created' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='Question::Answer' &amp;&amp; flowVars.response.hookResponse.details.notified_recipient_ids !=[]]">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="Attachment #[flowVars.commentValue]" level="INFO" doc:name="Logger"/>
                    <set-variable variableName="eventType" value="comments" doc:name="Variable"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] commented on a Question::Answer [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENT-ONTODOLIST"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[payload.creator.name] commented on a Question::Answer [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars['commentValue'].trim()]&quot;" doc:name="COMMMENT-ON-QUESTION-ANSWER"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_created' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='Schedule::Entry' &amp;&amp; flowVars.commentType=='ScheduleComment']">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] commented on a event [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENT-EVENT"/>
                    <set-variable variableName="eventType" value="comments" doc:name="Variable"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[payload['creator']['name']] commented on a event [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars['commentValue'].trim()]&quot;" doc:name="COMMENT-EVENT"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_created' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='Upload' &amp;&amp; flowVars.commentType=='DocumentComment']">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] commented on a file [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENTON-FILE"/>
                    <set-variable variableName="eventType" value="comments" doc:name="Variable"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[payload['creator']['name']] commented on a file [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars['commentValue'].trim()]&quot;" doc:name="COMMENTON-FILE"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_created' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='Document' &amp;&amp; flowVars.commentType=='DocumentComment']">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] commented on a file [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENTON-DOCUMENT"/>
                    <set-variable variableName="eventType" value="comments" doc:name="Variable"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'), '+payload['creator']['name']+' commented on a file ['+flowVars.response.hookResponse.recording.title+']('+flowVars.response.hookResponse.recording.app_url+') as &quot;'+flowVars.commentValue.trim()+'&quot;']" doc:name="COMMENTON-DOCUMENT"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_created' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='Question::Answer' ]">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] commented on a file [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENTON-DOCUMENT"/>
                    <set-variable variableName="eventType" value="comments" doc:name="Variable"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'), '+payload['creator']['name']+' commented on a Question::Answer ['+flowVars.response.hookResponse.recording.title+']('+flowVars.response.hookResponse.recording.app_url+') as &quot;'+flowVars.commentValue.trim()+'&quot;']" doc:name="COMMENTON-DOCUMENT"/>

                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_created' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='Todo' &amp;&amp; flowVars.commentType=='TodoComment']">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] commented on a todo [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENTEDON-TODO"/>
                    <set-variable variableName="eventtype" value="comments" doc:name="Variable"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] commented on a todo [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars['commentValue'].trim()]&quot; " doc:name="COMMENTEDON-TODO"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='google_document_created']">
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] added a new Google Doc [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) " level="INFO" doc:name="LINK GOOGLE DOCUMENT"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] added a new Google Doc [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) " doc:name="LINK GOOGLE DOCUMENT"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='question_answer_created']">
                    <expression-component doc:name="ANSWER TO QUESTION"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] answered for  the question[**#[flowVars.response.hookResponse.recording.parent.title]**](#[flowVars.response.hookResponse.recording.parent.app_url]) as **#[flowVars.commentValue]**" level="INFO" doc:name="QUESTION-ANSWER"/>
                    <set-variable variableName="eventType" value="question_answers" doc:name="Variable"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href'/projects/'+flowVars.projectId+'), '+payload['creator']['name']+' answered for  the question ['+flowVars.response.hookResponse.recording.parent.title+']('+flowVars.response.hookResponse.recording.parent.app_url+') as &quot;'+flowVars.commentValue+'&quot;']" doc:name="QUESTION-ANSWER"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='todo_assignment_changed']">
                    <choice doc:name="Assignee Add or Remove">
                        <when expression="#[flowVars.response.hookResponse.details.added_person_ids !=[]]">
                            <set-variable variableName="personId" value="#[flowVars.response.hookResponse.details.added_person_ids[0]]" doc:name="Set personId"/>
                            <flow-ref name="getPeopleInformationFlow" doc:name="getPeopleInformationFlow"/>
                            <logger message="people info #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
                            <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] assigned a todo [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) to #[payload.name] at #[flowVars.response.hookResponse.created_at]" level="INFO" doc:name="todo_assignment_changed"/>
                            <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] assigned a todo [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) to #[payload['name']]" doc:name="todo_assignment_changed"/>
                        </when>
                        <otherwise>
                            <set-variable variableName="personId" value="#[flowVars.response.hookResponse.details.removed_person_ids[0]]" doc:name="Variable"/>
                            <flow-ref name="getPeopleInformationFlow" doc:name="getPeopleInformationFlow"/>
                            <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] removed #[payload['name']] from assignee list of todo [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) " doc:name="Variable"/>
                        </otherwise>
                    </choice>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='schedule_entry_participants_changed' &amp;&amp; flowVars.event=='EventEdit' &amp;&amp; flowVars.response.hookResponse.details.added_person_ids !=[] &amp;&amp; flowVars.response.hookResponse.details.removed_person_ids ==[]]">
                    <set-variable variableName="personId" value="#[flowVars.response.hookResponse.details.added_person_ids[0]]" doc:name="Set PersonId"/>
                    <flow-ref name="getPeopleInformationFlow" doc:name="getPeopleInformationFlow"/>
                    <logger message="people info #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] assigned a event [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) to #[payload.name]" level="INFO" doc:name="schedule_entry_participants_changed"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] assigned a event [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) to #[payload['name']]" doc:name="schedule_entry_participants_changed"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='schedule_entry_participants_changed' &amp;&amp; flowVars.event=='EventEdit' &amp;&amp; flowVars.response.hookResponse.details. removed_person_ids !=[] &amp;&amp; flowVars.response.hookResponse.details.added_person_ids ==[]]">
                    <set-variable variableName="personId" value="#[flowVars.response.hookResponse.details.removed_person_ids[0]]" doc:name="Set PersonId"/>
                    <flow-ref name="getPeopleInformationFlow" doc:name="getPeopleInformationFlow"/>
                    <logger message="PersonInfo #[payload]" level="INFO" doc:name="Logger"/>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] removed  a person #[payload.name] from the assignee list of event [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) " level="INFO" doc:name="Assigni removed"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] removed  a person #[payload['name']] from the assignilist of event [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="Assigni removed"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='schedule_entry_trashed' &amp;&amp; flowVars.event=='EventEdit']">
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] trashed an event [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) " level="INFO" doc:name="schedule_entry_trashed"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] trashed an event [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) " doc:name="schedule_entry_trashed"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_created' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='GoogleDocument' &amp;&amp; flowVars.commentType=='DocumentComment']">
                    <expression-component doc:name="SET COOMENT ON GOOGL EDOCUMENT"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] commented on a googledoc [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENT ON GOOGLEDOC"/>
                    <set-variable variableName="eventType" value="comments" doc:name="Variable"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[payload['creator']['name']] commented on a googledoc [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars['commentValue'].trim()]&quot; " doc:name="COMMENT ON GOOGLEDOC"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='schedule_entry_summary_changed' &amp;&amp; flowVars.event=='EventEdit']">
                    <logger message="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]),#[flowVars['userName']] updated event [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" level="INFO" doc:name="EVENT-RENAME"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated event [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="EVENT-RENAME"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='schedule_entry_starts_at_changed' &amp;&amp; flowVars.event=='EventEdit']">
                    <set-variable variableName="eventType" value="schedule_entries" doc:name="Variable"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <logger message="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]),#[flowVars['userName']] updated event [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) start date #[payload['starts_at']] to end date #[payload['ends_at']]" level="INFO" doc:name="Logger"/>
                    <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'), '+flowVars.userName+' updated start date on event ['+flowVars['response']['hookResponse']['recording']['title']+']('+flowVars['response']['hookResponse']['recording']['app_url']+') \n - starts_at : '+payload['starts_at']+' \n - ends_at : '+payload['ends_at']+'']" doc:name="Update event Start date"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='schedule_entry_ends_at_changed' &amp;&amp; flowVars.event=='EventEdit']">
                    <set-variable variableName="eventType" value="schedule_entries" doc:name="UPDATE EVENT DATE"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <logger message="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]),#[flowVars['userName']] updated event end date [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) \n * start date: #[payload['starts_at']]  \n * end date #[payload['ends_at']]" level="INFO" doc:name="Logger"/>
                    <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'), '+flowVars.userName+' updated end date on event ['+flowVars['response']['hookResponse']['recording']['title']+']('+flowVars['response']['hookResponse']['recording']['app_url']+') \n - starts_at : '+payload['starts_at']+' \n - ends_at : '+payload['ends_at']+'']" doc:name="Update event End date"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='todolist_name_changed']">
                    <logger message="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated todolist name [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" level="INFO" doc:name="ToDo list name Update"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated todolist name [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="Variable"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='upload_name_changed']">
                    <logger message="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated file name [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" level="INFO" doc:name="Upload file name Update"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated file name [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="Variable"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_content_changed' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='Todolist' &amp;&amp; flowVars.commentType=='TodoComment']">
                    <expression-component doc:name="UPDATE COMMENT ON TODOLIST"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','')]]></expression-component>
                    <set-variable variableName="eventType" value="comments" doc:name="Variable"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[payload['creator']['name']] updated comment on a todolist [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars['commentValue'].trim()]&quot;" doc:name="Variable"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_content_changed' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='Schedule::Entry' &amp;&amp; flowVars.commentType=='ScheduleComment']">
                    <expression-component doc:name="UPDATE COMMENT-EVENT"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] updated comment on a event [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENT-EVENT"/>
                    <set-variable doc:name="Variable" value="comments" variableName="eventType"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[payload['creator']['name']] updated comment on a event [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars['commentValue'].trim()]&quot;" doc:name="UPDATE COMMENT-EVENT"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_content_changed' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='Vault' &amp;&amp; flowVars.commentType=='DocumentComment']">
                    <expression-component doc:name="UPDATE COMMENT- On GoogleDoc"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] updated comment on a event [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENT-EVENT"/>
                    <set-variable variableName="eventType" value="comments" doc:name="Variable"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[payload['creator']['name']] updated comment on a event [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars['commentValue'].trim()]&quot;" doc:name="UPDATE COMMENT-EVENT"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_content_changed' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='Upload' &amp;&amp; flowVars.commentType=='DocumentComment']">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] updated comment on a file [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENTON-FILE"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated comment on a file [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars['commentValue'].trim()]&quot;" doc:name="COMMENTON-FILE"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_content_changed' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='Document' &amp;&amp; flowVars.commentType=='DocumentComment']">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] updated comment on a file [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENTON-DOCUMENT"/>
                    <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'), '+flowVars.userName+' updated comment on a file ['+flowVars.response.hookResponse.recording.title+']('+flowVars.response.hookResponse.recording.app_url+') as &quot;'+flowVars.commentValue.trim()+'&quot;']" doc:name="COMMENTON-DOCUMENT"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_content_changed' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='GoogleDocument' &amp;&amp; flowVars.commentType=='DocumentComment']">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] updated comment on a file [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENTON-DOCUMENT"/>
                    <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'), '+flowVars.userName+' updated comment on GoogleDocument ['+flowVars.response.hookResponse.recording.title+']('+flowVars.response.hookResponse.recording.app_url+') as &quot;'+flowVars.commentValue.trim()+'&quot;']" doc:name="COMMENTON-DOCUMENT"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_content_changed' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='Todo' &amp;&amp; flowVars.commentType=='TodoComment']">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] updated comment on a todo [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENTEDON-TODO"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated comment on a todo [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars['commentValue'].trim()]&quot; " doc:name="COMMENTEDON-TODO"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_content_changed' &amp;&amp; flowVars.response.hookResponse.recording.parent.type=='Question::Answer']">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] updated comment on a Question::Answer [**#[flowVars.response.hookResponse.recording.title]**](#[flowVars.response.hookResponse.recording.app_url]) as **#[flowVars.response.hookResponse.recording.content]** " level="INFO" doc:name="COMMENTEDON-TODO"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated comment on a Question::Answer [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars['commentValue'].trim()]&quot; " doc:name="COMMENTEDON-TODO"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_deleted' &amp;&amp; ((flowVars.response.hookResponse.recording.parent.type=='Schedule::Entry' &amp;&amp; flowVars.commentType=='ScheduleComment')||((flowVars.response.hookResponse.recording.parent.type=='Todolist'||flowVars.response.hookResponse.recording.parent.type=='Todo') &amp;&amp; flowVars.commentType=='TodoComment')||((flowVars.response.hookResponse.recording.parent.type=='Vault'||flowVars.response.hookResponse.recording.parent.type=='Upload'||flowVars.response.hookResponse.recording.parent.type=='Document'||flowVars.response.hookResponse.recording.parent.type=='GoogleDocument')&amp;&amp; (flowVars.commentType=='DocumentComment')))]">
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] deleted comment [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])  " doc:name="SET COMMENT COPIED"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='upload_archived']">
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] archived document [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])  " doc:name="UPLOAD_ARCHIVED"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_archived' &amp;&amp;((flowVars.response.hookResponse.recording.parent.type=='Schedule::Entry' &amp;&amp; flowVars.commentType=='ScheduleComment')||((flowVars.response.hookResponse.recording.parent.type=='Todolist'||flowVars.response.hookResponse.recording.parent.type=='Todo') &amp;&amp; flowVars.commentType=='TodoComment')||((flowVars.response.hookResponse.recording.parent.type=='Vault'||flowVars.response.hookResponse.recording.parent.type=='Upload'||flowVars.response.hookResponse.recording.parent.type=='Document'||flowVars.response.hookResponse.recording.parent.type=='GoogleDocument')&amp;&amp; (flowVars.commentType=='DocumentComment')))]">
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] archived comment [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) " doc:name="Set Comment Archived"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='upload_copied']">
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] copied document [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])  " doc:name="Set Upload Copied"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_copied' &amp;&amp; ((flowVars.response.hookResponse.recording.parent.type=='Schedule::Entry' &amp;&amp; flowVars.commentType=='ScheduleComment')||((flowVars.response.hookResponse.recording.parent.type=='Todolist'||flowVars.response.hookResponse.recording.parent.type=='Todo') &amp;&amp; flowVars.commentType=='TodoComment')||((flowVars.response.hookResponse.recording.parent.type=='Vault'||flowVars.response.hookResponse.recording.parent.type=='Upload'||flowVars.response.hookResponse.recording.parent.type=='Document'||flowVars.response.hookResponse.recording.parent.type=='GoogleDocument')&amp;&amp; (flowVars.commentType=='DocumentComment')))]">
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] copied comment [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])  " doc:name="SET COMMENT COPIED"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_archived' &amp;&amp; ((flowVars.response.hookResponse.recording.parent.type=='Schedule::Entry' &amp;&amp; flowVars.commentType=='ScheduleComment')||((flowVars.response.hookResponse.recording.parent.type=='Todolist'||flowVars.response.hookResponse.recording.parent.type=='Todo') &amp;&amp; flowVars.commentType=='TodoComment')||((flowVars.response.hookResponse.recording.parent.type=='Vault'||flowVars.response.hookResponse.recording.parent.type=='Upload'||flowVars.response.hookResponse.recording.parent.type=='Document'||flowVars.response.hookResponse.recording.parent.type=='GoogleDocument')&amp;&amp; (flowVars.commentType=='DocumentComment')))]">
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] archived comment [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])  " doc:name="SET COMMENT COPIED"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_trashed' &amp;&amp; ((flowVars.response.hookResponse.recording.parent.type=='Schedule::Entry' &amp;&amp; flowVars.commentType=='ScheduleComment')||((flowVars.response.hookResponse.recording.parent.type=='Todolist'||flowVars.response.hookResponse.recording.parent.type=='Todo') &amp;&amp; flowVars.commentType=='TodoComment')||((flowVars.response.hookResponse.recording.parent.type=='Vault'||flowVars.response.hookResponse.recording.parent.type=='Upload'||flowVars.response.hookResponse.recording.parent.type=='Document'||flowVars.response.hookResponse.recording.parent.type=='GoogleDocument')&amp;&amp; (flowVars.commentType=='DocumentComment')))]">
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] trashed comment [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])  " doc:name="SET COMMENT COPIED"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_unarchived' &amp;&amp; ((flowVars.response.hookResponse.recording.parent.type=='Schedule::Entry' &amp;&amp; flowVars.commentType=='ScheduleComment')||((flowVars.response.hookResponse.recording.parent.type=='Todolist'||flowVars.response.hookResponse.recording.parent.type=='Todo') &amp;&amp; flowVars.commentType=='TodoComment')||((flowVars.response.hookResponse.recording.parent.type=='Vault'||flowVars.response.hookResponse.recording.parent.type=='Upload'||flowVars.response.hookResponse.recording.parent.type=='Document'||flowVars.response.hookResponse.recording.parent.type=='GoogleDocument')&amp;&amp; (flowVars.commentType=='DocumentComment')))]">
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] unarchived comment [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])  " doc:name="SET COMMENT COPIED"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='upload_inserted']">
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] inserted document [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="Set Document Inserted"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='comment_inserted' &amp;&amp; ((flowVars.response.hookResponse.recording.parent.type=='Schedule::Entry' &amp;&amp; flowVars.commentType=='ScheduleComment')||((flowVars.response.hookResponse.recording.parent.type=='Todolist'||flowVars.response.hookResponse.recording.parent.type=='Todo') &amp;&amp; flowVars.commentType=='TodoComment')||((flowVars.response.hookResponse.recording.parent.type=='Vault'||flowVars.response.hookResponse.recording.parent.type=='Upload'||flowVars.response.hookResponse.recording.parent.type=='Document'||flowVars.response.hookResponse.recording.parent.type=='GoogleDocument')&amp;&amp; (flowVars.commentType=='DocumentComment')))]">
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] inserted comment [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="SET COMMENT COPIED"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind !=empty &amp;&amp;(flowVars.splitters[1]=='inserted' ||flowVars.splitters[1]=='copied' || flowVars.splitters[1]=='archived' || flowVars.splitters[1]=='unarchived' || flowVars.splitters[1]=='trashed')]">
                    <logger message="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] #[flowVars.splitters[1]] #[flowVars.splitters[0]] [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) " level="INFO" doc:name="Set Generic Notifications"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] #[flowVars.splitters[1]] #[flowVars.splitters[0]] [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) " doc:name="Set Generic Notifications"/>
                </when>
                <when expression="#[(flowVars.response.hookResponse.kind !=empty &amp;&amp; flowVars.splitters[1]=='entry' &amp;&amp; (flowVars.splitters[1]!='copied' || flowVars.splitters[1]!='archived' || flowVars.splitters[1]!='unarchived' || flowVars.splitters[1]!='trashed') &amp;&amp; (flowVars.splitters[0] == 'schedule') &amp;&amp; (flowVars.splitters[2] !='description'||flowVars.splitters[2] !='created'||flowVars.splitters[2] !='all'))]">
                    <logger message="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] #[flowVars.splitters[2]] event [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" level="INFO" doc:name="Set Generic Notifications"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] #[flowVars.splitters[2]] event [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) " doc:name="Set Generic Notifications"/>

                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='google_document_description_changed']">
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated google document [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="SET Google Doc Updated"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='todolist_description_changed']">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated  todolist description [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars.commentValue]&quot;" doc:name="SET Todolist  Description Updated"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='upload_description_changed']">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated file description [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars.commentValue]&quot;" doc:name="SET Todolist  Description Updated"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='schedule_entry_description_changed']">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated event description [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars.commentValue]&quot;" doc:name="SET Todolist  Description Updated"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='todo_description_changed']">
                    <set-variable variableName="eventType" value="todos" doc:name="Variable"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = payload.description.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated description for [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars.commentValue]&quot;" doc:name="SET Todo Description Updated"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='todo_content_changed']">
                    <logger message="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated todolist name [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" level="INFO" doc:name="ToDo  name Update"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated todo name [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="Variable"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='google_document_document_type_changed']">
                    <logger message="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] trashed todolist [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" level="INFO" doc:name="ToDo  name Update"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated google document type [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="Variable"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind !=empty &amp;&amp; flowVars.splitters[1]=='trashed']">
                    <logger message="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] trashed todo [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" level="INFO" doc:name="ToDo  name Update"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] #[flowVars.splitters[1]] #[flowVars.splitters[0]] [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="Variable"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='question_respondents_changed']">
                    <choice doc:name="RESPONDENTS UPDATE">
                        <when expression="#[flowVars.response.hookResponse.details.removed_person_ids != []]">
                            <set-variable variableName="personId" value="#[flowVars.response.hookResponse.details.removed_person_ids[0]]" doc:name="SET QUESTION SUBSCRIBER UPDATE"/>
                            <flow-ref name="getPeopleInformationFlow" doc:name="getPeopleInformationFlow"/>
                            <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] removed  a person #[payload['name']] from the respondentslist of question [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="QUESTION_ANSWER"/>
                        </when>
                        <otherwise>
                            <set-variable variableName="personId" value="#[flowVars.response.hookResponse.details.added_person_ids[0]]" doc:name="SET QUESTION SUBSCRIBER UPDATE"/>
                            <flow-ref name="getPeopleInformationFlow" doc:name="getPeopleInformationFlow"/>
                            <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] added  a person #[payload['name']] from the respondentslist of question [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="QUESTION-ANSWER"/>
                        </otherwise>
                    </choice>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='question_subscribers_changed']">
                    <choice doc:name="SUBSCRIBERS UPDATE">
                        <when expression="#[flowVars.response.hookResponse.details.containsKey('removed_person_ids')]">
                            <set-variable variableName="personId" value="#[flowVars.response.hookResponse.details.removed_person_ids[0]]" doc:name="SET QUESTION SUBSCRIBER UPDATE"/>
                            <flow-ref name="getPeopleInformationFlow" doc:name="getPeopleInformationFlow"/>
                            <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] removed  a person #[payload['name']] from the subscribers of question [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="QUESTION_ANSWER"/>
                        </when>
                        <when expression="#[flowVars.response.hookResponse.details.containsKey('added_person_ids')]">
                            <set-variable variableName="personId" value="#[flowVars.response.hookResponse.details.added_person_ids[0]]" doc:name="SET QUESTION SUBSCRIBER UPDATE"/>
                            <flow-ref name="getPeopleInformationFlow" doc:name="getPeopleInformationFlow"/>
                            <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] added  a person #[payload['name']] from the subscribers of question [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="QUESTION-ANSWER"/>
                        </when>
                        <otherwise>
                            <logger message="no message to spark room" level="INFO" doc:name="Logger"/>
                        </otherwise>
                    </choice>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='question_title_changed']">
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated question title [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="Variable"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='google_document_title_changed']">
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated google document title [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="Variable"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='question_schedule_time_of_day_changed']">
                    <set-variable variableName="eventType" value="questions" doc:name="SET QUESTION CODE UPDATE"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <logger message="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated event  [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) schedule to  #[payload['schedule_code']] and schedule time of day to #[payload['schedule_time_of_day']]" level="INFO" doc:name="SHEDULE-ENTRY"/>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated question [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) schedule time of day to #[payload['schedule_time_of_day']]" doc:name="SHEDULE-ENTRY"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='question_answer_content_changed']">
                    <expression-component doc:name="UPDATED ANSWER TO QUESTION"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <logger message="In project [**#[flowVars.response.hookResponse.recording.bucket.name]**](#[flowVars.accountInfo.accounts[0].app_href]/projects/#[flowVars.projectId]) #[flowVars.userName] answered for  the question[**#[flowVars.response.hookResponse.recording.parent.title]**](#[flowVars.response.hookResponse.recording.parent.app_url]) as **#[flowVars.commentValue]**" level="INFO" doc:name="QUESTION-ANSWER"/>
                    <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href'/projects/'+flowVars.projectId+'), '+flowVars.userName+' updated answer for  the question ['+flowVars.response.hookResponse.recording.parent.title+']('+flowVars.response.hookResponse.recording.parent.app_url+') as &quot;'+flowVars.commentValue+'&quot;']" doc:name="QUESTION-ANSWER"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind =='todo_due_on_changed']">
                    <set-variable variableName="eventType" value="todos" doc:name="TODO-DUEON _CHANGED"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <choice doc:name="Choice">
                        <when expression="#[payload.starts_on !=null &amp;&amp; payload.due_on !='null']">
                            <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'), '+flowVars.userName+' updated due date of a  todo ['+flowVars.response.hookResponse.recording.title+']('+flowVars.response.hookResponse.recording.app_url+')   \n - starts_at : '+payload.starts_on+' \n - ends_at : '+payload.due_on+'']" doc:name="Variable"/>
                        </when>
                        <when expression="#[payload.starts_on ==null &amp;&amp; payload.due_on !=null]">
                            <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'), '+flowVars.userName+' updated due date of a  todo ['+flowVars.response.hookResponse.recording.title+']('+flowVars.response.hookResponse.recording.app_url+') to '+payload.due_on+'']" doc:name="Variable"/>
                        </when>
                        <otherwise>
                            <set-variable variableName="postMessage" value="#['In project ['+flowVars.response.hookResponse.recording.bucket.name+']('+flowVars.accountInfo.accounts[0].app_href+'/projects/'+flowVars.projectId+'), '+flowVars.userName+' removed due date of todo ['+flowVars.response.hookResponse.recording.title+']('+flowVars.response.hookResponse.recording.app_url+')']" doc:name="Variable"/>
                        </otherwise>
                    </choice>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind =='document_title_changed']">
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated document title [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']])" doc:name="DOCUMENT TITLE UPDATE"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind =='document_content_changed']">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.cmtName = flowVars.response.hookResponse.recording.content.toString().replace('<div>','')]]></expression-component>
                    <expression-component doc:name="Expression"><![CDATA[flowVars.commentValue = flowVars.cmtName.toString().replace('</div>','') ]]></expression-component>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated document content [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) as &quot;#[flowVars.commentValue]&quot;" doc:name="Variable"/>
                </when>
                <when expression="#[flowVars.response.hookResponse.kind=='question_schedule_changed']">
                    <set-variable doc:name="Variable" value="questions" variableName="eventType"/>
                    <flow-ref name="getRecordingInformationFlow" doc:name="getRecordingInformationFlow"/>
                    <choice doc:name="Choice">
                        <when expression="#[payload.schedule.days[0] == 1]">
                            <set-variable doc:name="Variable" value="monday" variableName="day"/>
                        </when>
                        <when expression="#[payload.schedule.days[0] == 2]">
                            <set-variable doc:name="Variable" value="tuesday" variableName="day"/>
                        </when>
                        <when expression="#[payload.schedule.days[0] ==3]">
                            <set-variable doc:name="Variable" value="wednesday" variableName="day"/>
                        </when>
                        <when expression="#[payload.schedule.days[0]==4]">
                            <set-variable doc:name="Variable" value="thursday" variableName="day"/>
                        </when>
                        <when expression="#[payload.schedule.days[0]==5]">
                            <set-variable doc:name="Variable" value="friday" variableName="day"/>
                        </when>
                        <when expression="#[payload.schedule.days[0]==6]">
                            <set-variable doc:name="Variable" value="saturday" variableName="day"/>
                        </when>
                        <when expression="#[payload.schedule.days[0]==0]">
                            <set-variable doc:name="Variable" value="sunday" variableName="day"/>
                        </when>
                        <otherwise>
                            <logger message="off" level="INFO" doc:name="Logger"/>
                        </otherwise>
                    </choice>
                    <set-variable variableName="postMessage" value="In project [#[flowVars['response']['hookResponse']['recording']['bucket']['name']]](#[flowVars['accountInfo']['accounts'][0]['app_href']]/projects/#[flowVars['projectId']]), #[flowVars['userName']] updated schedule time of question [#[flowVars['response']['hookResponse']['recording']['title']]](#[flowVars['response']['hookResponse']['recording']['app_url']]) to #[flowVars.day] at #[payload.schedule.hour]:#[payload.schedule.minute]" doc:name="Variable"/>
                </when>
                <otherwise>
                    <logger message="NO event occured" level="INFO" doc:name="Logger"/>
                </otherwise>
            </choice>

        </foreach>
        <dw:transform-message doc:name="Build Post Format Message Response">
            <dw:set-payload resource="classpath:dwScripts/buildPostFormatMessageResponse.dwl"/>
        </dw:transform-message>
        <logger message="message payload #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>

    </flow>
    <flow name="getPeopleInformationFlow">
        <logger message="context root /#[flowVars.accountInfo.accounts[0].id]/people/#[flowVars.personId].json" level="INFO" doc:name="Logger"/>
        <http:request config-ref="HTTP_Request_Configuration1" path="/#[flowVars.accountInfo.accounts[0].id]/people/#[flowVars.personId].json" method="GET" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Authorization" value="Bearer #[flowVars.token]"/>
                <http:header headerName="Content-Type" value="application/json"/>




            </http:request-builder>
        </http:request>
        <choice doc:name="Choice">
            <when expression="#[message.payloadAs(java.lang.String) != null]">
                <logger message="people info #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
                <dw:transform-message doc:name="Transform Message">
                <dw:input-payload mimeType="application/json"/>
                    <dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
                </dw:transform-message>
            </when>
            <otherwise>
                <logger message="Exception occerd in getpeopleInfo flow" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="getRecordingInformationFlow">
        <logger message="/#[flowVars.accountInfo.accounts[0].id]/buckets/#[flowVars.projectId]/#[flowVars.eventType]/#[flowVars.response.hookResponse.recording.id].json" level="INFO" doc:name="Logger"/>
        <http:request config-ref="HTTP_Request_Configuration1" path="/#[flowVars.accountInfo.accounts[0].id]/buckets/#[flowVars.projectId]/#[flowVars.eventType]/#[flowVars.response.hookResponse.recording.id].json" method="GET" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Authorization" value="Bearer #[flowVars.token]"/>
                <http:header headerName="Content-Type" value="application/json"/>



            </http:request-builder>
        </http:request>
        <logger message="Recording Info #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Transform Message">
        <dw:input-payload mimeType="application/json"/>
            <dw:set-payload resource="dwScripts/fromPayloadToJava.dwl"/>
        </dw:transform-message>
    </flow>
 
<flow name="setupIntegrationFlow">
        <logger message="initial #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
    	<dw:transform-message doc:name="Transform Payload to Java">
            <dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
        </dw:transform-message>
        <logger message="setup flow #[payload] &amp;&amp; #[payload['instanceUuid']]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="event" value="#[payload['configJson']['event']]" doc:name="Variable"/>
        <set-variable variableName="commentType" value="#[payload['configJson']['commentType']]" doc:name="Set CommentType"/>
        <set-variable variableName="isScheduledEntry" value="#[payload['configJson']['isScheduledEntry']]" doc:name="Set isScheduledEntry"/>
        <logger message="#[flowVars['commentType']]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="integrationId" value="#[payload.integrationId.toString()]" doc:name="Set IntegrationId"/>
        <set-variable variableName="userId" value="#[payload['userId']]" doc:name="Set UserId"/>
        <set-variable variableName="displayName" value="#[payload['configJson']['displayName']]" doc:name="Set DisplayName"/>
        <set-variable variableName="url" value="https://${basecamp.hook.domain}/api/hooks/#[payload['instanceUuid']]" doc:name="Set WebhookUrl"/>

        <set-variable variableName="instanceId" value="#[payload['instanceId']]" doc:name="Set InstanceId"/>
        <logger message="++++++++projectId #[payload.configJson.project_id.toString()]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="projectId" value="#[payload.configJson.project_id.toString()]" doc:name="Set ProjectId"/>
        <logger message="url: #[flowVars.url]&amp;&amp; ID:#[flowVars.projectId]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="events" value="#[payload['configJson']['notifications']]" doc:name="Set Events"/>
        <logger message="ev #[flowVars['events']]" level="INFO" doc:name="Logger"/>


        
       	<flow-ref name="getRuntimeAccessTokenFlow" doc:name="getRuntimeAccessTokenFlow"/>
        <logger message="Token in setup flow #[flowVars['token']]" level="INFO" doc:name="Logger"/>
        <flow-ref name="getBasecampAuthorizationFlow" doc:name="getBasecampAuthorizationFlow"/>
        <logger message="#[flowVars['accountInfo']['accounts'][0]['id']] &amp;&amp; ${basecamp.hook.domain}" level="INFO" doc:name="Logger"/>
        <set-payload value="#[flowVars['events']]" mimeType="application/json" doc:name="Set Payload"/>
        <logger message="payload at setpayload #[payload]" level="INFO" doc:name="Logger"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>

       
        <dw:transform-message doc:name="Build Post Basecamp Hook Body">
            <dw:set-variable resource="classpath:dwScripts/buildPostBasecampHookBody.dwl" variableName="hookPostBody"/>

        </dw:transform-message>

        
        <enricher target="#[flowVars['postHookResponse']]" doc:name="Message Enricher">
            <flow-ref name="postBasecampHookFlow" doc:name="postBasecampHookFlow"/>
        </enricher>
        <logger message="before update  ::::::project id :#[flowVars['projectId']] :::: #[flowVars['postHookResponse']['id']]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload resource="classpath:dwScripts/buildUpdateInstanceInformation.dwl"/>
        </dw:transform-message>
        <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>

        <http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration" path="/integrations/instances/{instanceId}" method="PUT" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="instanceId" value="#[flowVars['instanceId']]"/>

            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload resource="classpath:dwScripts/buildDBResult.dwl"/>
        </dw:transform-message>
        
        <dw:transform-message doc:name="Build Setup Integration Response">
            <dw:set-payload resource="classpath:dwScripts/buildSetupIntegrationResponse.dwl"/>
        </dw:transform-message>
    </flow>
    
    <flow name="tearDownIntegrationFlow">
        <logger message="delete integration payload #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>

<dw:transform-message doc:name="Transform Payload to Java">
           <dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
       </dw:transform-message>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="integrationId" value="#[payload['integrationId']]" doc:name="Set IntegrationId"/>
        <set-variable variableName="userId" value="#[payload['userId']]" doc:name="Set UserId"/>
        <set-variable variableName="instanceId" value="#[payload['instanceId']]" doc:name="Set InstanceId"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload resource="classpath:dwScripts/buildConfigJsonFromPayloadToJava.dwl"/>
        </dw:transform-message>
        <set-variable variableName="webhookId" value="#[json:webhook_id]" doc:name="Set hookId"/>
        <set-variable variableName="projectIdOld" value="#[json:project_id]" doc:name="Set ProjectId"/>
       
       <flow-ref name="getRuntimeAccessTokenFlow" doc:name="getRuntimeAccessTokenFlow"/>
        <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
        <flow-ref name="getBasecampAuthorizationFlow" doc:name="getBasecampAuthorizationFlow"/>

       <enricher target="#[flowVars['deleteHookResponse']]" doc:name="Message Enricher">
           <flow-ref name="deleteBasecampHookFlow" doc:name="deleteBasecampHookFlow"/>
       </enricher>

       
       
       <dw:transform-message doc:name="Build Tear Down Integration Response">
           <dw:set-payload resource="classpath:dwScripts/buildTearDownIntegrationResponse.dwl"/>
       </dw:transform-message>
   </flow>
    
    
<flow name="updateIntegrationFlow">
        <logger message="in updaTE FLOW initial payload #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>

        <dw:transform-message doc:name="Transform Message">
        <dw:input-payload mimeType="application/json"/>
            <dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
        </dw:transform-message>
        <logger message="payload in update flow #[payload]  #[payload.instance_id]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="event" value="#[payload['configJson']['event']]" doc:name="Variable"/>
        <set-variable variableName="commentType" value="#[payload['configJson']['commentType']]" doc:name="Set CommentType"/>
        <set-variable variableName="isScheduledEntry" value="#[payload['configJson']['isScheduledEntry']]" doc:name="Set isScheduledEntry"/>
        <set-variable variableName="instanceId" value="#[payload.instance_id.toString()]" doc:name="Set InstanceId"/>
        <set-variable variableName="projectId" value="#[payload.configJson.project_id.toString()]" doc:name="Set ProjectId"/>
        <set-variable variableName="userId" value="#[payload['userId']]" doc:name="Set UserId"/>
        <set-variable variableName="integrationId" value="#[payload['integrationId']]" doc:name="Set IntegrationId"/>

        <set-variable variableName="url" value="https://${basecamp.hook.domain}/api/hooks/#[payload['instanceUuid']]" doc:name="Set WebhookUrl"/>
        <set-variable variableName="projectModified" value="#[payload['repo_modified']]" doc:name="SET PROJECT"/>
        <set-variable variableName="displayName" value="#[payload['configJson']['displayName']]" doc:name="Variable"/>
        <set-variable variableName="events" value="#[payload['configJson']['notifications']]" doc:name="Set Events"/>


       <set-variable variableName="webhookId" value="#[payload['configJson']['webhook_id']]" doc:name="Set WebhookId"/>
        <set-variable variableName="projectIdOld" value="#[payload['configJson']['project_id_old']]" doc:name="Variable"/>
        <logger message="events:#[flowVars['events']]  &amp;&amp; #[flowVars['webhookId']] &amp;&amp; #[flowVars['projectId']]" level="INFO" doc:name="Logger"/>

       
      <flow-ref name="getRuntimeAccessTokenFlow" doc:name="getRuntimeAccessTokenFlow"/>
        <flow-ref name="getBasecampAuthorizationFlow" doc:name="getBasecampAuthorizationFlow"/>
        <set-payload value="#[flowVars['events']]" doc:name="Set Payload"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger message="events:#[payload]" level="INFO" doc:name="Logger"/>

       
       <dw:transform-message doc:name="Build Put Basecamp Hook Body">
            <dw:set-variable resource="classpath:dwScripts/buildPutBasecampHookBody.dwl" variableName="hookPostBody"/>



       </dw:transform-message>
       <choice doc:name="Choice">
           <when expression="#[flowVars['projectModified'] == true]">
                <enricher target="#[flowVars['deleteHookResponse']]" doc:name="Message Enricher">
                    <http:request config-ref="HTTP_Operations_Request_Configuration" path="/#[flowVars.accountInfo.accounts[0].id]/buckets/#[flowVars.projectIdOld]/webhooks/#[flowVars.webhookId].json" method="DELETE" doc:name="HTTP">
                        <http:request-builder>
                            <http:header headerName="Authorization" value="Bearer #[flowVars.token]"/>
                        </http:request-builder>
                        <http:failure-status-code-validator values="500..599"/>
                    </http:request>

                </enricher>
               <enricher target="#[flowVars['hookResponse']]" doc:name="Message Enricher">
                   <flow-ref name="postBasecampHookFlow" doc:name="postBasecampHookFlow"/>
               </enricher>

               <set-variable variableName="hookId" value="#[flowVars['hookResponse']['id']]" doc:name="Set Updated WebhookId"/>
                <logger message="Infront of update instnce #[flowVars['hookId']]" level="INFO" doc:name="Logger"/>


           </when>
            <when expression="#[flowVars['projectModified'] == false]">
                <enricher target="#[flowVars['hookResponse']]" doc:name="Message Enricher">
                    <flow-ref name="putBasecampHookFlow" doc:name="putBasecampHookFlow"/>
                </enricher>
                <set-variable variableName="hookId" value="#[flowVars['hookResponse']['id']]" doc:name="Variable"/>
                <logger message="Infront of update instnce #[flowVars['hookId']] &amp;&amp; #[flowVars['hookResponse']['id']]" level="INFO" doc:name="Logger"/>
            </when>
           <otherwise>
                <logger message="Default" level="INFO" doc:name="Logger"/>

           </otherwise>
       </choice>
       <enricher target="#[flowVars['updateIntegrationInstanceResult']]" doc:name="Message Enricher">
           <flow-ref name="putIntegrationInstance" doc:name="putIntegrationInstance"/>
       </enricher>
        <logger message="last Test = #[flowVars['hookResponse']]" level="INFO" doc:name="Logger"/>
        <set-payload value="#[{&quot;result&quot;:flowVars.hookResponse}]" doc:name="Set Payload"/>

   </flow>
    
    
<flow name="getRuntimeAccessTokenFlow">

        <logger message="#[flowVars.integrationId] &amp;&amp; UID #[flowVars.userId]" level="INFO" doc:name="Logger"/>

         <logger message="UID :::#[flowVars.userId] &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; IID::#[flowVars.integrationId]" level="INFO" doc:name="Logger"/>
    	<http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration" path="/integrations/{integrationId}/appTokens" method="GET" doc:name="HTTP">
        	<http:request-builder>
                <http:query-param paramName="userId" value="#[flowVars.userId]"/>
                <http:uri-param paramName="integrationId" value="#[flowVars.integrationId]"/>


            </http:request-builder>
        </http:request>
        <logger message="Token from db#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
        <logger message="accessToken via json #[flowVars.accessToken]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[payload.toString() !='{message=No results}']">
                <set-variable variableName="token" value="#[json:[0]/accessToken]" doc:name="Set basecampToken"/>
                <logger message="TOKEN AFTER VARIABLE   #[flowVars.token]" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>

    </flow>
    <flow name="setBasecampVariablesFlow">


        <set-variable variableName="repository" value="#[payload.configJson.listName]" doc:name="Set Repository"/>
        <set-variable variableName="hookId" value="#[payload.configJson.hookId]" doc:name="Set Hook ID"/>
        <set-variable variableName="webhookUrl" value="https://${basecamp.hook.domain}/api/hooks/#[payload['instanceUuid']]" doc:name="Set Url"/>

    </flow>

    
    <flow name="healthCheckFlow">
        <set-variable variableName="userId" value="#[json:userId]" doc:name="Set UserId"/>
        <set-variable variableName="integrationId" value="#[json:integrationId]" doc:name="Set IntegrationId"/>
        <logger message="USERID #[flowVars['userId']] AND #[flowVars['integrationId']]" level="INFO" doc:name="Logger"/>
        <enricher target="#[flowVars['tokenResult']]" doc:name="Message Enricher">
            <flow-ref name="getIntegrationTokenFlow" doc:name="getIntegrationTokenFlow"/>
        </enricher>
        <logger message="Instances from DB #[flowVars.tokenResult] TCHECKKKKKKKKKKKKKKKK" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[ flowVars.tokenResult.toString() != 'No results']">
                <set-variable variableName="refreshToken" value="#[flowVars['tokenResult']['refreshToken']]" doc:name="Set RefreshToken"/>
                <logger message="#[flowVars['tokenResult']['refreshToken']] REFRESAHTOKENTOKEN" level="INFO" doc:name="Logger"/>
                <set-variable variableName="appTokenId" value="#[flowVars['tokenResult']['tokenId']]" doc:name="Set appTokenId"/>
                <logger message="#[flowVars['tokenResult']] TOKENNNNNNNNNNNNNNNN #[flowVars['refreshTokenResult']]EFRESH TOKEN RESUTL" level="INFO" doc:name="Logger"/>
                <set-variable variableName="status" value="#['ACTIVE']" doc:name="Set Status"/>
                <http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration" path="/integrations/instances/" method="GET" doc:name="HTTP">
                    <http:request-builder>
                        <http:query-param paramName="integrationId" value="#[flowVars['integrationId']]"/>
                        <http:query-param paramName="userId" value="#[flowVars['userId']]"/>
                        <http:query-param paramName="status" value="#[flowVars['status']]"/>




                    </http:request-builder>
                </http:request>
                <logger message="Instances from DB #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
                </dw:transform-message>

                <logger message="Instance Json Payload after set payload  #[payload]" level="DEBUG" doc:name="Logger"/>
            <choice doc:name="Choice">
            <when expression="#[payload != empty]">

                <set-variable variableName="token" value="#[flowVars['tokenResult']['accessToken']]" doc:name="Set Integration AccessToken"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload resource="classpath:dwScripts/buildConfigJsonFromDB.dwl"/>
                </dw:transform-message>
                        <logger message="#[message.payloadAs(java.lang.String)] HHHHHHHHHHHHHSDDDDDDDDD" level="INFO" doc:name="Logger"/>
                <set-variable variableName="hookId" value="#[json:webhook_id]" doc:name="Set webhookUuid"/>
                <set-variable variableName="projectId" value="#[json:project_id]" doc:name="Set repoId"/>

                        <flow-ref name="getBasecampAuthorizationFlow" doc:name="getBasecampAuthorizationFlow"/>

                        <logger message="#[message.payloadAs(java.lang.String)] HHHHHHHHHHHHHSDDDDDDDDD" level="DEBUG" doc:name="Logger"/>

                <enricher target="#[flowVars['getHookResult']]" doc:name="Message Enricher">
                    <flow-ref name="getBasecampHookFlow" doc:name="getBasecampHookFlow"/>
                </enricher>
                        <logger message=" WEBHOOK RESPONSE::: #[flowVars['getHookResult']]" level="INFO" doc:name="Logger"/>

            </when>
            <otherwise>
                <set-variable variableName="getHookResult" value="#['No Instances found to get the webhook detials for the given user']" doc:name="Set hookResult"/>
            </otherwise>
        </choice>
            
            
            </when>
            <otherwise>
                <logger message="NO RESULT FOUND NO RESULT FOUND" level="INFO" doc:name="Logger"/>
                <set-variable variableName="getHookResult" value="#['No Integration App token found to get the instance detials for the given user']" doc:name="Set HookResult"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload resource="classpath:dwScripts/buildHealthCheckResponse.dwl"/>
                </dw:transform-message>
            </otherwise>
        </choice>

        
        <dw:transform-message doc:name="Build Health Check Response">
            <dw:set-payload resource="classpath:dwScripts/buildHealthCheckResponse.dwl"/>

        </dw:transform-message>

        

        <catch-exception-strategy doc:name="Catch Exception Strategy" >
            <logger message="Exception has been encounter while processing health check #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
            <set-variable variableName="exception" value="#[exception.message]" doc:name="Set Exception Message."/>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload resource="classpath:dwScripts/buildPostHealthCheckFailureMessage.dwl"/>
            </dw:transform-message>
        </catch-exception-strategy>

        
    </flow>    <flow name="Basecamp-RefreshTokenFlowReference">
        <vm:inbound-endpoint exchange-pattern="request-response" path="refreshToken" doc:name="VM"/>
        <http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration" path="/integrations/{integrationId}/appTokens" method="GET" doc:name="HTTP call To refresh Token">
            <http:request-builder>
                <http:uri-param paramName="integrationId" value="${basecamp.integration.id}"/>





            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-variable resource="classpath:dwScripts/fromPayloadToJava.dwl" variableName="basecampAppTokens"/>

        </dw:transform-message>
        <foreach collection="#[flowVars.basecampAppTokens]" doc:name="For Each">
            <flow-ref name="refreshRefreshTokenSubFlow" doc:name="refreshRefreshTokenSubFlow"/>
        </foreach>

    </flow>
    <flow name="refreshRefreshTokenSubFlow">
        <dw:transform-message doc:name="Transform Message">
        <dw:input-payload mimeType="application/java"/>
            <dw:set-variable resource="classpath:dwScripts/fromPayloadToJava.dwl" variableName="basecampToken"/>


        </dw:transform-message>
        <expression-filter expression="#[(payload.expires!=null)&amp;&amp;(payload.accessToken!=null)&amp;&amp;(payload.refreshToken!=null)]" doc:name="Expression"/>
        <choice doc:name="Choice">
            <when expression="#[server.dateTime.plusDays(1).isAfter(new org.mule.el.datetime.DateTime(payload.expires))]">
                <logger level="INFO" doc:name="Logger" message="Expires Now Refreshing"/>

                <http:request config-ref="HTTP_Request_Configuration2" path="${basecamp.api.access.token.path}" method="POST" doc:name="HTTP">
        	<http:request-builder>
                        <http:query-param paramName="type" value="refresh"/>
                        <http:query-param paramName="client_id" value="${basecamp.integration.client.id}"/>
                        <http:query-param paramName="client_secret" value="${basecamp.integration.client.secret}"/>
                        <http:query-param paramName="grant_type" value="refresh_token"/>
                        <http:query-param paramName="refresh_token" value="#[payload.refreshToken]"/>






            </http:request-builder>
            <http:failure-status-code-validator values="500..599"/>
        </http:request>
                <object-to-string-transformer doc:name="Object to String"/>

                <enricher target="#[flowVars.refreshTokenValues]" doc:name="Message Enricher">
                    <dw:transform-message doc:name="Transform Message">
                        <dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
                    </dw:transform-message>
                </enricher>
                <set-payload value="#[{'accessToken':flowVars.refreshTokenValues.access_token,'expires':flowVars.refreshTokenValues.expires_in}]" doc:name="Set Payload"/>
                <json:object-to-json-transformer doc:name="Object to JSON"/>
                <http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration" path="/integrations/{integrationId}/appTokens/{appTokenId}" method="PUT" doc:name="HTTPCall To UpdateBasecampTokens">
                    <http:request-builder>
                        <http:uri-param paramName="integrationId" value="${basecamp.integration.id}"/>
                        <http:uri-param paramName="appTokenId" value="#[flowVars.basecampToken.tokenId]"/>
                        <http:header headerName="Content-Type" value="application/json"/>





                    </http:request-builder>
                </http:request>
                <logger message="Updated RefreshToken" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="Logger" message="AccessToken Not expired"/>
            </otherwise>
        </choice>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="#[message.exception]" level="INFO" doc:name="Logger"/>
        </catch-exception-strategy>

    </flow>

</mule>
