<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
   
    <flow name="postAuthDetailsFlow1">
       <dw:transform-message doc:name="Transform Payload to Java">
            <dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
        </dw:transform-message>
    </flow>

	<flow name="postFormatMessageFlow1">
        <logger message="MSg_Formt PAYLOAD :::::::: #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Transform Message To Java">
            <dw:set-variable variableName="response" resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
        </dw:transform-message>
        <set-payload value="#[flowVars['response']['hookResponse']['data']]" doc:name="Set Payload"/>
        <choice doc:name="Choosing Event Type">
            <when expression="flowVars['response']['hookResponse']['event']=='new_ticket'">
                <logger message="new ticket" level="INFO" doc:name="Log for New Ticket"/>
                <set-variable variableName="new" value="&lt;p&gt;&lt;a href=#['\'']#[json:ticket/created_by/url]#['\'']&gt;#[json:ticket/created_by/name]&lt;/a&gt; &lt;b&gt;created ticket&lt;/b&gt; &lt;a href=#['\'']#[json:ticket/url]#['\'']&gt;#[json:ticket/subject]&lt;/a&gt; with note as &lt;p&gt;#['\&quot;']#[json:ticket/notes[0]/body]#['\&quot;']&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Status : &lt;b&gt;&lt;b&gt;#[json:ticket/state]&lt;/b&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Contact : &lt;a href=#['\'']#[json:ticket/contact/url]#['\'']&gt;#[json:ticket/contact/name]&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;" doc:name="Variable"/>
            </when>
            <when expression="flowVars['response']['hookResponse']['event']=='new_ticket_admin_reply'">
                <logger message="Log for ticket admin reply" level="INFO" doc:name="Log for ticket admin reply"/>
                <set-variable variableName="comment" value="#[json:message/plaintext_body]" doc:name="Comment"/>
                <expression-component doc:name="Expression to filter comments"><![CDATA[flowVars.comment=flowVars.comment.replaceAll('\n\n','</br> ')]]></expression-component>
                <set-variable variableName="new" value="&lt;p&gt;&lt;a href=#['\'']#[json:message/sender/url]#['\'']&gt;#[json:message/sender/name]&lt;/a&gt; &lt;b&gt;commented on ticket&lt;/b&gt; &lt;a href=#['\'']#[json:ticket/url]#['\'']&gt;#[json:ticket/subject]&lt;/a&gt; as &lt;p&gt;#['\&quot;']#[flowVars.comment]#['\&quot;'] &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Status : &lt;b&gt;#[json:ticket/state]&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Contact : &lt;a href=#['\'']#[json:ticket/contact/url]#['\'']&gt;#[json:ticket/contact/name]&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;" doc:name="Variable"/>
            </when>
            <when expression="flowVars['response']['hookResponse']['event']=='new_ticket_note'">
                <logger message="New Ticket Note" level="INFO" doc:name="Logger New Ticket Note"/>
                <set-variable variableName="notebody" value="#[json:note/body]" doc:name="note body"/>
                <expression-component doc:name="Expression to filter note"><![CDATA[flowVars.notebody=flowVars.notebody.replaceAll('\\u003cbr\\u003e\\n','</br> ')]]></expression-component>
                <set-variable variableName="new" value="&lt;p&gt;&lt;a href=#['\'']#[json:note/creator/url]#['\'']&gt;#[json:note/creator/name]&lt;/a&gt; &lt;b&gt;created a new note&lt;/b&gt; on ticket &lt;a href=#['\'']#[json:ticket/url]#['\'']&gt;#[json:ticket/subject]&lt;/a&gt; as &lt;p&gt;#['\&quot;']#[flowVars.notebody]#['\&quot;']&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Status : &lt;b&gt;#[json:ticket/state]&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Contact : &lt;a href=#['\'']#[json:ticket/contact/url]#['\'']&gt;#[json:ticket/contact/name]&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;" doc:name="Variable"/>
            </when>
            <when expression="flowVars['response']['hookResponse']['event']=='ticket_status_update'">
                <logger message="Ticket Status Update" level="INFO" doc:name="Ticket Status Update"/>
                <set-variable variableName="new" value="&lt;p&gt;&lt;a href=#['\'']#[json:ticket/updated_by/url]#['\'']&gt;#[json:ticket/updated_by/name]&lt;/a&gt; updated ticket &lt;a  href=#['\'']#[json:ticket/url]#['\'']&gt;#[json:ticket/subject]&lt;/a&gt; status to &lt;b&gt;#[json:ticket/state]&lt;/b&gt; &lt;ul&gt;&lt;li&gt;Contact : &lt;a href=#['\'']#[json:ticket/contact/url]#['\'']&gt;#[json:ticket/contact/name]&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;" doc:name="Variable"/>
            </when>
            <when expression="flowVars['response']['hookResponse']['event']=='new_suggestion'">
                <logger message="New Suggestion" level="INFO" doc:name="New Suggestion"/>
                <set-variable variableName="comment" value="#[json:suggestion/text]" doc:name="Suggestion Description"/>
                <choice doc:name="Choice to check if description available or not">
                    <when expression="#[(flowVars.comment != null) || (flowVars.comment != empty)]">
                        <expression-component doc:name="Expression"><![CDATA[flowVars.comment=flowVars.comment.replaceAll('\n','</br> ')]]></expression-component>
                        <set-variable variableName="new" value="&lt;p&gt;&lt;a href=#['\'']#[json:suggestion/creator/url]#['\'']&gt;#[json:suggestion/creator/name]&lt;/a&gt; &lt;b&gt;created suggestion&lt;/b&gt; &lt;a href=#['\'']#[json:suggestion/url]#['\'']&gt;#[json:suggestion/title]&lt;/a&gt; with the below description &lt;p&gt;#['\&quot;']#[flowVars.comment]#['\&quot;']&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Status : &lt;b&gt;#[json:suggestion/state]&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Forum : #[json:suggestion/topic/forum/name]&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;" doc:name="Variable"/>
                    </when>
                    <otherwise>
                        <set-variable variableName="new" value="&lt;p&gt;&lt;a href=#['\'']#[json:suggestion/creator/url]#['\'']&gt;#[json:suggestion/creator/name]&lt;/a&gt; &lt;b&gt;created suggestion&lt;/b&gt; &lt;a href=#['\'']#[json:suggestion/url]#['\'']&gt;#[json:suggestion/title]&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Status : &lt;b&gt;#[json:suggestion/state]&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Forum : #[json:suggestion/topic/forum/name]&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;" doc:name="Variable"/>
                    </otherwise>
                </choice>

            </when>
            <when expression="flowVars['response']['hookResponse']['event']=='new_comment'">
                <logger message="New Comment" level="INFO" doc:name="New Comment"/>
                <set-variable variableName="comment" value="#[json:comment/text]" doc:name="Comment"/>
                <expression-component doc:name="Filter Comment message"><![CDATA[flowVars.comment=flowVars.comment.replaceAll('\n','</br> ')]]></expression-component>
                <set-variable variableName="new" value="&lt;p&gt;&lt;a href=#['\'']#[json:comment/creator/url]#['\'']&gt;#[json:comment/creator/name]&lt;/a&gt; &lt;b&gt;commented on suggestion&lt;/b&gt; &lt;a href=#['\'']#[json:comment/suggestion/url]#['\'']&gt;#[json:comment/suggestion/title]&lt;/a&gt; as &lt;p&gt;#['\&quot;']#[flowVars.comment]#['\&quot;']&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Status : #[json:comment/suggestion/state]&lt;/li&gt;&lt;li&gt; Forum : #[json:comment/suggestion/topic/forum/name]&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;" doc:name="Variable"/>
            </when>
            <when expression="flowVars['response']['hookResponse']['event']=='new_article'">
                <logger message="New Article" level="INFO" doc:name="New Article"/>
                <set-variable variableName="comment" value="#[json:article/formatted_text]" doc:name="Variable"/>
                <expression-component doc:name="Expression"><![CDATA[flowVars.comment=flowVars.comment.replaceAll('\\u003cbr\\u003e\\n','</br>')]]></expression-component>
        <logger message="#[flowVars.test]  " level="INFO" doc:name="Copy_of_Logger"/>
        <expression-component doc:name="Expression"><![CDATA[flowVars.comment=flowVars.comment.replaceAll('\\u0026nbsp;','')]]></expression-component>
        <logger message="#[flowVars.test]  " level="INFO" doc:name="Logger"/>
        <expression-component doc:name="Expression"><![CDATA[flowVars.comment=flowVars.comment.replaceAll('\\u003e\\u003cdiv\\u003e\\u003c/div\\u003e;','')]]></expression-component>
        <logger message="#[flowVars.test]   ::::::::: #[json:article/topic] ::::::::::: #[json:article/topic/name]" level="INFO" doc:name="Copy_of_Logger"/>
                <set-variable variableName="topic" value="#[json:article/topic/name]" doc:name="Variable"/>
                <choice doc:name="Article topic choice">
                    <when expression="flowVars.topic != empty">
                        <set-variable variableName="new" value="&lt;p&gt;&lt;a href=#['\'']#[json:article/updated_by/url]#['\'']&gt;#[json:article/updated_by/name]&lt;/a&gt; created article &lt;a href=#['\'']#[json:article/url]#['\'']&gt;#[json:article/title]&lt;/a&gt; with description as&lt;p&gt;#['\&quot;']#[flowVars.comment]#['\&quot;']&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Topic : #[json:article/topic/name]&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;" doc:name="Value if Topic Not Null"/>
                    </when>
                    <otherwise>
                        <set-variable variableName="new" value="&lt;p&gt;&lt;a href=#['\'']#[json:article/updated_by/url]#['\'']&gt;#[json:article/updated_by/name]&lt;/a&gt; created article &lt;a href=#['\'']#[json:article/url]#['\'']&gt;#[json:article/title]&lt;/a&gt; with description as&lt;p&gt;#['\&quot;']#[flowVars.comment]#['\&quot;']&lt;/p&gt;&lt;/p&gt;" doc:name="Value if Topic is Null"/>
                    </otherwise>
                </choice>

            </when>
            <when expression="flowVars['response']['hookResponse']['event']=='new_ticket_reply'">
                <logger message="Logger Ticket Reply" level="INFO" doc:name="Logger Ticket Reply"/>
                <set-variable variableName="comment" value="#[json:message/plaintext_body]" doc:name="Variable"/>
                <expression-component doc:name="Expression to add new lines"><![CDATA[flowVars.comment=flowVars.comment.replaceAll('\n','</br> ')]]></expression-component>

                <set-variable variableName="new" value="&lt;p&gt;&lt;a href=#['\'']#[json:message/sender/url]#['\'']&gt;#[json:message/sender/name]&lt;/a&gt; &lt;b&gt;replied on ticket&lt;/b&gt; &lt;a href=#['\'']#[json:ticket/url]#['\'']&gt;#[json:ticket/subject]&lt;/a&gt; as &lt;p&gt;#['\&quot;']#[flowVars.comment]#['\&quot;'] &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Status : &lt;b&gt;#[json:ticket/state]&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Contact : &lt;a href=#['\'']#[json:ticket/contact/url]#['\'']&gt;#[json:ticket/contact/name]&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;" doc:name="Variable"/>
            </when>
            <when expression="flowVars['response']['hookResponse']['event']=='new_kudo'">
                <logger message="Logger Kudos " level="INFO" doc:name="Logger Kudos "/>
                <set-variable variableName="new" value="&lt;p&gt;&lt;a href=#['\'']#[json:kudo/message/sender/url]#['\'']&gt;#[json:kudo/message/sender/name]&lt;/a&gt; received &lt;b&gt;Kudos&lt;/b&gt; from &lt;a href=#['\'']#[json:kudo/sender/url]#['\'']&gt;#[json:kudo/sender/name]&lt;/a&gt; on ticket &lt;a href=#['\'']#[json:kudo/ticket/url]#['\'']&gt;#[json:kudo/ticket/subject]&lt;/a&gt;&lt;/p&gt;" doc:name="Variable"/>
            </when>
            <when expression="flowVars['response']['hookResponse']['event']=='suggestion_status_update'">
                <logger message="Logger suggestion Status" level="INFO" doc:name="Logger suggestion Status"/>
                <set-variable variableName="comment" value="#[json:audit_status/suggestion/response/text]" doc:name="Comment"/>
                <expression-component doc:name="Expression"><![CDATA[flowVars.comment=flowVars.comment.replaceAll('\n','</br> ')]]></expression-component>
                <set-variable variableName="new" value="&lt;p&gt;&lt;a href=#['\'']#[json:audit_status/suggestion/status_changed_by/url]#['\'']&gt;#[json:audit_status/suggestion/status_changed_by/name]&lt;/a&gt; updated suggestion &lt;a  href=#['\'']#[json:audit_status/suggestion/url]#['\'']&gt;#[json:audit_status/suggestion/title]&lt;/a&gt; status to &lt;b&gt;#[json:audit_status/suggestion/state]&lt;/b&gt; with response as&lt;p&gt;#['\&quot;']#[flowVars.comment]#['\&quot;']&lt;/p&gt;&lt;/p&gt;" doc:name="Variable"/>
            </when>
            <when expression="flowVars['response']['hookResponse']['event']=='new_user_story'">
                <logger message="New User FeedBack" level="INFO" doc:name="Logger New User FeedBack"/>
                <set-variable variableName="comment" value="#[json:user_story/body]" doc:name="Comment Variable"/>
                <expression-component doc:name="Expression"><![CDATA[flowVars.comment=flowVars.comment.replaceAll('\n','</br> ')]]></expression-component>
                <set-variable variableName="new" value="&lt;p&gt;&lt;a href=#['\'']#[json:user_story/suggestion/creator/url]#['\'']&gt;#[json:user_story/suggestion/creator/name]&lt;/a&gt; gave feedback on suggestion &lt;a href=#['\'']#[json:user_story/suggestion/url]#['\'']&gt;#[json:user_story/suggestion/title]&lt;/a&gt; with description &lt;p&gt;#['\&quot;']#[flowVars.comment]#['\&quot;']&lt;/p&gt;&lt;/p&gt;" doc:name="Variable"/>
            </when>
            <when expression="flowVars['response']['hookResponse']['event']=='suggestion_votes_update'">
                <logger level="INFO" doc:name="Logger  votes"/>
                <set-variable variableName="new" value="&lt;p&gt;&lt;b&gt;Votes Updated&lt;/b&gt; on suggestion &lt;a href=#['\'']#[json:suggestion/url]#['\'']&gt;#[json:suggestion/title]&lt;/a&gt; &lt;ul&gt;&lt;li&gt;Status : &lt;b&gt;#[json:suggestion/state]&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Forum : &lt;b&gt;#[json:suggestion/topic/forum/name]&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Votes Count : &lt;b&gt;#[json:suggestion/vote_count]&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;" doc:name="Variable"/>
            </when>
            <otherwise>
                <logger message="Default Logger" level="INFO" doc:name="DefaultLogger"/>
            </otherwise>
        </choice>
        <dw:transform-message doc:name="Format Message Response">
            <dw:set-payload resource="classpath:dwScripts/buildFormatMessageResponseExample.dwl"/>
        </dw:transform-message>
        <logger message="    ::::::::::::::::::      #[message.payload.toString()]" level="INFO" doc:name="Logger"/>

			<catch-exception-strategy doc:name="Catch Exception Strategy" logException="false">
            <set-variable variableName="exception" value="#[exception.message]" doc:name="exception"/>
            <logger message="Exception in Uservoice Msg_Formt Flow = #[flowVars['exception']] ++++++++ payload = #[payload]" level="INFO" doc:name="Logger"/>
        </catch-exception-strategy>
       </flow>
       
       
    <flow name="postIntegrationSettingsFlow1">
        <flow-ref name="getWebhookFlow" doc:name="Get WebHook Flow"/>
    	<dw:transform-message doc:name="Settings Response">
            <dw:set-payload resource="classpath:dwScripts/buildUservoiceSettingsResponseExample.dwl"/>
        </dw:transform-message>
    </flow>
    
    <flow name="setupIntegrationFlow1">
        <dw:transform-message doc:name="Build Setup Integration Response">
            <dw:set-payload resource="classpath:dwScripts/buildSetupIntegrationResponse.dwl"/>
        </dw:transform-message>
    </flow>
    <flow name="updateIntegrationFlow1">
        <dw:transform-message doc:name="Transform Update Integration Response">
            <dw:set-payload resource="classpath:dwScripts/fromPayloadToJson.dwl"/>
        </dw:transform-message>
    </flow>
    
    <flow name="tearDownIntegrationFlow1">
        <dw:transform-message doc:name="Build Tear Down Integration Response">
            <dw:set-payload resource="classpath:dwScripts/buildTearDownIntegrationResponse.dwl"/>
        </dw:transform-message>
    </flow>
    
  <flow name="healthCheckFlow1">
        <dw:transform-message doc:name="Transform Message To Java">
            <dw:set-variable variableName="healthCheckRequest" resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
        </dw:transform-message>

        <logger message="#[flowVars['healthCheckRequest']]" level="INFO" doc:name="Logger"/>
       <enricher target="#[flowVars['webhookResponse']]" doc:name="Message Enricher">
           <flow-ref name="postIntegrationSettingsFlow" doc:name="postIntegrationSettingsFlow"/>
       </enricher>
        <logger message="#[flowVars['webhookResponse']]" level="INFO" doc:name="Logger"/>

       <choice doc:name="Choice">
            <when expression="#[flowVars['webhookResponse'] != empty]">
                <dw:transform-message doc:name="Build Health Check Response">
                    <dw:set-payload resource="classpath:dwScripts/buildUservoiceHealthCheckSuccessResponse.dwl"/>
                </dw:transform-message>
            </when>

           <otherwise>
               <dw:transform-message doc:name="HCS Response">
                    <dw:set-payload resource="classpath:dwScripts/buildUservoiceHealthCheckSuccessResponse.dwl"/>
                </dw:transform-message>
           </otherwise>
       </choice>
       <catch-exception-strategy doc:name="Catch Exception Strategy">
            <set-variable variableName="exception" value="#[exception.message]" doc:name="exception"/>
            <dw:transform-message doc:name="HCF Response">
                <dw:set-payload resource="classpath:dwScripts/buildUservoiceHealthCheckFailureResponse.dwl"/>
            </dw:transform-message>
        </catch-exception-strategy>
   </flow>

</mule>
