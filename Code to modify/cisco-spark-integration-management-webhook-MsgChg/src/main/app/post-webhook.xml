<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:CiscoSpark="http://www.mulesoft.org/schema/mule/CiscoSpark"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/CiscoSpark http://www.mulesoft.org/schema/mule/CiscoSpark/current/mule-CiscoSpark.xsd">
	<http:request-config name="HTTP_Request_mangmt_webhook"
		protocol="HTTPS" host="cisco-spark-integration-management.cloudhub.io"
		port="443" basePath="api" doc:name="HTTP Request Configuration" />
	<flow name="getMessageformatFlow">
		<set-variable variableName="integrationId"
			value="#[message.inboundProperties.'http.query.params'.integrationId]"
			doc:name="Set Integration Id" />
		<choice doc:name="Check Integration Id">
			<when expression="#[flowVars['integrationId'] == empty]">
				<dw:transform-message doc:name="Get Webhook Response">
					<dw:input-payload doc:sample="sample_data\json.json" />
					<dw:set-variable resource="classpath:dwScripts/buildPostHooksRequest.dwl"
						variableName="webhookResponse" />
				</dw:transform-message>
				<logger message="Request Payload #[message.payloadAs(java.lang.String)]"
					level="DEBUG" doc:name="Logger" />
				<set-variable variableName="status" value="ACTIVE"
					doc:name="Set Status" />
				<enricher target="#[flowVars['integrationsInstanceResponse']]"
					doc:name="Integrations Instance Response">
					<flow-ref name="getIntegrationsInstancesByUuidFlow"
						doc:name="getIntegrationsInstancesByUuidFlow" />
				</enricher>
				<choice doc:name="Check Get Integration By InstanceUuid Response">
					<when
						expression="#[flowVars['integrationsInstanceResponse'].toString() !='{message=No results}']">
						<logger
							message="Integration Instance by UUID #[flowVars['integrationsInstanceResponse']] and #[flowVars['integrationsInstanceResponse'][0]['configJson']]"
							level="DEBUG" doc:name="Logger" />
						<set-variable variableName="integrationId"
							value="#[flowVars['integrationsInstanceResponse'][0]['integrationId']]"
							doc:name="Set Integration ID" />
						<set-variable variableName="configJson"
							value="#[flowVars['integrationsInstanceResponse'][0]['configJson']]"
							mimeType="application/json" doc:name="Set ConfigJosn value" />
						<dw:transform-message doc:name="Convert ConfigJson To Java">
							<dw:input-payload mimeType="application/json" />
							<dw:set-variable
								resource="classpath:dwScripts/buildConvertConfigJsonInPostWebhookFlowToJava.dwl"
								variableName="configJsonValue" />
						</dw:transform-message>
						<set-variable variableName="privateMessage"
							value="#[flowVars['configJsonValue']['private_message']]"
							doc:name="Set Private Messge or not" />
						<set-variable variableName="isTwoWay"
							value="#[flowVars['configJsonValue']['twoway']]" doc:name="Check Two Way" />
						<logger
							message="#[flowVars.configJson] AND  PRIVAEMESSAGE #[flowVars.privateMessage]"
							level="DEBUG" doc:name="Logger" />
						<set-payload
							value="#['{&quot;oneWayHookResponse&quot;:&quot;Successfully message posted to spark space&quot;}']"
							doc:name="Set Final Response" />
						<choice doc:name="Check Integration Status">
							<when expression="#[flowVars['integrationId'] != empty]">
								<enricher target="#[flowVars['integrationSettings']]"
									doc:name="Integration Settings">
									<flow-ref name="getIntegrationSettingsFlow" doc:name="getIntegrationSettingsFlow" />
								</enricher>
								<choice doc:name="Check Integration Settings Response">
									<when
										expression="#[flowVars['integrationSettings'].toString() != '{message=No results}']">
										<enricher target="#[flowVars['formattedMessage']]"
											doc:name="Message Enricher">
											<flow-ref name="invokeDynamicMessageFormatFlow"
												doc:name="invokeDynamicMessageFormatFlow" />
										</enricher>
										<logger
											message="Dynamic Flow Response = #[flowVars['formattedMessage']] "
											level="DEBUG" doc:name="Logger" />
										<set-variable variableName="userId"
											value="#[flowVars['integrationsInstanceResponse'][0]['userId']]"
											doc:name="Get User Id" />

										<set-variable variableName="personIdForSpark"
											value="#[flowVars['integrationsInstanceResponse'][0]['userId']]"
											doc:name="Set Person Id" />
										<set-variable variableName="integrationId"
											value="#[flowVars['integrationsInstanceResponse'][0]['integrationId']]"
											doc:name="Get Integration Id" />
										<set-variable variableName="roomId"
											value="#[flowVars['integrationsInstanceResponse'][0]['channelId']]"
											doc:name="Get Room Id" />
										<choice doc:name="Choice to get Bot or Integration Token">
											<when
												expression="#[flowVars['isTwoWay'] != empty &amp;&amp; flowVars['isTwoWay'] == 'true']">
												<logger message="Posting Message Using Bot token!!"
													level="INFO" doc:name="Logger" />
												<set-variable variableName="userId" value=""
													doc:name="Set UserId To Empty For Bot token" />
												<set-variable variableName="privateMessage"
													value="#['true']" doc:name="Set Is Private" />
												<enricher target="#[flowVars['getClientTokenResponse']]"
													doc:name="Message Enricher">
													<flow-ref name="getBotClientTokenFlow" doc:name="getBotClientTokenFlow" />
												</enricher>
											</when>
											<otherwise>
												<logger message="Posting Message Using Integration token!!"
													level="INFO" doc:name="Logger" />
												<remove-variable variableName="privateMessage"
													doc:name="Remove privateMessage" />
												<enricher target="#[flowVars['getClientTokenResponse']]"
													doc:name="Message Enricher">
													<flow-ref name="getClientTokenFlow" doc:name="getClientTokenFlow" />
												</enricher>
											</otherwise>
										</choice>
										<choice doc:name="Check Client Tokens">
											<when
												expression="#[flowVars['getClientTokenResponse'].toString() != '{message=No results}']">
												<set-variable variableName="sparkToken"
													value="#[flowVars['getClientTokenResponse'][0]['accessToken']]"
													doc:name="sparkToken" />
												<logger
													message="TOKEN #[flowVars.sparkToken] and Private Message #[flowVars.privateMessage]"
													level="DEBUG" doc:name="Logger" />
												<choice doc:name="Choice">
													<when
														expression="#[flowVars['formattedMessage']['formatMessage'] != []]">
														<foreach collection="#[flowVars.formattedMessage.formatMessage]"
															doc:name="Loop Formatted Message">
															<choice doc:name="Check All Values Null">
																<when
																	expression="#[(payload['markDown'] !=null) || (payload['text'] !=null) || (payload['html'] !=null)]">
																	<choice doc:name="Choice to post form Bot or Integration Token">
																		<when expression="#[flowVars.privateMessage == 'true']">
																			<logger message="Posting Message with Bot token!!"
																				level="INFO" doc:name="Logger" />
																			<choice doc:name="Check Html For Twitter">
																				<when expression="#[payload['html'] == null]">
																					<choice doc:name="Check Room Id Value">
																						<when expression="#[flowVars['roomId'] != 'isPrivate']">
																							<CiscoSpark:post-messages
																								config-ref="CiscoSpark__Configuration" token="Bearer #[flowVars['sparkToken']]"
																								doc:name="Post By Room Id">
																								<CiscoSpark:messages-post-request
																									roomId="#[flowVars['roomId']]" text="#[payload['text']]"
																									markdown="#[payload['markDown']]" html="#[payload['html']]" />
																							</CiscoSpark:post-messages>
																						</when>
																						<otherwise>
																							<CiscoSpark:post-messages
																								config-ref="CiscoSpark__Configuration" doc:name="Post By User Id"
																								token="Bearer #[flowVars['sparkToken']]">
																								<CiscoSpark:messages-post-request
																									text="#[payload['text']]" toPersonId="#[flowVars['personIdForSpark']]"
																									markdown="#[payload['markDown']]" html="#[payload['html']]" />
																							</CiscoSpark:post-messages>
																						</otherwise>
																					</choice>
																				</when>
																				<otherwise>
																					<choice doc:name="Check Room Id Value">
																						<when expression="#[flowVars['roomId'] != 'isPrivate']">
																							<CiscoSpark:post-messages
																								config-ref="CiscoSpark__Configuration" token="Bearer #[flowVars['sparkToken']]"
																								doc:name="Post By Room Id">
																								<CiscoSpark:messages-post-request
																									roomId="#[flowVars['roomId']]" text="#[payload['text']]"
																									markdown="#[payload['markDown']]" html="#[payload['html']]" />
																							</CiscoSpark:post-messages>
																						</when>
																						<otherwise>
																							<CiscoSpark:post-messages
																								config-ref="CiscoSpark__Configuration" doc:name="Post By User Id"
																								token="Bearer #[flowVars['sparkToken']]">
																								<CiscoSpark:messages-post-request
																									text="#[payload['text']]" toPersonId="#[flowVars['personIdForSpark']]"
																									markdown="#[payload['markDown']]" html="#[payload['html']]" />
																							</CiscoSpark:post-messages>
																						</otherwise>
																					</choice>
																				</otherwise>
																			</choice>
																		</when>
																		<otherwise>
																			<logger message="Posting Message with Integration token!!"
																				level="INFO" doc:name="Logger" />
																			<choice doc:name="Check Html For Twitter">
																				<when expression="#[payload['html'] == null]">
																					<choice doc:name="Check Room Id Value">
																						<when expression="#[flowVars['roomId'] != 'isPrivate']">
																							<CiscoSpark:post-messages
																								config-ref="CiscoSpark__Configuration" token="Bearer #[flowVars['sparkToken']]"
																								doc:name="Post By Room Id">
																								<CiscoSpark:messages-post-request
																									roomId="#[flowVars['roomId']]" text="#[payload['text']]"
																									markdown="#[payload['markDown']]" html="#[payload['html']]" />
																							</CiscoSpark:post-messages>
																						</when>
																						<otherwise>
																							<CiscoSpark:post-messages
																								config-ref="CiscoSpark__Configuration" doc:name="Post By User Id"
																								token="Bearer #[flowVars['sparkToken']]">
																								<CiscoSpark:messages-post-request
																									text="#[payload['text']]" toPersonId="#[flowVars['personIdForSpark']]"
																									markdown="#[payload['markDown']]" html="#[payload['html']]" />
																							</CiscoSpark:post-messages>
																						</otherwise>
																					</choice>
																				</when>
																				<otherwise>
																					<choice doc:name="Check Room Id Value">
																						<when expression="#[flowVars['roomId'] != 'isPrivate']">
																							<CiscoSpark:post-messages
																								config-ref="CiscoSpark__Configuration" token="Bearer #[flowVars['sparkToken']]"
																								doc:name="Post By Room Id">
																								<CiscoSpark:messages-post-request
																									roomId="#[flowVars['roomId']]" text="#[payload['text']]"
																									markdown="#[payload['markDown']]" html="#[payload['html']]" />
																							</CiscoSpark:post-messages>
																						</when>
																						<otherwise>
																							<CiscoSpark:post-messages
																								config-ref="CiscoSpark__Configuration" doc:name="Post By User Id"
																								token="Bearer #[flowVars['sparkToken']]">
																								<CiscoSpark:messages-post-request
																									text="#[payload['text']]" toPersonId="#[flowVars['personIdForSpark']]"
																									markdown="#[payload['markDown']]" html="#[payload['html']]" />
																							</CiscoSpark:post-messages>
																						</otherwise>
																					</choice>
																				</otherwise>
																			</choice>
																		</otherwise>
																	</choice>
																	<set-payload value="#[message.payloadAs(java.lang.String)]"
																		doc:name="Set Payload" />
																	<async doc:name="Async">
																		<set-variable variableName="trackingId"
																			value="#[payload.trackingID]" doc:name="Set Traking Id" />
																		<set-variable variableName="statusCode"
																			value="#[payload.statusCode]" doc:name="Set Status Code" />
																		<set-variable variableName="statusMessage"
																			value="#[payload.statusMessage]" doc:name="Set Status Message" />
																		<flow-ref name="trackingDetailsFlow"
																			doc:name="trackingDetailsFlow" />
																	</async>
																	<dw:transform-message doc:name="One Way Hook Response">
																		<dw:input-payload mimeType="application/java" />
																		<dw:set-payload
																			resource="classpath:dwScripts/buildOneWayHookFinalResponseExample.dwl" />
																	</dw:transform-message>
																</when>
																<otherwise>
																	<logger
																		message="all null from spec_flow == #[payload['markDown']] || #[payload['text']] !=null || #[payload['html']]"
																		level="DEBUG" doc:name="Logger" />
																</otherwise>
															</choice>
														</foreach>
													</when>
													<otherwise>
														<logger
															message="post_webhook formatMsg ==&gt; #[flowVars['formattedMessage']['formatMessage']]"
															level="INFO" doc:name="Logger" />
													</otherwise>
												</choice>
											</when>
											<otherwise>
												<dw:transform-message doc:name="Client Token Response">
													<dw:input-payload mimeType="application/java" />
													<dw:set-payload
														resource="classpath:dwScripts/buildClientTokenResponseInPostWebhookFlow.dwl" />
												</dw:transform-message>
												<logger message="postWebhook : NO TOKEN FOUND" level="INFO"
													doc:name="Logger" />
											</otherwise>
										</choice>
									</when>
									<otherwise>
										<dw:transform-message doc:name="settingsResponse">
											<dw:input-payload mimeType="application/java" />
											<dw:set-payload
												resource="classpath:dwScripts/buildSettingsResponseInPostWebhookFlow.dwl" />
										</dw:transform-message>
									</otherwise>
								</choice>
							</when>
							<otherwise>
								<dw:transform-message doc:name="No Result Response">
									<dw:input-payload mimeType="application/java" />
									<dw:set-payload
										resource="classpath:dwScripts/buildPostHookFailsResponse.dwl" />
								</dw:transform-message>

							</otherwise>
						</choice>
					</when>
					<otherwise>
						<dw:transform-message doc:name="No Result">
							<dw:input-payload mimeType="application/java" />
							<dw:set-payload
								resource="classpath:dwScripts/buildPostHookFailsResponse.dwl" />
						</dw:transform-message>
						<logger message="postWebhook : No Instance Found for given instUuid!!"
							level="INFO" doc:name="Logger" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<flow-ref name="bot-hookFlow" doc:name="bot-hookFlow" />
				<dw:transform-message doc:name="Two Way Hook Response">
					<dw:input-payload mimeType="application/java" />
					<dw:set-payload
						resource="classpath:dwScripts/buildTwoWayWebHookResponseExample.dwl" />
				</dw:transform-message>
			</otherwise>
		</choice>






	</flow>
	<flow name="getIntegrationsInstancesByUuidFlow">
		<http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration"
			path="/integrations/instances" method="GET" doc:name="Get Integration Instance">
			<http:request-builder>
				<http:query-param paramName="status" value="#[flowVars['status']]" />
				<http:query-param paramName="instanceUuid"
					value="#[flowVars['instanceUuid']]" />

			</http:request-builder>
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>
		<dw:transform-message doc:name="Transform Response to Java">
			<dw:input-payload mimeType="application/json" />
			<dw:set-payload
				resource="classpath:dwScripts/buildPostIntegrationsInstancesFromInstanceUuid.dwl" />
		</dw:transform-message>
	</flow>
	<flow name="invokeDynamicMessageFormatFlow">
		<set-variable variableName="dynamicHost"
			value="#[flowVars['integrationSettings']['host']]" doc:name="Dynamic Host" />
		<set-variable variableName="dynamicPort"
			value="#[flowVars['integrationSettings']['port']]" doc:name="Dyanmic Port" />
		<set-variable variableName="dynamicBasePath"
			value="#[flowVars['integrationSettings']['basePath']]" doc:name="Dynamic Base Path" />
		<dw:transform-message doc:name="Transform Response to Json">
			<dw:input-payload mimeType="application/java" />
			<dw:set-payload
				resource="classpath:dwScripts/buildPostHookResponseToDynamicHost.dwl" />
		</dw:transform-message>
		<http:request config-ref="HTTP_Dynamic_Request_Configuration"
			path="/formatMessage" method="POST" doc:name="HTTP">
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>
		<logger
			message="post_webhook = msgFortm response from specific #[message.payloadAs(java.lang.String)]"
			level="INFO" doc:name="Logger" />
		<dw:transform-message doc:name="Transform Response to Java">
			<dw:input-payload mimeType="application/json" />
			<dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl" />
		</dw:transform-message>
	</flow>


	<flow name="invokeDynamicMessageFormatForTwoWayFlow">
		<set-variable variableName="dynamicHost"
			value="#[flowVars['integrationSettings']['host']]" doc:name="Dynamic Host" />
		<set-variable variableName="dynamicPort"
			value="#[flowVars['integrationSettings']['port']]" doc:name="Dyanmic Port" />
		<set-variable variableName="dynamicBasePath"
			value="#[flowVars['integrationSettings']['basePath']]" doc:name="Dynamic Base Path" />
		<dw:transform-message doc:name="Transform Response to Json For Two Way">
			<dw:input-payload mimeType="application/java" />
			<dw:set-payload
				resource="classpath:dwScripts/buildPrepareDynamicFlowRequestForTwoWay.dwl" />
		</dw:transform-message>
		<http:request config-ref="HTTP_Dynamic_Request_Configuration"
			path="/twoway" method="POST" doc:name="HTTP">
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>
		<logger
			message="post_webhook = msgFortmTwoWay response from specific #[message.payloadAs(java.lang.String)]"
			level="INFO" doc:name="Logger" />
		<dw:transform-message doc:name="Transform Response to Java">
			<dw:input-payload mimeType="application/json" />
			<dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl" />
		</dw:transform-message>
	</flow>

	<flow name="bot-hookFlow">
		<dw:transform-message doc:name="Memebership Payload">
			<dw:set-variable variableName="botHookResponse"
				resource="classpath:dwScripts/fromPayloadToJava.dwl"></dw:set-variable>
		</dw:transform-message>
		<logger
			message="Incoming two way webhook ==&gt; #[flowVars['botHookResponse']['resource']] &amp;&amp; #[flowVars['botHookResponse']['event']]"
			level="INFO" doc:name="Logger" />
		<set-variable variableName="roomId"
			value="#[flowVars['botHookResponse']['data']['roomId']]" doc:name="Set RoomId" />
		<choice doc:name="Spark Event">
			<when
				expression="#[(flowVars['botHookResponse']['resource'] =='messages') &amp;&amp; (!flowVars['botHookResponse']['data']['personEmail'].contains('@sparkbot.io')) &amp;&amp; (flowVars['botHookResponse']['event'] != 'deleted')]">
				<set-variable variableName="privateMessage" value="#['true']"
					doc:name="Set Private Message" />
				<enricher target="#[flowVars['getClientTokenResponse']]"
					doc:name="Get Bot Client Token">
					<flow-ref name="getBotClientTokenFlow" doc:name="getBotClientTokenFlow" />
				</enricher>
				<choice doc:name="Check Bot Token Response">
					<when
						expression="#[flowVars['getClientTokenResponse'].toString() != '{message=No results}']">
						<set-variable variableName="sparkToken"
							value="#[flowVars['getClientTokenResponse'][0]['accessToken']]"
							doc:name="Set Bot Token" />
						<set-variable variableName="integrationName"
							value="#[flowVars['getClientTokenResponse'][0]['integrationName']]"
							doc:name="Set Integration Name" />
						<set-variable variableName="messageId"
							value="#[flowVars['botHookResponse']['data']['id']]" doc:name="MessageId" />
						<enricher target="#[flowVars['getMessageById']]"
							doc:name="Message Enricher">
							<flow-ref name="getSparkMessagesById" doc:name="getSparkMessagesById" />
						</enricher>
						<set-variable variableName="userId"
							value="#[flowVars['botHookResponse']['data']['personId']]"
							doc:name="Set UserId" />
						<enricher target="#[flowVars['getIntegrationTokenFlowResponse']]"
							doc:name="Get Integration Token Flow">
							<flow-ref name="getIntegrationTokenFlow" doc:name="getIntegrationTokenFlow" />
						</enricher>
						<choice doc:name="Check App Tokens">
							<when
								expression="#[flowVars['getIntegrationTokenFlowResponse'].toString() !='{message=No results}']">
								<enricher target="#[flowVars['integrationSettings']]"
									doc:name="Integration Settings">
									<flow-ref name="getIntegrationSettingsFlow" doc:name="getIntegrationSettingsFlow" />
								</enricher>
								<choice doc:name="Check Settings Response">
									<when
										expression="#[flowVars.integrationSettings.toString() != '{message=No results}']">
										<set-variable variableName="roomType"
											value="#[flowVars['botHookResponse']['data']['roomType']]"
											doc:name="Set Room Type" />
										<enricher target="#[flowVars['formattedMessage']]"
											doc:name="Message Enricher">
											<flow-ref name="invokeDynamicMessageFormatForTwoWayFlow"
												doc:name="invokeDynamicMessageFormatForTwoWayFlow" />
										</enricher>
										<choice doc:name="Check Formatted Message">
											<when
												expression="#[flowVars['formattedMessage']['formatMessage'] != []]">
												<foreach collection="#[flowVars.formattedMessage.formatMessage]"
													doc:name="Loop Formatted Message">
													<choice doc:name="Check All Values Null">
														<when
															expression="#[(payload['markDown'] !=null) || (payload['text'] !=null) || (payload['html'] !=null)]">
															<choice doc:name="Choice to post form Bot or Integration Token">
																<when expression="#[flowVars.privateMessage == 'true']">
																	<logger message="Two Way =  Posting Message with Bot token!! "
																		level="INFO" doc:name="Logger" />
																	<choice doc:name="Check Html For Twitter">
																		<when expression="#[payload['html'] == null]">
																			<CiscoSpark:post-messages
																				config-ref="CiscoSpark__Configuration" token="Bearer #[flowVars['sparkToken']]"
																				doc:name="CiscoSpark">
																				<CiscoSpark:messages-post-request
																					text="#[payload['text']]" markdown="#[payload['markDown']]"
																					html="#[payload['html']]" roomId="#[flowVars['roomId']]" />
																			</CiscoSpark:post-messages>
																		</when>
																		<otherwise>
																			<logger
																				message="RoomId = #[flowVars['roomId']] ++++++++++ Token = Bearer #[flowVars['sparkToken']] +++++++ Text = #[payload['text']] +++++++MD = #[payload['markDown']] +++++++++Html = #[payload['html']] +++"
																				level="DEBUG" doc:name="Logger" />
																			<CiscoSpark:post-messages
																				config-ref="CiscoSpark__Configuration" token="Bearer #[flowVars['sparkToken']]"
																				doc:name="CiscoSparkMedia">
																				<CiscoSpark:messages-post-request
																					text="#[payload['text']]" markdown="#[payload['markDown']]"
																					roomId="#[flowVars['roomId']]" html="#[payload['html']]" />
																			</CiscoSpark:post-messages>
																		</otherwise>
																	</choice>
																</when>
																<otherwise>
																	<logger
																		message="Two Way = Posting Message with Integration token!! "
																		level="INFO" doc:name="Logger" />
																	<choice doc:name="Check Html For Twitter">
																		<when expression="#[payload['html'] == null]">
																			<CiscoSpark:post-messages
																				config-ref="CiscoSpark__Configuration" token="Bearer #[flowVars['sparkToken']]"
																				doc:name="CiscoSpark">
																				<CiscoSpark:messages-post-request
																					roomId="#[flowVars['roomId']]" text="#[payload['text']]"
																					markdown="#[payload['markDown']]" html="#[payload['html']]" />
																			</CiscoSpark:post-messages>
																		</when>
																		<otherwise>
																			<CiscoSpark:post-messages
																				config-ref="CiscoSpark__Configuration" token="Bearer #[flowVars['sparkToken']]"
																				doc:name="CiscoSparkMedia">
																				<CiscoSpark:messages-post-request
																					roomId="#[flowVars['roomId']]" text="#[payload['text']]"
																					markdown="#[payload['markDown']]" files="#[payload['html']]" />
																			</CiscoSpark:post-messages>
																		</otherwise>
																	</choice>
																</otherwise>
															</choice>
															<set-variable variableName="twoWayWebhookResponse"
																value="#[message.payloadAs(java.lang.String)]" doc:name="Set Two Way Webhook Response" />
															<async doc:name="Async">
																<set-variable variableName="trackingId"
																	value="#[payload.trackingID]" doc:name="Set Traking Id" />
																<set-variable variableName="statusCode"
																	value="#[payload.statusCode]" doc:name="Set Status Code" />
																<set-variable variableName="statusMessage"
																	value="#[payload.statusMessage]" doc:name="Set Status Message" />
																<flow-ref name="trackingDetailsFlow" doc:name="trackingDetailsFlow" />
															</async>
														</when>
														<otherwise>
															<logger
																message="all null from spec_flow == #[payload['markDown']] || #[payload['text']] !=null || #[payload['html']]"
																level="DEBUG" doc:name="Logger" />
														</otherwise>
													</choice>
												</foreach>
											</when>
											<otherwise>
												<set-variable variableName="twoWayWebhookResponse"
													value="#[flowVars['formattedMessage']]" doc:name="Set Two Way Webhook Response" />
											</otherwise>
										</choice>
									</when>
									<otherwise>
										<set-variable variableName="twoWayWebhookResponse"
											value="#['Integration Settings Are Empty']" doc:name="Set Two Way Webhook Response" />
									</otherwise>
								</choice>
							</when>
							<otherwise>
								<choice doc:name="Choice">
									<when
										expression="#[flowVars['botHookResponse']['data']['roomType'] == 'group']">
										<set-variable variableName="messageToSpark"
											value="#[' Hi &lt;@personId:'+flowVars['userId']+'&gt;, looks like I don&#8217;t have your '+flowVars['integrationName']+' Authentication. Please visit the Spark Depot to authenticate your '+flowVars['integrationName']+' Account. ']"
											doc:name="Set Authenticated Message" />
										<enricher target="#[flowVars['sparkPostMessageResponse']]"
											doc:name="Message Enricher">
											<flow-ref name="postSparkMessageFlow" doc:name="postSparkMessageFlow" />
										</enricher>

									</when>
									<otherwise>
										<set-variable doc:name="Set Authenticated Message"
											value="#['Hi, looks like I don&#8217;t have your '+flowVars['integrationName']+' Authentication. Please visit the Spark Depot to authenticate your '+flowVars['integrationName']+' Account.']"
											variableName="messageToSpark" />
										<enricher target="#[flowVars['sparkPostMessageResponse']]"
											doc:name="Message Enricher">
											<flow-ref name="postSparkMessageFlow" doc:name="postSparkMessageFlow" />
										</enricher>
									</otherwise>
								</choice>
								<set-variable variableName="twoWayWebhookResponse"
									value="#[flowVars['sparkPostMessageResponse']]" doc:name="Set Two Way Webhook Response" />
							</otherwise>
						</choice>
					</when>
					<otherwise>
						<set-variable variableName="twoWayWebhookResponse"
							value="#['Client Tokens are empty']" doc:name="Set Two Way Webhook Response" />
					</otherwise>
				</choice>
			</when>
			<when
				expression="#[flowVars['botHookResponse']['resource'] =='memberships' &amp;&amp; flowVars['botHookResponse']['event'] == 'created']">
				<logger level="INFO"
					doc:name="(Resource == memberships) &amp;&amp; (event == created) "
					message="entered in choice ==&gt; Resource == memberships" />
				<set-variable variableName="privateMessage" value="#['true']"
					doc:name="Set Private Message" />
                <set-variable variableName="userId" value="#[flowVars['botHookResponse']['actorId']]" doc:name="Set UserId"/>

				<enricher target="#[flowVars['getClientTokenResponse']]"
					doc:name="Get Bot Client Token">
					<flow-ref name="getBotClientTokenFlow" doc:name="getBotClientTokenFlow" />
				</enricher>
				<enricher target="#[flowVars['getIntegrationTokenFlowResponse']]"
					doc:name="Get Integration Token Flow">
					<flow-ref name="getIntegrationTokenFlow" doc:name="getIntegrationTokenFlow" />
				</enricher>
				<choice doc:name="Check Bot Token Response">
					<when
						expression="#[(flowVars['getClientTokenResponse'].toString() != '{message=No results}') &amp;&amp; (flowVars['getIntegrationTokenFlowResponse'].toString() !='{message=No results}')]">
						<set-variable variableName="sparkToken"
							value="#[flowVars['getClientTokenResponse'][0]['accessToken']]"
							doc:name="Set Bot Token" />
						<set-variable variableName="integrationName"
							value="#[flowVars['getClientTokenResponse'][0]['integrationName']]"
							doc:name="Set Integration Name" />
						<set-variable variableName="userId"
							value="#[flowVars['botHookResponse']['actorId']]" doc:name="Set UserId" />
						<enricher target="#[flowVars['twoWayAddProcessResponse']]"
							doc:name="Integration Settings">
							<flow-ref name="twoWayAddProcess" doc:name="twoWayAddProcess" />
						</enricher>
						<choice doc:name="Check Actor Id And Person Id">
							<when
								expression="#[flowVars['userId'] != flowVars['botHookResponse']['data']['personId']]">
								<set-variable variableName="messageToSpark"
									value="#[' Hi &lt;@personId:'+flowVars['userId']+'&gt;, thank you for adding me to this space. For a list of commands I can perform for you, type &quot;@'+flowVars['integrationName']+' help&quot;. Please visit the Spark Depot to add/edit/delete notification configurations. ']"
									doc:name="Set Message To Spark" />
								<enricher target="#[flowVars['postMessageSparkResponse']]"
									doc:name="Message Enricher">
									<flow-ref name="postSparkMessageFlow" doc:name="postSparkMessageFlow" />
								</enricher>
								<set-variable variableName="twoWayWebhookResponse"
									value="#[flowVars['postMessageSparkResponse']]" doc:name="Set Two Way Webhook Response" />
							</when>
							<otherwise>
								<set-variable variableName="twoWayWebhookResponse"
									value="#['one to one messages']" doc:name="Set Two Way Webhook Response" />
							</otherwise>
						</choice>

					</when>
					<when
						expression="#[(flowVars['getClientTokenResponse'].toString() != '{message=No results}') &amp;&amp; (flowVars['getIntegrationTokenFlowResponse'].toString() =='{message=No results}')]">
                        
                        <set-variable variableName="sparkToken"
							value="#[flowVars['getClientTokenResponse'][0]['accessToken']]"
							doc:name="Set Bot Token" />
						<set-variable variableName="integrationName"
							value="#[flowVars['getClientTokenResponse'][0]['integrationName']]"
							doc:name="Set Integration Name" />
						<logger level="INFO" doc:name="App Unauthorised" message="App Unauthorized"/>
						<choice doc:name="Check Actor Id And Person Id">
							<when
								expression="#[flowVars['userId'] != flowVars['botHookResponse']['data']['personId']]">
								<set-variable variableName="messageToSpark"
									value="#[' Hi &lt;@personId:'+flowVars['userId']+'&gt;, thank you for adding me to this space. Looks like I don&#8217;t have your '+flowVars['integrationName']+' Authentication. Please visit the Spark Depot to authenticate your '+flowVars['integrationName']+' Account.']"
									doc:name="Set Message To Spark" />
								<enricher target="#[flowVars['postMessageSparkResponse']]"
									doc:name="Message Enricher">
									<flow-ref name="postSparkMessageFlow" doc:name="postSparkMessageFlow" />
								</enricher>
								<set-variable variableName="twoWayWebhookResponse"
									value="#[flowVars['postMessageSparkResponse']]" doc:name="Set Two Way Webhook Response" />
							</when>
							<otherwise>
								<set-variable variableName="twoWayWebhookResponse"
									value="#['one to one messages']" doc:name="Set Two Way Webhook Response" />
							</otherwise>
						</choice>
					</when>
					<otherwise>
						<set-variable variableName="twoWayWebhookResponse"
							value="#['Client tokens for the user is null']" doc:name="Set Two Way Webhook Response" />
					</otherwise>
				</choice>
			</when>
			<when
				expression="#[flowVars['botHookResponse']['resource'] =='memberships' &amp;&amp; flowVars['botHookResponse']['event'] == 'deleted']">
				<logger level="INFO"
					doc:name="(Resource == memberships) &amp;&amp; (event == deleted) "
					message="entered in choice ==&gt; Resource == memberships" />
				<set-variable variableName="userId"
					value="#[flowVars['botHookResponse']['actorId']]" doc:name="Set User Id" />
				<enricher target="#[flowVars['twoWayDeleteProcessResponse']]"
					doc:name="Integration Settings">
					<flow-ref name="twoWayDeleteProcess" doc:name="twoWayDeleteProcess" />
				</enricher>
				<set-variable variableName="twoWayWebhookResponse"
					value="#['Status disabled for all instances']" doc:name="Set Two Way Webhook Response" />
			</when>
			<otherwise>
				<set-variable variableName="twoWayWebhookResponse"
					value="#['Message From Spark Bot']" doc:name="Set Two Way Webhook Response" />
			</otherwise>
		</choice>

	</flow>


</mule>
