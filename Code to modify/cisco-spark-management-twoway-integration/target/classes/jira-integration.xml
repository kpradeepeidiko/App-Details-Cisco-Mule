<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:CiscoSpark="http://www.mulesoft.org/schema/mule/CiscoSpark" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/CiscoSpark http://www.mulesoft.org/schema/mule/CiscoSpark/current/mule-CiscoSpark.xsd">
<spring:beans>
         <spring:bean name="getRequestToken" class="com.org.GetRequestTokens"/>
         <spring:bean name="accessTokenObj" class="com.org.AccessTokenClass"/>
        <spring:bean name="ParsingCommands" class="com.org.ParseCommands"/>
         <spring:bean name="authParamList" class="com.org.AuthParams"/>
         <spring:bean name="decoded" class="com.org.Sample"/>
    </spring:beans>
    <http:request-config name="HTTP_Integrations_Runtime_Request_Configuration" protocol="HTTPS" host="cisco-spark-integration-runtime-dev.cloudhub.io" port="443" basePath="/api" doc:name="HTTP Request Configuration"/>
    <http:listener-config name="HTTP_Listener_Configuration1" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    
    
    <flow name="jiraTwoWayFlow">
        <logger message="Initial payload   #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Initial logger"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-variable variableName="response"><![CDATA[%dw 1.0
%output application/java
---
payload
]]></dw:set-variable>
        </dw:transform-message>
        <expression-component doc:name="Expression"><![CDATA[flowVars.userId=flowVars.response.sparkResponse.userId;
flowVars.intgerationId=flowVars.response.sparkResponse.intgerationId]]></expression-component>
        <choice doc:name="Choice">
            <when expression="#[flowVars.response.sparkResponse.sparkCommand.startsWith('@createissue')]">
                <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
                <flow-ref name="parsingUserCommandFlow" doc:name="parsingUserCommandFlow"/>
                <flow-ref name="postCreateIssueUsingAPiFlow" doc:name="postCreateIssueUsingAPiFlow"/>
            </when>
            <when expression="#[flowVars.response.sparkResponse.sparkCommand.startsWith('@help') || flowVars.response.sparkResponse.sparkCommand.startsWith('@Help')]">
                <logger message="Help flow starts here" level="INFO" doc:name="Help Commands List"/>
                <set-variable variableName="commandsList" value="#['Hi User, I can help you for below list of actions. \n\n 1.CreateIssue \n\n 2.UpdateIssue \n\n 3.AddComment \n\n 4.AddAttachment']" doc:name="Variable"/>
                <dw:transform-message doc:name="Transform To Json">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"formatMessage":flowVars.commandsList
}
]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <when expression="#[flowVars.response.sparkResponse.sparkCommand.startsWith('@updateissue')]">
                <logger level="INFO" doc:name="Set Update Issue"/>
                <flow-ref name="postMessageToSparkFlow" doc:name="postMessageToSparkFlow"/>
                <flow-ref name="putIssueUsingApiFlow" doc:name="putIssueUsingApiFlow"/>
            </when>
            <when expression="#[flowVars.response.sparkResponse.sparkCommand.startsWith('@addcomment')]">
                <logger level="INFO" doc:name="ADD COMMENT"/>
                <flow-ref name="parsingUserCommandFlow" doc:name="parsingUserCommandFlow"/>
                <flow-ref name="postUserCommentFlow" doc:name="postUserCommentFlow"/>
                <dw:transform-message doc:name="Transform To Json">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"formatMessage":"Comment posted successfully"
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <when expression="#[flowVars.response.sparkResponse.sparkCommand.startsWith('@addattachment')]">
                <expression-component doc:name="ATTACHMENT ADDED"><![CDATA[flowVars.issueData=flowVars.response.sparkResponse.sparkCommand.split(" ")
flowVars.issueId = flowVars.issueData[2].split(":")]]></expression-component>
                <logger message="ADD ATTACHMENT  #[flowVars.issueId]" level="INFO" doc:name="ADD ATTACHMENT"/>
                <flow-ref name="postAttachmentFlow" doc:name="postAttachmentFlow"/>
                <dw:transform-message doc:name="Transform To Json">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	
	"formatMessage":"Attachment posted successfully"
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <when expression="#[flowVars.response.sparkResponse.sparkCommand.startsWith('@getIssues')]">
                <choice doc:name="Choice">
                    <when expression="#[flowVars.response.sparkResponse.sparkCommand.contains('email')]">
                        <expression-component doc:name="To Split User"><![CDATA[flowVars.issueData=flowVars.response.sparkResponse.sparkCommand.split(" ");
flowVars.project= flowVars.issueData[1].split(":");
flowVars.email=flowVars.issueData[2].split(":");
flowVars.userName=flowVars.email[1].split("@")
]]></expression-component>
                        <flow-ref name="getIssuesAssignedToUserFlow" doc:name="getIssuesAssignedToUserFlow"/>
                    </when>
                    <otherwise>
                        <expression-component doc:name="To Split Project"><![CDATA[flowVars.issueData=flowVars.response.sparkResponse.sparkCommand.split(" ");
flowVars.project=flowVars.issueData[1].split(":")]]></expression-component>
                        <flow-ref name="getIssuesFromProjectFlow" doc:name="getIssuesFromProjectFlow"/>
                    </otherwise>
                </choice>

            </when>

            <when expression="#[flowVars.response.sparkResponse.sparkCommand.startsWith('@getUsers')]">
                <expression-component doc:name="To Split Group"><![CDATA[flowVars.issueData=flowVars.response.sparkResponse.sparkCommand.split(" ");
flowVars.group = flowVars.issueData[1].split(":")]]></expression-component>
                <flow-ref name="getListUsersFlow" doc:name="getListUsersFlow"/>
            </when>
            <when expression="#[flowVars.response.sparkResponse.sparkCommand.startsWith('@getUserInfo')]">
                <choice doc:name="Choice">
                    <when expression="#[flowVars.response.sparkResponse.sparkCommand.contains('username')]">
                        <expression-component doc:name="To Split UserName"><![CDATA[flowVars.issueData=flowVars.response.sparkResponse.sparkCommand.split(" ");
flowVars.userName = flowVars.issueData[1].split(":")]]></expression-component>
                        <flow-ref name="getUserInformationFlow" doc:name="getUserInformationFlow"/>
                    </when>
                    <otherwise>
                        <flow-ref name="getUserInformationFlow" doc:name="getUserInformationFlow"/>
                    </otherwise>
                </choice>

            </when>
            <otherwise>
                <logger message="default" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>

        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="#[Exception.message]" level="INFO" doc:name="Logger"/>
        </catch-exception-strategy>
    </flow>
    <flow name="postAuthDetailsFlow">
        <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Transform To Java">
            <dw:set-variable variableName="request"><![CDATA[%dw 1.0
%output application/java
---
payload
]]></dw:set-variable>
        </dw:transform-message>
        <expression-component doc:name="Expression"><![CDATA[flowVars.userId=flowVars.request.userId;
flowVars.integrationId=flowVars.request.integrationId]]></expression-component>
        <choice doc:name="Choice">
            <when expression="#[flowVars.request.toString().contains('url')]">
                <invoke name="RequestToken" object-ref="getRequestToken" method="getRequestTokenFromJar" methodArguments="#[flowVars.request.url]" methodArgumentTypes="java.lang.String" doc:name="Get Request Token"/>
                <logger message="tokenInfo  #[payload]" level="INFO" doc:name="Logger"/>
                <set-variable variableName="tokenInfo" value="#[payload]" doc:name="Set Token Data"/>
                <flow-ref name="getRequestTokenFlow" doc:name="getRequestTokenFlow"/>
                <choice doc:name="Choice">
                    <when expression="#[payload.size()==0]">
                        <set-payload value="#[flowVars.tokenInfo]" doc:name="Set Request payload"/>
                        <http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration" path="/twitter/requestMap/{userId}" method="POST" doc:name="POST REQUEST TOKEN DB CALL">
                            <http:request-builder>
                                <http:uri-param paramName="userId" value="#[flowVars.request.userId]"/>
                            </http:request-builder>
                        </http:request>
                    </when>
                    <otherwise>
                        <set-payload value="#[flowVars.tokenInfo]" doc:name="Set Request payload"/>
                        <http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration" path="/twitter/requestMap/{userId}" method="PUT" doc:name="PUT REQUEST TOKEN DB CALL">
                            <http:request-builder>
                                <http:uri-param paramName="userId" value="#[flowVars.request.userId]"/>
                            </http:request-builder>
                        </http:request>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <flow-ref name="getRequestTokenFlow" doc:name="getRequestTokenFlow"/>
                <invoke object-ref="decoded" method="sampleDecode" methodArguments="#[payload[0].TOKEN_BEAN]" methodArgumentTypes="java.lang.String" doc:name="Invoke" name="Thisisample"/>
                <json:object-to-json-transformer doc:name="Object to JSON"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload
]]></dw:set-payload>
                </dw:transform-message>
                <set-variable variableName="Url" value="#['https://'+payload.requestUrl.toString().split(&quot;/&quot;)[2]+'']" doc:name="Variable"/>
                <invoke name="AccessTokenInvoke" object-ref="accessTokenObj" method="accessTokenMethod" methodArguments="#[payload['requestToken']],#[payload['secretToken']],#[flowVars['request']['code']],#[flowVars['Url']]" methodArgumentTypes="java.lang.String,java.lang.String,java.lang.String,java.lang.String" doc:name="Get Access Token"/>
                <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
                <json:object-to-json-transformer doc:name="Object to JSON"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-variable variableName="tokenInfo"><![CDATA[%dw 1.0
%output application/java
---
payload
]]></dw:set-variable>
                </dw:transform-message>
                <http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration" path="/twitter/requestMap/{userId}" method="DELETE" doc:name="HTTP">
                    <http:request-builder>
                        <http:uri-param paramName="userId" value="#[flowVars.request.userId]"/>
                    </http:request-builder>
                </http:request>
            </otherwise>
        </choice>
        <choice doc:name="Choice">
            <when expression="#[flowVars.Url !=null]">
                <dw:transform-message doc:name="Transform To Json">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"RequestToken":flowVars.tokenInfo.accessToken,
	"domainUrl":flowVars.Url
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"RequestData":flowVars.tokenInfo
	
}
]]></dw:set-payload>
                </dw:transform-message>
            </otherwise>
        </choice>

    </flow>
    <flow name="postIntegrationSettingsFlow">

        <logger message="Settings payload  #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Transform To Java">
            <dw:set-variable variableName="settings"><![CDATA[%dw 1.0
%output application/java
---
payload
]]></dw:set-variable>

        </dw:transform-message>
        <expression-component doc:name="Expression"><![CDATA[flowVars.userId=flowVars.settings.userId;
flowVars.integrationId=flowVars.settings.integrationId]]></expression-component>
        <choice doc:name="Choice">
            <when expression="#[flowVars.settings.projectId !=null]">
                <flow-ref name="getProjectInfoFlow" doc:name="getProjectInfoFlow"/>
            </when>
            <otherwise>
                <flow-ref name="getProjectsFlow" doc:name="getProjectsFlow"/>
            </otherwise>
        </choice>

        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"projectData":flowVars.getProject
	
	
}]]></dw:set-payload>
        </dw:transform-message>
    </flow>

</mule>
