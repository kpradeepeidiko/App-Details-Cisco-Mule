<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <munit:config name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:googleCalendar-integration.xml"/>
        <spring:import resource="classpath:googleCalendar-api-calls.xml"/>
        <spring:import resource="classpath:global.xml"/>
        <spring:import resource="classpath:integration-token-operations.xml"/>
    </spring:beans>
    <munit:test name="googleCalendar-api-calls-test-suite-postgoogleCalenderTokenFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
    "integrationId": 21,
    "authSettings": {
        "code": "4/QRRhKp-MUZ0YnoV4wwtEuA-iWHUOw_VTCw2xSfkdEA4"
    }
}]]></dw:set-payload>
        </dw:transform-message>
        <dw:transform-message doc:name="To Java">
            <dw:set-variable variableName="tokenRequest"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
        </dw:transform-message>
        <flow-ref name="postgoogleCalenderTokenFlow" doc:name="Flow-ref to postgoogleCalenderTokenFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="googleCalendar-api-calls-test-suite-postgoogleCalenderRefreshTokenFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="refreshToken" value="#['1/tOxBPAJ_-68dwOzjA8cCLEmfxkoFFIk-o2H9-EvNbNw']" doc:name="Set Refresh Token"/>
        <flow-ref name="postgoogleCalenderRefreshTokenFlow" doc:name="Flow-ref to postgoogleCalenderRefreshTokenFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="googleCalendar-api-calls-test-suite-statusDisableForAnInstanceTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="instanceId" value="1992" doc:name="Set instance Id"/>
        <flow-ref name="statusDisableForAnInstance" doc:name="Flow-ref to statusDisableForAnInstance"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="googleCalendar-api-calls-test-suite-getgoogleCalendersListFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="token" value="#['ya29.CjB7A8E5NubulnEF1Y6kZDCuyjdOGNGRRPrMtwlVvZnR9XF-F2odYz7jOUgYU7KRviA']" doc:name="Set Google Calendar Token"/>
        <flow-ref name="getgoogleCalendersListFlow" doc:name="Flow-ref to getgoogleCalendersListFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="googleCalendar-api-calls-test-suite-getTokenByChoiceConditionTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="integrationId" value="21" doc:name="Set Integration Id"/>
        <set-variable variableName="userId" value="Y2lzY29zcGFyazovL3VzL1BFT1BMRS8yYTA0YzVkMy0yNGJjLTQ1ZWItYmQzYS05ZDU1OGRmMmZhMjI" doc:name="Set User Id"/>
        <flow-ref name="getTokenByChoiceCondition" doc:name="Flow-ref to getTokenByChoiceCondition"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
</mule>
