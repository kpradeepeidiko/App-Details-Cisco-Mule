<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <munit:config name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:googleDrive-integration.xml"/>
        <spring:import resource="classpath:global.xml"/>
        <spring:import resource="classpath:core-services-invocations.xml"/>
        <spring:import resource="classpath:integration-token-operations.xml"/>
        <spring:import resource="classpath:googleDrive-api-calls.xml"/>
    </spring:beans>
    <munit:test name="overall-googleDrive-test-suite-coreServicesAlertsFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="client_id" value="${googleDrive.integration.client.id}" doc:name="Set Client Id"/>
        <set-variable variableName="client_secret" value="${googleDrive.integration.client.secret}" doc:name="Set Client Secret"/>
        <flow-ref name="coreServicesAlertsFlow" doc:name="Flow-ref to coreServicesAlertsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="overall-googleDrive-test-suite-coreServicesLoggingFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="client_id" value="${googleDrive.integration.client.id}" doc:name="Set Client Id"/>
        <set-variable variableName="client_secret" value="${googleDrive.integration.client.secret}" doc:name="Set Client Secret"/>
        <flow-ref name="coreServicesLoggingFlow" doc:name="Flow-ref to coreServicesLoggingFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="overall-googleDrive-test-suite-coreServicesTrackingFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="client_id" value="${googleDrive.integration.client.id}" doc:name="Set Client Id"/>
        <set-variable variableName="client_secret" value="${googleDrive.integration.client.secret}" doc:name="Set Client Secret"/>
        <flow-ref name="coreServicesTrackingFlow" doc:name="Flow-ref to coreServicesTrackingFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="overall-googleDrive-test-suite-getIntegrationTokenFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="userId" value="#['Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMGU2OWMzYi1lMzU4LTQ3ZTUtODQyYy02MWMxMmRlNTVhY2Q']" doc:name="Set User Id"/>
        <set-variable variableName="integrationId" value="${googleDrive.integration.id}" doc:name="Set Integration Id"/>
        <flow-ref name="getIntegrationTokenFlow" doc:name="Flow-ref to getIntegrationTokenFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="overall-googleDrive-test-suite-getGoogleDriveSettingsFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="userId" value="#['Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMGU2OWMzYi1lMzU4LTQ3ZTUtODQyYy02MWMxMmRlNTVhY2Q']" doc:name="Set User Id"/>
        <flow-ref name="getGoogleDriveSettingsFlow" doc:name="Flow-ref to getGoogleDriveSettingsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="overall-googleDrive-test-suite-PostGoogleDrivePageTokenFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#['{&quot;userId&quot;:&quot;Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMGU2OWMzYi1lMzU4LTQ3ZTUtODQyYy02MWMxMmRlNTVhY2Q&quot;}']" doc:name="Set Payload"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-variable variableName="request"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
        </dw:transform-message>
        <set-variable variableName="tokenId" value="#['441']" doc:name="Set Token Id"/>
        <flow-ref name="PostGoogleDrivePageTokenFlow" doc:name="Flow-ref to PostGoogleDrivePageTokenFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="overall-googleDrive-test-suite-putGoogleDriveSettingsFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="userId" value="#['Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMGU2OWMzYi1lMzU4LTQ3ZTUtODQyYy02MWMxMmRlNTVhY2Q']" doc:name="Set User Id"/>
        <flow-ref name="putGoogleDriveSettingsFlow" doc:name="Flow-ref to putGoogleDriveSettingsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="overall-googleDrive-test-suite-postAuthDetailsFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[{&quot;integrationId&quot;: &quot;Y2lzY29zcGFyazovL3VzL0FQUExJQ0FUSU9OLzY4MzI2OGQzLTI2YjAtNDQ1OC1iMzViLWFmODcwYjU2MTYyNg&quot;,&quot;authSettings&quot;: {&quot;code&quot;: &quot;4/QRRhKp-MUZ0YnoV4wwtEuA-iWHUOw_VTCw2xSfkdEA4&quot;}}]" doc:name="Set Payload"/>
        <flow-ref name="postAuthDetailsFlow" doc:name="Flow-ref to postAuthDetailsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="overall-googleDrive-test-suite-postFormatMessageFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[{&quot;hookResponse&quot;: {&quot;value&quot;: &quot;reply&quot;,&quot;checkRoot&quot;: &quot;false&quot;,&quot;fileName&quot;: &quot;pradeep Docx&quot;,&quot;googleDriveMessage&quot;: &quot;**pradeep kanukuntla** replied to the comment on [pradeep Docx](https://docs.google.com/document/d/1SZ2RBBErbavdRMtSvBYoepQQtLOWLFYUgW7PX4SQmfA)** \n        pradeep kanukuntla commented  \&quot;hi ia am pradeep\&quot;  \n        pradeep kanukuntla replied  \&quot;iwil check\&quot;&quot;,&quot;pid&quot;: &quot;0B67R--HNWuQaclRuMW52MHpMTGM&quot;},&quot;userEvents&quot;: &quot;{\&quot;room_name\&quot;:\&quot;CISCO Spark Integration\&quot;,\&quot;file_id\&quot;:\&quot;all\&quot;,\&quot;resources\&quot;:\&quot;All Folders &amp; Files\&quot;,\&quot;user_name\&quot;:\&quot;Chennakesavulu\&quot;,\&quot;owner_name\&quot;:\&quot;pradeep kanukuntla\&quot;,\&quot;authenticated_to\&quot;:\&quot;pk455375@gmail.com\&quot;,\&quot;displayName\&quot;:\&quot;pradeepGD\&quot;,\&quot;notifications\&quot;:[\&quot;file_added\&quot;,\&quot;folder_added\&quot;,\&quot;comment_create\&quot;,\&quot;comment_reply\&quot;,\&quot;comment_resolve\&quot;,\&quot;comment_reopen\&quot;]}&quot;}]" doc:name="Set Payload"/>
        <flow-ref name="postFormatMessageFlow" doc:name="Flow-ref to postFormatMessageFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="overall-googleDrive-test-suite-tearDownIntegrationFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[{&quot;instanceId&quot;:&quot;fhvbvjhfvkdfvjkdfjkvd&quot;,&quot;channelId&quot;: &quot;Y2lzY2ZmRmMy0zZjRjLWJiM2MtZjZmY2U5Yzc5ODcy&quot;,&quot;integrationId&quot;: &quot;Y2lzY29zcGFyazovL3VzL0FQUExJQ0FUSU9OLzY4MzI2OGQzLTI2YjAtNDQ1OC1iMzViLWFmODcwYjU2MTYyNg&quot;,&quot;userId&quot;: &quot;Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMGU2OWMzYi1lMzU4LTQ3ZTUtODQyYy02MWMxMmRlNTVhY2Q&quot;,&quot;instanceUuid&quot;:&quot;jhbfgjhk455375&quot;}]" doc:name="Set Payload"/>
        <flow-ref name="tearDownIntegrationFlow" doc:name="tearDownIntegrationFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="overall-googleDrive-test-suite-updateIntegrationFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[{&quot;instanceId&quot;:&quot;fhvbvjhfvkdfvjkdfjkvd&quot;,&quot;channelId&quot;: &quot;Y2lzY2ZmRmMy0zZjRjLWJiM2MtZjZmY2U5Yzc5ODcy&quot;,&quot;integrationId&quot;: &quot;Y2lzY29zcGFyazovL3VzL0FQUExJQ0FUSU9OLzY4MzI2OGQzLTI2YjAtNDQ1OC1iMzViLWFmODcwYjU2MTYyNg&quot;,&quot;userId&quot;: &quot;Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMGU2OWMzYi1lMzU4LTQ3ZTUtODQyYy02MWMxMmRlNTVhY2Q&quot;,&quot;instanceUuid&quot;:&quot;jhbfgjhk455375&quot;}]" doc:name="Set Payload"/>
        <flow-ref name="updateIntegrationFlow" doc:name="Flow-ref to updateIntegrationFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="overall-googleDrive-test-suite-healthCheckFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <flow-ref name="healthCheckFlow" doc:name="Flow-ref to healthCheckFlow"/>
    </munit:test>
</mule>
