<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">

	<http:request-config name="HTTP_Access_Token_Request_Configuration"
		protocol="HTTPS" host="${googleDrive.api.access.token.host}" port="${googleDrive.api.access.token.port}"
		doc:name="HTTP Request Configuration" basePath="${googleDrive.api.access.token.base.path}" />

	<http:request-config name="HTTP_Operations_Request_Configuration"
		protocol="HTTPS" host="${googleDrive.api.operations.host}" port="${googleDrive.api.operations.port}"
		basePath="${googleDrive.api.operations.base.path}" doc:name="HTTP Request Configuration" />
	<vm:connector name="VM1" validateConnections="true"
		doc:name="VM" />
	<http:request-config name="HTTP_GoogleDrive_Comments_Request_Configuration"
		protocol="HTTPS" host="${googleDrive.api.operations.host}" port="${googleDrive.api.operations.port}"
		basePath="${googleDrive.api.operations.base.path.comments}" doc:name="HTTP Request Configuration" />
	<vm:connector name="VM_comments" validateConnections="true"
		doc:name="VM" />

	<flow name="postGoogleDriveTokenFlow">
		<set-payload
			value="#[{&quot;code&quot;:flowVars.tokenRequest.authSettings.code,&quot;client_id&quot;:&quot;${googleDrive.integration.client.id}&quot;,&quot;client_secret&quot;:&quot;${googleDrive.integration.client.secret}&quot;,&quot;redirect_uri&quot;:&quot;${googleDrive.integration.redirecr.uri}&quot;,&quot;grant_type&quot;:&quot;${googleDrive.integration.access.grantType}&quot;}]"
			doc:name="Set Payload" />
		<http:request config-ref="HTTP_Access_Token_Request_Configuration"
			path="${googleDrive.api.access.token.path}" method="POST" doc:name="HTTP">
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>
		<dw:transform-message doc:name="Transform Response to Json">
			<dw:set-payload resource="classpath:dwScripts/fromPayloadToJson.dwl" />
		</dw:transform-message>
	</flow>
	<flow name="postGoogleDriveRefreshTokenFlow">
		<set-payload
			value="#[{&quot;refresh_token&quot;:flowVars.refreshToken,&quot;client_id&quot;:&quot;${googleDrive.integration.client.id}&quot;,&quot;client_secret&quot;:&quot;${googleDrive.integration.client.secret}&quot;,&quot;redirect_uri&quot;:&quot;${googleDrive.integration.redirecr.uri}&quot;,&quot;grant_type&quot;:&quot;${googleDrive.integration.refresh.grantType}&quot;}]"
			doc:name="Set Payload" />
		<http:request config-ref="HTTP_Access_Token_Request_Configuration"
			path="${googleDrive.api.access.token.path}" method="POST" doc:name="HTTP">
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>
		<dw:transform-message doc:name="Transform Message To Java">
			<dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl" />
		</dw:transform-message>
	</flow>

	<flow name="getGoogleDriveUserFlow">
		<logger
			message="get GD users flow token = #[flowVars['token']] ++++++ #[flowVars['refreshTokenResponse']]"
			level="INFO" doc:name="Logger" />
		<http:request config-ref="HTTP_Operations_Request_Configuration"
			path="/about" method="GET" doc:name="HTTP">
			<http:request-builder>
				<http:query-param paramName="fields" value="user" />
				<http:header headerName="Authorization" value="Bearer #[flowVars['token']]" />
			</http:request-builder>
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>

		<dw:transform-message doc:name="Transform Response to Java">
			<dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl" />
		</dw:transform-message>
	</flow>
	<flow name="getGoogleDriveFoldersNFilesFlow">
		<logger
			message="get FoldersNFiles token = #[flowVars['token']] ++++++#[flowVars['refreshTokenResponse']]"
			level="INFO" doc:name="Logger" />
		<http:request config-ref="HTTP_Operations_Request_Configuration"
			path="${googleDrive.api.operations.files.path}" method="GET"
			doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="Authorization" value="Bearer #[flowVars['token']]" />
			</http:request-builder>
		</http:request>
		<dw:transform-message doc:name="Transform Response to Java">
			<dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl" />
		</dw:transform-message>
	</flow>

	<flow name="postHookForEntireDriveFlow">
		<set-variable variableName="integrationId"
			value="#[flowVars['request2']['integrationId']]" doc:name="Set Integration Id" />
		<set-variable variableName="userId"
			value="#[flowVars['request2']['userId']]" doc:name="Set User Id" />
		<logger
			message="SetUpIntegration  ==&gt; intgId=#[flowVars['integrationId']]   usId=#[flowVars['userId']]  payload= #[flowVars['request2']]  "
			level="INFO" doc:name="Logger" />
		<choice doc:name="Choice">
			<when
				expression="#[flowVars['integrationId'] !=null &amp;&amp; flowVars['userId'] !=null]">
				<enricher target="#[flowVars['getIntegrationTokenResponse']]"
					doc:name="Message Enricher">
					<flow-ref name="getIntegrationTokenFlow" doc:name="getIntegrationTokenFlow" />
				</enricher>
				<choice doc:name="No Result">
					<when
						expression="#[flowVars.getIntegrationTokenResponse.toString()=='{message=No results}']">
						<set-payload
							value="#[{&quot;message&quot;:&quot;Integration Token No Result&quot;}]"
							doc:name="Set No Result Message" />
						<dw:transform-message doc:name="Transform Message">
							<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
						</dw:transform-message>
					</when>
					<otherwise>
						<choice doc:name="Check Refresh Token">
							<when
								expression="#[flowVars['getIntegrationTokenResponse'][0]['refreshToken'] != null]">
								<set-variable variableName="token_Id"
									value="#[flowVars['getIntegrationTokenResponse'][0]['tokenId']]"
									doc:name="Set Token Id" />
								<set-variable variableName="refreshToken"
									value="#[flowVars['getIntegrationTokenResponse'][0]['refreshToken']]"
									doc:name="Set Refresh Token" />
								<set-payload
									value="#[{&quot;refresh_token&quot;:flowVars['refreshToken'],&quot;client_id&quot;:&quot;${googleDrive.integration.client.id}&quot;,&quot;client_secret&quot;:&quot;${googleDrive.integration.client.secret}&quot;,&quot;redirect_uri&quot;:&quot;${googleDrive.integration.redirecr.uri}&quot;,&quot;grant_type&quot;:&quot;${googleDrive.integration.refresh.grantType}&quot;}]"
									doc:name="Refresh Token Body Header" />
								<http:request config-ref="HTTP_Access_Token_Request_Configuration"
									path="${googleDrive.api.access.token.path}" method="POST"
									doc:name="Get Google Drive Access Token">
									<http:failure-status-code-validator
										values="500..599" />
								</http:request>
								<dw:transform-message doc:name="Transform Message">
									<dw:set-variable variableName="refreshTokenResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
								</dw:transform-message>
								<set-variable variableName="token"
									value="#[flowVars['refreshTokenResponse']['access_token']]"
									doc:name="Set Google Drive Token" />
								<enricher target="#[flowVars['driveChangesList']]"
									doc:name="Message Enricher">
									<flow-ref name="getGoogleDriveChangesFlow" doc:name="getGoogleDriveChangesFlow" />
								</enricher>
								<choice doc:name="Set Page Token ">
									<when
										expression="#[flowVars['driveChangesList']['largestChangeId'] != empty]">
										<set-variable variableName="newPageToken"
											value="#[flowVars['driveChangesList']['largestChangeId']]"
											doc:name="Set Page Token" />
									</when>
									<otherwise>
										<set-variable variableName="newPageToken"
											value="#[flowVars['driveChangesList']['nextPageToken']]"
											doc:name="Set Page Token" />
									</otherwise>
								</choice>
								<enricher target="#[flowVars['getGoogleDriveSettingsResponse']]"
									doc:name="Message Enricher">
									<flow-ref name="getGoogleDriveSettingsFlow" doc:name="getGoogleDriveSettingsFlow" />
								</enricher>
								<set-variable variableName="time1"
									value="#[server.dateTime.changeTimeZone('UTC')]" doc:name="Set Server Time" />
								<expression-component doc:name="Remove 'Z'"><![CDATA[flowVars['time2'] = flowVars['time1'].toString().split('Z')[0]]]></expression-component>
								<choice doc:name="Check Records Database">
									<when
										expression="#[flowVars['getGoogleDriveSettingsResponse'].toString()=='{message=No Result Found}']">
										<dw:transform-message doc:name="POST Request Body">
											<dw:set-payload
												resource="classpath:dwScripts/buildPostGoogleDriveSettingsExample.dwl" />
										</dw:transform-message>
										<http:request
											config-ref="HTTP_Integrations_Runtime_Request_Configuration"
											path="/googleDrive/settings/{userId}" method="POST"
											doc:name="POST GD Settings">
											<http:request-builder>
												<http:query-param paramName="client_id"
													value="${runtime.clientidenforcement.id}" />
												<http:query-param paramName="client_secret"
													value="${runtime.clientidenforcement.secret}" />
												<http:uri-param paramName="userId"
													value="#[flowVars['userId']]" />
											</http:request-builder>
											<http:failure-status-code-validator
												values="500..599" />
										</http:request>
									</when>
									<otherwise>
										<dw:transform-message doc:name="PUT Request Body">
											<dw:set-payload
												resource="classpath:dwScripts/buildPutGoogleDriveSettingsExample.dwl" />
										</dw:transform-message>
										<http:request
											config-ref="HTTP_Integrations_Runtime_Request_Configuration"
											path="/googleDrive/settings/{userId}" method="PUT"
											doc:name="PUT GD Settings">
											<http:request-builder>

												<http:query-param paramName="client_id"
													value="${runtime.clientidenforcement.id}" />
												<http:uri-param paramName="userId"
													value="#[flowVars.userId]" />
											</http:request-builder>
											<http:failure-status-code-validator
												values="500..599" />
										</http:request>
									</otherwise>
								</choice>
								<dw:transform-message doc:name="Transform Message">
									<dw:set-payload
										resource="classpath:dwScripts/buildSetupResponseInIntegrationExample.dwl" />
								</dw:transform-message>
							</when>
							<otherwise>
								<set-payload
									value="#[{&quot;message&quot;:&quot;Refresh Token Empty&quot;}]"
									doc:name="Set Refresh Token Empty Message" />
								<dw:transform-message doc:name="Transform Message">
									<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
								</dw:transform-message>
							</otherwise>
						</choice>
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<dw:transform-message doc:name="Transform Message">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"message":"userId or IntegrationId Null"
}]]></dw:set-payload>
				</dw:transform-message>
			</otherwise>
		</choice>

	</flow>

	<flow name="updateIntegration">
		<dw:transform-message doc:name="Transform Update Response">
			<dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl" />
		</dw:transform-message>
	</flow>

	<flow name="deleteGoogleDriveHookFlow">

		<set-payload
			value="#[{&quot;message&quot;:&quot;Operation executed successfully&quot;}]"
			doc:name="Set Delete Message" />


		<dw:transform-message doc:name="Transform Response to Java">
			<dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl" />
		</dw:transform-message>

	</flow>
	<flow name="getGoogleDriveChangesFlow">

		<http:request config-ref="HTTP_Operations_Changes_Request_Configuration"
			path="/changes" method="GET" doc:name="GD Get Changes V2 ">
			<http:request-builder>
				<http:header headerName="Authorization" value="Bearer #[flowVars['token']]" />

			</http:request-builder>
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>

		<dw:transform-message doc:name="Transform Message">
			<dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl" />
		</dw:transform-message>
	</flow>
	<flow name="startGoogleDrivePollingFlow">
		<http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration"
			path="/integrations/instances" method="GET" doc:name="Get By Integration Id">
			<http:request-builder>

				<http:query-param paramName="client_id"
					value="${runtime.clientidenforcement.id}" />
				<http:query-param paramName="client_secret"
					value="${runtime.clientidenforcement.secret}" />
				<http:query-param paramName="integrationId"
					value="${googleDrive.integration.id}" />
				<http:query-param paramName="status" value="ACTIVE" />


			</http:request-builder>
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>
		<dw:transform-message doc:name="Transform Message">
			<dw:set-variable variableName="instancesPayload"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
		</dw:transform-message>
		<choice doc:name="Check Message=No result">
			<when
				expression="#[flowVars['instancesPayload'].toString() != '{message=No results}']">
				<set-session-variable variableName="maap"
					value="#[new java.util.HashMap()]" doc:name="Set Maap" />
				<foreach collection="#[flowVars['instancesPayload']]"
					doc:name="Loop All Instances And Add UserIds,InstanceUuids To Maap">
					<choice doc:name="Check UserId Exists">
						<when expression="#[maap.containsKey(payload['userId'])]">
							<expression-component doc:name="Expression To Append Element"><![CDATA[maap.get(payload['userId']).add(payload['instanceUuid'])]]></expression-component>
						</when>
						<otherwise>
							<set-variable variableName="uuidList"
								value="#[new java.util.ArrayList()]" doc:name="Create UUID List" />
							<expression-component doc:name="Expression To Add First Element"><![CDATA[uuidList.add(payload['instanceUuid']);
maap.put(payload['userId'],uuidList)]]></expression-component>
						</otherwise>
					</choice>
				</foreach>
				<set-variable variableName="userIdSet"
					value="#[sessionVars.maap.keySet()]" doc:name="Set UserId Set" />
				<set-variable variableName="userIds"
					value="#[new java.util.ArrayList()]" doc:name="UseId List" />
				<expression-component doc:name="Expression Set to List"><![CDATA[userIds.addAll(flowVars['userIdSet']);]]></expression-component>
				<logger
					message="MapResult=#[sessionVars['maap']]==&gt;userIdArray=#[flowVars['userIds']]"
					level="DEBUG" doc:name="Logger" />
				<foreach collection="#[flowVars['userIds']]" doc:name="Loop All User Ids">
					<set-session-variable variableName="userId"
						value="#[payload]" doc:name="Set UserId" />
					<choice doc:name="Choice">
						<when expression="#[sessionVars['userId'] != empty]">
							<vm:outbound-endpoint exchange-pattern="one-way"
								path="ATPT-flow" connector-ref="VM1" doc:name="AccessToken and PageToken" />
						</when>
						<otherwise>
							<logger level="INFO" doc:name="Logger" message="userId null to go VM" />
						</otherwise>
					</choice>
				</foreach>
			</when>
			<otherwise>
				<logger
					message="in polling Get By Integration id result = #[flowVars['instancesPayload']]"
					level="INFO" doc:name="Logger" />
			</otherwise>
		</choice>


	</flow>
	<flow name="AccessTokenAndPageTokenFlow">
		<vm:inbound-endpoint exchange-pattern="one-way"
			path="ATPT-flow" connector-ref="VM1" doc:name="AccessToken and PageToken" />
		<logger
			message="VM payload=#[payload] ::::::::::::::::userId=#[sessionVars['userId']]==&gt;#[sessionVars.maap.get(sessionVars['userId'])]"
			level="DEBUG" doc:name="Logger" />
		<http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration"
			path="/integrations/{integrationId}/appTokens" method="GET"
			doc:name="Get Google Drive Access Token">
			<http:request-builder>
				<http:query-param paramName="client_id"
					value="${runtime.clientidenforcement.id}" />
				<http:query-param paramName="client_secret"
					value="${runtime.clientidenforcement.secret}" />
				<http:query-param paramName="userId"
					value="#[sessionVars['userId']]" />
				<http:uri-param paramName="integrationId"
					value="${googleDrive.integration.id}" />

			</http:request-builder>
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>
		<dw:transform-message doc:name="Transform Message To Java">
			<dw:set-variable variableName="integrationTokenResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
		</dw:transform-message>

		<choice doc:name="Token Response">
			<when
				expression="#[flowVars['integrationTokenResponse'].toString()=='{message=No results}']">
				<logger level="INFO" doc:name="Logger"
					message="token response &quot;no result&quot;" />
			</when>
			<otherwise>
				<choice doc:name="Check Refresh Token">
					<when
						expression="#[flowVars['integrationTokenResponse'][0]['refreshToken'] != null]">
						<set-variable variableName="serverTime"
							value="#[(new org.mule.el.datetime.DateTime(server.dateTime)).plusSeconds(300)]"
							doc:name="ServerTime" />
						<set-variable variableName="dbexpire"
							value="#[(new org.mule.el.datetime.DateTime(flowVars['integrationTokenResponse'][0]['expires']))]"
							doc:name="Db Expire" />
						<choice doc:name="Check Access Token Expires">
							<when expression="#[flowVars.serverTime.isAfter(flowVars['dbexpire'])]">
								<set-variable variableName="refreshToken"
									value="#[flowVars['integrationTokenResponse'][0]['refreshToken']]"
									doc:name="Set Refresh Token" />
								<set-payload
									value="#[{&quot;refresh_token&quot;:flowVars['refreshToken'],&quot;client_id&quot;:&quot;${googleDrive.integration.client.id}&quot;,&quot;client_secret&quot;:&quot;${googleDrive.integration.client.secret}&quot;,&quot;redirect_uri&quot;:&quot;${googleDrive.integration.redirecr.uri}&quot;,&quot;grant_type&quot;:&quot;${googleDrive.integration.refresh.grantType}&quot;}]"
									doc:name="Refresh Token Body" />
								<http:request config-ref="HTTP_Access_Token_Request_Configuration"
									path="${googleDrive.api.access.token.path}" method="POST"
									doc:name="GET Google Drive Access Token">
									<http:failure-status-code-validator
										values="500..599" />
								</http:request>
								<logger
									message="Refresh Token response from http = #[message.payloadAs(java.lang.String)] :::::::::::for tokenId=#[flowVars['integrationTokenResponse'][0]['tokenId']] userId=#[flowVars['integrationTokenResponse'][0]['userId']]=#[sessionVars['userId']]"
									level="DEBUG" doc:name="Logger" />
								<dw:transform-message doc:name="Transform Message To Java">
									<dw:set-variable variableName="refreshTokenResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
								</dw:transform-message>
								<set-variable variableName="expires_in"
									value="#[flowVars['refreshTokenResponse']['expires_in']]"
									doc:name="Set expires_in" />
								<set-variable variableName="GDAccessToken"
									value="#[flowVars['refreshTokenResponse']['access_token']]"
									doc:name="Set AccessToken" />
								<choice doc:name="Check For Revoke Access Token">
									<when
										expression="#[flowVars['expires_in'] != empty &amp;&amp; flowVars['GDAccessToken'] != empty]">
										<dw:transform-message doc:name="Prepare Json Body">
											<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "accessToken": flowVars['GDAccessToken'],
  "expires": flowVars['expires_in']
}]]></dw:set-payload>
										</dw:transform-message>
										<logger
											message="put Access Token payload==&gt; RTR=#[flowVars['refreshTokenResponse']] #[flowVars['expires_in']]==#[flowVars['refreshTokenResponse']['expires_in']]++++++++#[flowVars['GDAccessToken']]==#[flowVars['refreshTokenResponse']['access_token']] payload as body = #[message.payloadAs(java.lang.String)] :::::::::::::::: tokenId=#[flowVars['integrationTokenResponse'][0]['tokenId']]:::::::::: intgrId=${googleDrive.integration.id}"
											level="DEBUG" doc:name="Logger" />
										<http:request
											config-ref="HTTP_Integrations_Runtime_Request_Configuration"
											path="/integrations/{integrationId}/appTokens/{appTokenId}"
											method="PUT" doc:name="Put Access Token">
											<http:request-builder>
												<http:query-param paramName="client_id"
													value="${runtime.clientidenforcement.id}" />
												<http:query-param paramName="client_secret"
													value="${runtime.clientidenforcement.secret}" />
												<http:uri-param paramName="integrationId"
													value="${googleDrive.integration.id}" />
												<http:uri-param paramName="appTokenId"
													value="#[flowVars['integrationTokenResponse'][0]['tokenId']]" />
												<http:header headerName="Content-Type" value="application/json" />

											</http:request-builder>
											<http:failure-status-code-validator
												values="500..599" />
										</http:request>
									</when>
									<otherwise>
										<logger level="DEBUG" doc:name="Logger"
											message="Refresh Token Not success For useId=#[sessionVars['userId']]==&gt;tokenId=#[flowVars['integrationTokenResponse'][0]['tokenId']]" />
									</otherwise>
								</choice>
							</when>
							<otherwise>
								<set-variable variableName="GDAccessToken"
									value="#[flowVars['integrationTokenResponse'][0]['accessToken']]"
									doc:name="AccessToken" />
							</otherwise>
						</choice>
						<http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration"
							path="/googleDrive/settings/{userId}" method="GET"
							doc:name="Get PageToken From DB">
							<http:request-builder>

								<http:query-param paramName="client_id"
									value="${runtime.clientidenforcement.id}" />
								<http:query-param paramName="client_secret"
									value="${runtime.clientidenforcement.secret}" />
								<http:uri-param paramName="userId" value="#[sessionVars.userId]" />

							</http:request-builder>
							<http:failure-status-code-validator
								values="500..599" />
						</http:request>

						<dw:transform-message doc:name="Transform Message To Java">
							<dw:set-variable variableName="dbPageToken"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
						</dw:transform-message>
						<choice doc:name="Check Result &quot;No Result Found&quot;">
							<when
								expression="#[flowVars['dbPageToken'].toString() != '{message=No Result Found}']">
								<logger
									message="pageToken from DB for user=#[sessionVars['userId']]=====#[flowVars['dbPageToken'][0]]"
									level="INFO" doc:name="Logger" />
								<set-session-variable variableName="pollingIntervalMinus"
									value="#[(new org.mule.el.datetime.DateTime(flowVars['dbPageToken'][0]['cursorTime']))]"
									doc:name="Set User Cursor Time" />
								<set-variable variableName="pageToken"
									value="#[flowVars['dbPageToken'][0]['pageToken']]" doc:name="Set PageToken From Database" />
								<expression-component doc:name="Add Plus One For PageToken"><![CDATA[pageToken=Integer.parseInt(pageToken)+1;]]></expression-component>
								<http:request config-ref="HTTP_Operations_Changes_Request_Configuration"
									path="/changes" method="GET" doc:name="Get New Changes">
									<http:request-builder>
										<http:query-param paramName="pageToken"
											value="#[flowVars['pageToken']]" />
										<http:header headerName="Authorization"
											value="Bearer #[flowVars['GDAccessToken']]" />
									</http:request-builder>
									<http:failure-status-code-validator
										values="500..599" />
								</http:request>
								<logger
									message="new largest changes for userId=#[sessionVars['userId']] == #[message.payloadAs(java.lang.String)]"
									level="DEBUG" doc:name="Logger" />
								<dw:transform-message doc:name="Transform Message To Java">
									<dw:set-variable variableName="newChangesResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
								</dw:transform-message>
								<set-variable variableName="newPageToken"
									value="#[flowVars['newChangesResponse']['largestChangeId']]"
									doc:name="Set New Change Id" />
								<set-variable variableName="time1"
									value="#[server.dateTime.changeTimeZone('UTC')]" doc:name="Get Server Time" />
								<expression-component doc:name="Remove 'Z'"><![CDATA[flowVars['time2'] = flowVars['time1'].toString().split('Z')[0]]]></expression-component>
								<dw:transform-message doc:name="Prepare Json Body">
									<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "pageToken": flowVars['newPageToken'],
  "cursorTime": flowVars['time2']
}]]></dw:set-payload>
								</dw:transform-message>
								<http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration"
									path="/googleDrive/settings/{userId}" method="PUT" doc:name="update pageToken">
									<http:request-builder>
										<http:query-param paramName="client_id"
											value="${runtime.clientidenforcement.id}" />
										<http:query-param paramName="client_secret"
											value="${runtime.clientidenforcement.secret}" />
										<http:uri-param paramName="userId"
											value="#[sessionVars['userId']]" />
									</http:request-builder>
									<http:failure-status-code-validator
										values="500..599" />
								</http:request>

								<choice doc:name="check Index Size">
									<when expression="#[flowVars['newChangesResponse']['items'] != []]">
										<foreach collection="#[flowVars['newChangesResponse']['items']]"
											doc:name="For Each">
											<set-variable variableName="FileModificationDate"
												value="#[(new org.mule.el.datetime.DateTime(payload['modificationDate'])).format('yyyy.MM.dd HH:mm:ss')]"
												doc:name="File Modification Date" />

											<dw:transform-message doc:name="Transform Message">
												<dw:set-session-variable
													variableName="reqPayload"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>

											</dw:transform-message>
											<set-variable variableName="FileModifiedDateForCompare"
												value="#[(new org.mule.el.datetime.DateTime(sessionVars['reqPayload']['file']['modifiedDate']))]"
												doc:name="File ModifiedDate For Compare" />
											<set-variable variableName="FileCreatedDateForCompare"
												value="#[(new org.mule.el.datetime.DateTime(sessionVars['reqPayload']['file']['createdDate']))]"
												doc:name="File CreatedDate For Compare" />

											<choice doc:name="Filter According To File Mime Type">
												<when
													expression="#[sessionVars.reqPayload.file.mimeType=='application/vnd.google-apps.document' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_GoogleDrive_Comments_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.fileId]/comments"
														method="GET" doc:name="Get Comments for docs">
														<http:request-builder>
															<http:query-param paramName="fields"
																value="comments,kind,nextPageToken" />
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />

														</http:request-builder>
														<http:failure-status-code-validator
															values="500..599" />
													</http:request>
													<logger
														message="comments on doc for userId=#[sessionVars.userId]::::::::::#[message.payloadAs(java.lang.String)]"
														level="INFO" doc:name="Logger" />
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="commentResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>

													</dw:transform-message>

													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name">
														<http:request-builder>
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />
														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="Choice">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars['reqPayload']['file']['title']]](#[sessionVars['reqPayload']['file']['alternateLink']]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="Doc Added" />
															<set-variable variableName="value" value="add"
																doc:name="itsValue" />
															<choice doc:name="Choice">
																<when
																	expression="#[sessionVars['commentResponse']['comments'] != []]">
																	<vm:outbound-endpoint
																		exchange-pattern="request-response" path="comments_vm"
																		connector-ref="VM_comments" doc:name="VM" />
																	<logger
																		message="Doc value from sub ++++ #[sessionVars.postMessageMap] ============ #[sessionVars.MapKeyArray]"
																		level="INFO" doc:name="Logger" />
																</when>
																<otherwise>
																	<logger level="INFO" doc:name="Logger"
																		message="+++++++++comments = #[sessionVars['commentResponse']['comments']]+++++++" />
																</otherwise>
															</choice>
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**"
																doc:name="Doc trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<choice doc:name="Choice">
																<when
																	expression="#[sessionVars['commentResponse']['comments'] != []]">
																	<vm:outbound-endpoint
																		exchange-pattern="request-response" path="comments_vm"
																		connector-ref="VM_comments" doc:name="VM" />
																	<logger
																		message="value from sub ++++ #[sessionVars.postMessageMap] ============ #[sessionVars.MapKeyArray]"
																		level="INFO" doc:name="Logger" />
																</when>
																<otherwise>
																	<logger level="INFO" doc:name="Logger"
																		message="+++++++++comments = #[sessionVars['commentResponse']['comments']]+++++++" />
																</otherwise>
															</choice>

														</otherwise>
													</choice>
												</when>
												<when
													expression="#[sessionVars.reqPayload.file.mimeType=='application/vnd.google-apps.spreadsheet' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_GoogleDrive_Comments_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.fileId]/comments"
														method="GET" doc:name="Get Comments for SpreadSheet">
														<http:request-builder>
															<http:query-param paramName="fields"
																value="comments,kind,nextPageToken" />
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />

														</http:request-builder>
														<http:failure-status-code-validator
															values="500..599" />
													</http:request>
													<logger
														message="comments on spreadSheet for userId=#[sessionVars.userId]::::::::::#[message.payloadAs(java.lang.String)]"
														level="INFO" doc:name="Logger" />
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="commentResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>

													</dw:transform-message>
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name">
														<http:request-builder>
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />
														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="Choice">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars['reqPayload']['file']['alternateLink']]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="Spreadsheet Added" />
															<set-variable variableName="value" value="add"
																doc:name="itsValue" />
															<choice doc:name="Choice">
																<when
																	expression="#[sessionVars['commentResponse']['comments'] != []]">
																	<vm:outbound-endpoint
																		exchange-pattern="request-response" path="comments_vm"
																		connector-ref="VM_comments" doc:name="VM" />
																	<logger
																		message="value from sub ++++ #[sessionVars.postMessageMap] ============ #[sessionVars.MapKeyArray]"
																		level="INFO" doc:name="Logger" />
																</when>
																<otherwise>
																	<logger level="INFO" doc:name="Logger"
																		message="+++++++++comments = #[sessionVars['commentResponse']['comments']]+++++++" />
																</otherwise>
															</choice>
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**"
																doc:name="Spreadsheet Trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<choice doc:name="Choice">
																<when
																	expression="#[sessionVars['commentResponse']['comments'] != []]">
																	<vm:outbound-endpoint
																		exchange-pattern="request-response" path="comments_vm"
																		connector-ref="VM_comments" doc:name="VM" />
																	<logger
																		message="value from sub ++++ #[sessionVars.postMessageMap] ============ #[sessionVars.MapKeyArray]"
																		level="INFO" doc:name="Logger" />
																</when>
																<otherwise>
																	<logger level="INFO" doc:name="Logger"
																		message="+++++++++comments = #[sessionVars['commentResponse']['comments']]+++++++" />
																</otherwise>
															</choice>

														</otherwise>
													</choice>
												</when>
												<when
													expression="#[sessionVars.reqPayload.file.mimeType.contains('text/') &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name">
														<http:request-builder>
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />
														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="text">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[''+sessionVars.reqPayload.file.ownerNames[0]+' uploaded file ['+sessionVars.reqPayload.file.title+']('+sessionVars.reqPayload.file.webContentLink+')  in ['+sessionVars.parentDetails.title+']('+sessionVars.parentDetails.alternateLink+')']"
																doc:name="Text File Added" />
															<set-variable variableName="value" value="add"
																doc:name="itsValue" />
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**"
																doc:name="Text File trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<logger level="INFO" doc:name="Logger"
																message="text default file alert" />
														</otherwise>
													</choice>
												</when>
												<when
													expression="#[sessionVars.reqPayload.file.mimeType=='application/vnd.google-apps.presentation' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_GoogleDrive_Comments_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.fileId]/comments"
														method="GET" doc:name="Get Comments for Slides">
														<http:request-builder>
															<http:query-param paramName="fields"
																value="comments,kind,nextPageToken" />
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />

														</http:request-builder>
														<http:failure-status-code-validator
															values="500..599" />
													</http:request>
													<logger
														message="comments on slides for userId=#[sessionVars.userId]::::::::::#[message.payloadAs(java.lang.String)]"
														level="INFO" doc:name="Logger" />
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="commentResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>

													</dw:transform-message>
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name">
														<http:request-builder>
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />
														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="Choice">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars['reqPayload']['file']['alternateLink']]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="Slide Added" />
															<set-variable variableName="value" value="add"
																doc:name="itsValue" />
															<choice doc:name="Choice">
																<when
																	expression="#[sessionVars['commentResponse']['comments'] != []]">
																	<vm:outbound-endpoint
																		exchange-pattern="request-response" path="comments_vm"
																		connector-ref="VM_comments" doc:name="VM" />
																	<logger
																		message="value from sub ++++ #[sessionVars.postMessageMap] ============ #[sessionVars.MapKeyArray]"
																		level="INFO" doc:name="Logger" />
																</when>
																<otherwise>
																	<logger level="INFO" doc:name="Logger"
																		message="+++++++++comments = #[sessionVars['commentResponse']['comments']]+++++++" />
																</otherwise>
															</choice>
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**"
																doc:name="Slide Trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<choice doc:name="Choice">
																<when
																	expression="#[sessionVars['commentResponse']['comments'] != []]">
																	<vm:outbound-endpoint
																		exchange-pattern="request-response" path="comments_vm"
																		connector-ref="VM_comments" doc:name="VM" />
																	<logger
																		message="value from sub ++++ #[sessionVars.postMessageMap] ============ #[sessionVars.MapKeyArray]"
																		level="INFO" doc:name="Logger" />
																</when>
																<otherwise>
																	<logger level="INFO" doc:name="Logger"
																		message="+++++++++comments = #[sessionVars['commentResponse']['comments']]+++++++" />
																</otherwise>
															</choice>

														</otherwise>
													</choice>
												</when>
												<when
													expression="#[sessionVars.reqPayload.file.mimeType=='application/vnd.openxmlformats-officedocument.wordprocessingml.document' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_GoogleDrive_Comments_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.fileId]/comments"
														method="GET" doc:name="Get Comments for docX">
														<http:request-builder>
															<http:query-param paramName="fields"
																value="comments,kind,nextPageToken" />
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />

														</http:request-builder>
														<http:failure-status-code-validator
															values="500..599" />
													</http:request>
													<logger
														message="comments on Docx for userId=#[sessionVars.userId]::::::::::#[message.payloadAs(java.lang.String)]"
														level="INFO" doc:name="Logger" />
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="commentResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>

													</dw:transform-message>
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name">
														<http:request-builder>
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />
														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="Choice">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars['reqPayload']['file']['alternateLink']])  in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="Docx Added" />
															<set-variable variableName="value" value="add"
																doc:name="Variable" />
															<choice doc:name="Choice">
																<when
																	expression="#[sessionVars['commentResponse']['comments'] != []]">
																	<vm:outbound-endpoint
																		exchange-pattern="request-response" path="comments_vm"
																		connector-ref="VM_comments" doc:name="VM" />
																	<logger
																		message="value from sub ++++ #[sessionVars.postMessageMap] ============ #[sessionVars.MapKeyArray]"
																		level="INFO" doc:name="Logger" />
																</when>
																<otherwise>
																	<logger level="INFO" doc:name="Logger"
																		message="+++++++++comments = #[sessionVars['commentResponse']['comments']]+++++++" />
																</otherwise>
															</choice>
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]** "
																doc:name="Docx Trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<choice doc:name="Choice">
																<when
																	expression="#[sessionVars['commentResponse']['comments'] != []]">
																	<vm:outbound-endpoint
																		exchange-pattern="request-response" path="comments_vm"
																		connector-ref="VM_comments" doc:name="VM" />
																	<logger
																		message="value from sub ++++ #[sessionVars.postMessageMap] ============ #[sessionVars.MapKeyArray]"
																		level="INFO" doc:name="Logger" />
																</when>
																<otherwise>
																	<logger level="INFO" doc:name="Logger"
																		message="+++++++++comments = #[sessionVars['commentResponse']['comments']]+++++++" />
																</otherwise>
															</choice>

														</otherwise>
													</choice>
												</when>
												<when
													expression="#[sessionVars.reqPayload.file.mimeType=='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_GoogleDrive_Comments_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.fileId]/comments"
														method="GET" doc:name="Get Comments for Excel File">
														<http:request-builder>
															<http:query-param paramName="fields"
																value="comments,kind,nextPageToken" />
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />

														</http:request-builder>
														<http:failure-status-code-validator
															values="500..599" />
													</http:request>
													<logger
														message="comments on excel for userId=#[sessionVars.userId]::::::::::#[message.payloadAs(java.lang.String)]"
														level="INFO" doc:name="Logger" />
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="commentResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>

													</dw:transform-message>
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name">
														<http:request-builder>
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />
														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="Choice">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars['reqPayload']['file']['alternateLink']])  in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="Excel Added" />
															<set-variable variableName="value" value="add"
																doc:name="itsValue" />
															<choice doc:name="Choice">
																<when
																	expression="#[sessionVars['commentResponse']['comments'] != []]">
																	<vm:outbound-endpoint
																		exchange-pattern="request-response" path="comments_vm"
																		connector-ref="VM_comments" doc:name="VM" />
																	<logger
																		message="value from sub ++++ #[sessionVars.postMessageMap] ============ #[sessionVars.MapKeyArray]"
																		level="INFO" doc:name="Logger" />
																</when>
																<otherwise>
																	<logger level="INFO" doc:name="Logger"
																		message="+++++++++comments = #[sessionVars['commentResponse']['comments']]+++++++" />
																</otherwise>
															</choice>
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**"
																doc:name="Excel Trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<choice doc:name="Choice">
																<when
																	expression="#[sessionVars['commentResponse']['comments'] != []]">
																	<vm:outbound-endpoint
																		exchange-pattern="request-response" path="comments_vm"
																		connector-ref="VM_comments" doc:name="VM" />
																	<logger
																		message="value from sub ++++ #[sessionVars.postMessageMap] ============ #[sessionVars.MapKeyArray]"
																		level="INFO" doc:name="Logger" />
																</when>
																<otherwise>
																	<logger level="INFO" doc:name="Logger"
																		message="+++++++++comments = #[sessionVars['commentResponse']['comments']]+++++++" />
																</otherwise>
															</choice>

														</otherwise>
													</choice>
												</when>
												<when
													expression="#[sessionVars.reqPayload.file.mimeType=='application/vnd.google-apps.form' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name">
														<http:request-builder>
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />
														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="Forms ">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars['reqPayload']['file']['alternateLink']]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="Forms add" />
															<set-variable variableName="value" value="add"
																doc:name="itsValue" />
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to  trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**"
																doc:name="Forms trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<logger level="INFO" doc:name="Logger" message="forms default" />
														</otherwise>
													</choice>
												</when>
												<when
													expression="#[sessionVars.reqPayload.file.mimeType=='application/x-zip-compressed' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name">
														<http:request-builder>
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />
														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="zip">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded zip  **#[sessionVars.reqPayload.file.title]** in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="Zip add" />
															<set-variable variableName="value" value="add"
																doc:name="itsValue" />
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="Zip file **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to  trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**"
																doc:name="Zip trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<logger level="INFO" doc:name="Logger" message="zip default" />
														</otherwise>
													</choice>
												</when>
												<when
													expression="#[sessionVars.reqPayload.file.mimeType.contains('image/') &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name">
														<http:request-builder>
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />
														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="images">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded image [#[sessionVars.reqPayload.file.title]](#[sessionVars.reqPayload.file.webContentLink]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="Image add" />
															<set-variable variableName="value" value="add"
																doc:name="itsValue" />
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="Image **#[sessionVars.reqPayload.file.title]**  in **#[sessionVars.parentDetails.title]** moved to  trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**"
																doc:name="Image trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<logger level="INFO" doc:name="Logger" message="images default" />
														</otherwise>
													</choice>
												</when>
												<when
													expression="#[sessionVars.reqPayload.file.mimeType=='application/vnd.google-apps.drawing' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_GoogleDrive_Comments_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.fileId]/comments"
														method="GET" doc:name="Get Comments for drawings">
														<http:request-builder>
															<http:query-param paramName="fields"
																value="comments,kind,nextPageToken" />
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />

														</http:request-builder>
														<http:failure-status-code-validator
															values="500..599" />
													</http:request>
													<logger
														message="comments on drawings for userId=#[sessionVars.userId]::::::::::#[message.payloadAs(java.lang.String)]"
														level="INFO" doc:name="Logger" />
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="commentResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>

													</dw:transform-message>
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name">
														<http:request-builder>
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />
														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="Choice">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars['reqPayload']['file']['alternateLink']]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="Drawing Added" />
															<set-variable variableName="value" value="add"
																doc:name="itsValue" />
															<choice doc:name="Choice">
																<when
																	expression="#[sessionVars['commentResponse']['comments'] != []]">
																	<vm:outbound-endpoint
																		exchange-pattern="request-response" path="comments_vm"
																		connector-ref="VM_comments" doc:name="VM" />
																	<logger
																		message="value from sub ++++ #[sessionVars.postMessageMap] ============ #[sessionVars.MapKeyArray]"
																		level="INFO" doc:name="Logger" />
																</when>
																<otherwise>
																	<logger level="INFO" doc:name="Logger"
																		message="+++++++++comments = #[sessionVars['commentResponse']['comments']]+++++++" />
																</otherwise>
															</choice>
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]** "
																doc:name="Drawings Trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<choice doc:name="Choice">
																<when
																	expression="#[sessionVars['commentResponse']['comments'] != []]">
																	<vm:outbound-endpoint
																		exchange-pattern="request-response" path="comments_vm"
																		connector-ref="VM_comments" doc:name="VM" />
																	<logger
																		message="value from sub ++++ #[sessionVars.postMessageMap] ============ #[sessionVars.MapKeyArray]"
																		level="INFO" doc:name="Logger" />
																</when>
																<otherwise>
																	<logger level="INFO" doc:name="Logger"
																		message="+++++++++comments = #[sessionVars['commentResponse']['comments']]+++++++" />
																</otherwise>
															</choice>

														</otherwise>
													</choice>
												</when>
												<when
													expression="#[sessionVars.reqPayload.file.mimeType=='application/vnd.google-apps.map' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name for maps">
														<http:request-builder>
                                                            <http:header headerName="Authorization" value="Bearer #[flowVars.GDAccessToken]"/>

														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="Maps">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars['reqPayload']['file']['alternateLink']]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="Maps Added" />
															<set-variable variableName="value" value="add"
																doc:name="itsValue" />
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**"
																doc:name="Maps Trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<logger level="INFO" doc:name="Logger" message="Map defaults" />
														</otherwise>
													</choice>
												</when>
												<when
													expression="#[sessionVars.reqPayload.file.mimeType=='application/vnd.google-apps.site' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name for sites">
														<http:request-builder>
                                                            <http:header headerName="Authorization" value="Bearer #[flowVars.GDAccessToken]"/>

														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="Sites">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars.reqPayload.file.alternateLink]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="Site Added" />
															<set-variable variableName="value" value="add"
																doc:name="itsValue" />
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**"
																doc:name="Site Trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<logger level="INFO" doc:name="Logger" message="Map defaults" />
														</otherwise>
													</choice>
												</when>

												<when
													expression="#[sessionVars.reqPayload.file.mimeType=='application/vnd.google-apps.folder' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name for folder">
														<http:request-builder>
                                                            <http:header headerName="Authorization" value="Bearer #[flowVars.GDAccessToken]"/>

														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="folder">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] created folder [#[sessionVars.reqPayload.file.title]](https://drive.google.com/drive/folders/#[sessionVars.reqPayload.fileId]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="folder added" />
															<set-variable variableName="value" value="folder_add"
																doc:name="its Value" />
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="Folder **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**"
																doc:name="Folder Trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<logger level="INFO" doc:name="Logger" message="folder default" />
														</otherwise>
													</choice>
												</when>
												<when
													expression="#[sessionVars.reqPayload.file.mimeType=='application/vnd.oasis.opendocument.spreadsheet' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name for sys_spreadsheet">
														<http:request-builder>
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />
														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="sys_spreadsheet">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars['reqPayload']['file']['alternateLink']]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="sys_spreadsheet Added" />
															<set-variable variableName="value" value="add"
																doc:name="itsValue" />
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**"
																doc:name="sys_spreadsheet Trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<logger level="INFO" doc:name="Logger"
																message="sys_spreadsheet defaults" />
														</otherwise>
													</choice>
												</when>
												<when
													expression="#[sessionVars.reqPayload.file.mimeType=='application/vnd.oasis.opendocument.presentation' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name for sys_presentation">
														<http:request-builder>
                                                            <http:header headerName="Authorization" value="Bearer #[flowVars.GDAccessToken]"/>
														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="sys_presentation">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars['reqPayload']['file']['alternateLink']]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="sys_presentation Added" />
															<set-variable variableName="value" value="add"
																doc:name="itsValue" />
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**"
																doc:name="sys_presentation Trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<logger level="INFO" doc:name="Logger"
																message="sys_presentation defaults" />
														</otherwise>
													</choice>
												</when>
												<when expression="#[sessionVars.reqPayload.file.mimeType=='application/vnd.oasis.opendocument.graphics' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
                                                    <http:request config-ref="HTTP_Operations_Changes_Request_Configuration" path="/files/#[sessionVars.reqPayload.file.parents[0].id]" method="GET" doc:name="Get Parent Name for sys_graphics">
                                                        <http:request-builder>
                                                            <http:header headerName="Authorization" value="Bearer #[flowVars.GDAccessToken]"/>
                                                        </http:request-builder>
                                                    </http:request>
                                                    <dw:transform-message doc:name="Transform Message">
                                                        <dw:set-session-variable variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
                                                    </dw:transform-message>
                                                    <choice doc:name="sys_graphics">
                                                        <when expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

                                                            <set-variable variableName="postMessage" value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars['reqPayload']['file']['alternateLink']]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])" doc:name="sys_graphics Added"/>
                                                            <set-variable variableName="value" value="add" doc:name="itsValue"/>
                                                        </when>
                                                        <when expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
                                                            <set-variable variableName="postMessage" value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**" doc:name="sys_graphics Trashed"/>
                                                            <set-variable variableName="value" value="trashed" doc:name="itsValue"/>
                                                        </when>
                                                        <otherwise>
                                                            <logger level="INFO" doc:name="Logger" message="sys_graphics defaults"/>
                                                        </otherwise>
                                                    </choice>
                                                </when>
                                            	<when expression="#[sessionVars.reqPayload.file.mimeType=='application/vnd.ms-publisher' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
                                                    <http:request config-ref="HTTP_Operations_Changes_Request_Configuration" path="/files/#[sessionVars.reqPayload.file.parents[0].id]" method="GET" doc:name="Get Parent Name for sys_publisher">
                                                        <http:request-builder>
                                                            <http:header headerName="Authorization" value="Bearer #[flowVars.GDAccessToken]"/>
                                                        </http:request-builder>
                                                    </http:request>
                                                    <dw:transform-message doc:name="Transform Message">
                                                        <dw:set-session-variable variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
                                                    </dw:transform-message>
                                                    <choice doc:name="sys_publisher">
                                                        <when expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

                                                            <set-variable variableName="postMessage" value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars['reqPayload']['file']['alternateLink']]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])" doc:name="sys_publisher Added"/>
                                                            <set-variable variableName="value" value="add" doc:name="itsValue"/>
                                                        </when>
                                                        <when expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
                                                            <set-variable variableName="postMessage" value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**" doc:name="sys_publisher Trashed"/>
                                                            <set-variable variableName="value" value="trashed" doc:name="itsValue"/>
                                                        </when>
                                                        <otherwise>
                                                            <logger level="INFO" doc:name="Logger" message="sys_publisher defaults"/>
                                                        </otherwise>
                                                    </choice>
                                                </when>
                                            	<when expression="#[sessionVars.reqPayload.file.mimeType=='application/json' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
                                                    <http:request config-ref="HTTP_Operations_Changes_Request_Configuration" path="/files/#[sessionVars.reqPayload.file.parents[0].id]" method="GET" doc:name="Get Parent Name for json">
                                                        <http:request-builder>
                                                            <http:header headerName="Authorization" value="Bearer #[flowVars.GDAccessToken]"/>
                                                        </http:request-builder>
                                                    </http:request>
                                                    <dw:transform-message doc:name="Transform Message">
                                                        <dw:set-session-variable variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
                                                    </dw:transform-message>
                                                    <choice doc:name="json">
                                                        <when expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

                                                            <set-variable variableName="postMessage" value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars['reqPayload']['file']['webContentLink']]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])" doc:name="json Added"/>
                                                            <set-variable variableName="value" value="add" doc:name="itsValue"/>
                                                        </when>
                                                        <when expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
                                                            <set-variable variableName="postMessage" value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**" doc:name="json Trashed"/>
                                                            <set-variable variableName="value" value="trashed" doc:name="itsValue"/>
                                                        </when>
                                                        <otherwise>
                                                            <logger level="INFO" doc:name="Logger" message="json defaults"/>
                                                        </otherwise>
                                                    </choice>
                                                </when>
                                            
												<when
													expression="#[sessionVars.reqPayload.file.mimeType=='application/pdf' &amp;&amp; sessionVars['reqPayload']['file']['parents'] != []]">
													<http:request
														config-ref="HTTP_GoogleDrive_Comments_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.fileId]/comments"
														method="GET" doc:name="Get Comments for PDF">
														<http:request-builder>
															<http:query-param paramName="fields"
																value="comments,kind,nextPageToken" />
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />

														</http:request-builder>
														<http:failure-status-code-validator
															values="500..599" />
													</http:request>
													<logger
														message="comments on pdf for userId=#[sessionVars.userId]::::::::::#[message.payloadAs(java.lang.String)]"
														level="INFO" doc:name="Logger" />
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="commentResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>

													</dw:transform-message>
													<http:request
														config-ref="HTTP_Operations_Changes_Request_Configuration"
														path="/files/#[sessionVars.reqPayload.file.parents[0].id]"
														method="GET" doc:name="Get Parent Name">
														<http:request-builder>
															<http:header headerName="Authorization"
																value="Bearer #[flowVars.GDAccessToken]" />
														</http:request-builder>
													</http:request>
													<dw:transform-message doc:name="Transform Message">
														<dw:set-session-variable
															variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
													</dw:transform-message>
													<choice doc:name="Choice">
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

															<set-variable variableName="postMessage"
																value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars['reqPayload']['file']['alternateLink']]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])"
																doc:name="PDF Added" />
															<set-variable variableName="value" value="add"
																doc:name="itsValue" />
															<choice doc:name="Choice">
																<when
																	expression="#[sessionVars['commentResponse']['comments'] != []]">
																	<vm:outbound-endpoint
																		exchange-pattern="request-response" path="comments_vm"
																		connector-ref="VM_comments" doc:name="VM" />
																	<logger
																		message="value from sub ++++ #[sessionVars.postMessageMap] ============ #[sessionVars.MapKeyArray]"
																		level="INFO" doc:name="Logger" />
																</when>
																<otherwise>
																	<logger level="INFO" doc:name="Logger"
																		message="+++++++++comments = #[sessionVars['commentResponse']['comments']]+++++++" />
																</otherwise>
															</choice>
														</when>
														<when
															expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
															<set-variable variableName="postMessage"
																value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**"
																doc:name="PDF trashed" />
															<set-variable variableName="value" value="trashed"
																doc:name="itsValue" />
														</when>
														<otherwise>
															<choice doc:name="Choice">
																<when
																	expression="#[sessionVars['commentResponse']['comments'] != []]">
																	<vm:outbound-endpoint
																		exchange-pattern="request-response" path="comments_vm"
																		connector-ref="VM_comments" doc:name="VM" />
																	<logger
																		message="value from sub ++++ #[sessionVars.postMessageMap] ============ #[sessionVars.MapKeyArray]"
																		level="INFO" doc:name="Logger" />
																</when>
																<otherwise>
																	<logger level="INFO" doc:name="Logger"
																		message="+++++++++comments = #[sessionVars['commentResponse']['comments']]+++++++" />
																</otherwise>
															</choice>

														</otherwise>
													</choice>
												</when>
												<otherwise>
													<logger
														message="changes For unknown Formats +++++ file = #[sessionVars['reqPayload']['file']['title']] +++++ it's parent = #[sessionVars['reqPayload']['file']['parents']]"
														level="INFO" doc:name="If Not content any format" />
                                                    <choice doc:name="Check It's Parent Field">
                                                        <when expression="#[sessionVars['reqPayload']['file']['parents'] != []]">
                                                            <http:request config-ref="HTTP_Operations_Changes_Request_Configuration" path="/files/#[sessionVars.reqPayload.file.parents[0].id]" method="GET" doc:name="Get Parent Name for Default">
                                                        <http:request-builder>
                                                                    <http:header headerName="Authorization" value="Bearer #[flowVars.GDAccessToken]"/>
                                                        </http:request-builder>
                                                    </http:request>
                                                    <dw:transform-message doc:name="Transform Message">
                                                        <dw:set-session-variable variableName="parentDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-session-variable>
                                                    </dw:transform-message>
                                                    <choice doc:name="Default Format">
                                                        <when expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='false' &amp;&amp; sessionVars['reqPayload']['file']['parents'] !=[] &amp;&amp; ((flowVars['FileCreatedDateForCompare'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['FileCreatedDateForCompare'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">

                                                            <set-variable variableName="postMessage" value="#[sessionVars.reqPayload.file.ownerNames[0]] uploaded file [#[sessionVars.reqPayload.file.title]](#[sessionVars['reqPayload']['file']['alternateLink']]) in [#[sessionVars.parentDetails.title]](#[sessionVars.parentDetails.alternateLink])" doc:name="Default Added"/>
                                                            <set-variable variableName="value" value="add" doc:name="itsValue"/>
                                                        </when>
                                                        <when expression="#[sessionVars['reqPayload']['file']['labels']['trashed']=='true']">
                                                            <set-variable variableName="postMessage" value="File **#[sessionVars.reqPayload.file.title]** in **#[sessionVars.parentDetails.title]** moved to trash by **#[sessionVars.reqPayload.file.lastModifyingUserName]**" doc:name="Default Trashed"/>
                                                            <set-variable variableName="value" value="trashed" doc:name="itsValue"/>
                                                        </when>
                                                        <otherwise>
                                                            <logger level="INFO" doc:name="Logger" message="Default defaults"/>
                                                        </otherwise>
                                                    </choice>
                                                        </when>
                                                        <otherwise>
                                                            <logger message="parent field for file is empty in &quot;not any Format&quot; = sessionVars['reqPayload']['file']['parents']" level="INFO" doc:name="Logger"/>
                                                        </otherwise>
                                                    </choice>
												</otherwise>
											</choice>
											<foreach collection="#[sessionVars.maap.get(sessionVars.userId)]"
												doc:name="Loop All Instance Uuids">
												<set-variable variableName="instanceUuid"
													value="#[payload]" doc:name="Set Instance Uuid" />
												<choice doc:name="Check Parents field for an File">
													<when
														expression="#[sessionVars['reqPayload']['file']['parents'] != []]">
														<logger
															message="Iuuid==&gt;FV=#[flowVars['instanceUuid']]==P=#[payload]==userId=#[sessionVars['userId']]+++++++In setPayload BFChoice ===googleDriveMessage=#[flowVars.postMessage]   +++++     value=#[flowVars.value]    +++++++     pid=#[sessionVars.reqPayload.file.parents[0].id]  ++++     checkRoot=#[sessionVars.reqPayload.file.parents[0].isRoot]  +++++     fileName=#[sessionVars.reqPayload.file.title]"
															level="INFO" doc:name="Logger" />
														<choice doc:name="Choice">
															<when
																expression="#[(flowVars.postMessage == null) &amp;&amp; (flowVars.value == null) &amp;&amp; (sessionVars.reqPayload.file.title == null)]">
																<logger message="And Condition in looping All instances"
																	level="INFO" doc:name="And Condition" />
															</when>
															<when
																expression="#[(flowVars.postMessage == null) || (flowVars.value == null) || (sessionVars.reqPayload.file.title == null)]">
																<logger message="Or condition for looping all instances"
																	level="INFO" doc:name="Or condition" />
															</when>
															<otherwise>
																<logger message="and or conditions failed entered to default"
																	level="INFO" doc:name="Logger" />
																<set-payload
																	value="#[{&quot;googleDriveMessage&quot;: flowVars.postMessage,&quot;value&quot;:flowVars.value,&quot;pid&quot;:sessionVars.reqPayload.file.parents[0].id,&quot;checkRoot&quot;:sessionVars.reqPayload.file.parents[0].isRoot,&quot;fileName&quot;:sessionVars.reqPayload.file.title}]"
																	doc:name="Prepare Message To Management" />
																<http:request
																	config-ref="HTTP_Integrations_Management_Request_Configuration"
																	path="/hooks/{instanceUuid}" method="POST"
																	doc:name="Hit Management Webhook">
																	<http:request-builder>
																		<http:uri-param paramName="instanceUuid"
																			value="#[flowVars.instanceUuid]" />
																	</http:request-builder>
																	<http:failure-status-code-validator
																		values="500..599" />
																</http:request>

															</otherwise>
														</choice>
													</when>
													<otherwise>
														<logger
															message="parentsField for a file=#[sessionVars['reqPayload']['file']['title']] is empty array +++++ userId=#[sessionVars['userId']]"
															level="INFO" doc:name="Logger" />
													</otherwise>
												</choice>
											</foreach>
											<foreach collection="#[sessionVars.maap.get(sessionVars.userId)]"
												doc:name="Loop All Instance Uuids">
												<set-variable variableName="instanceUuid"
													value="#[payload]" doc:name="Set Instance Uuid" />
												<choice doc:name="Check Parents field for an File">
													<when
														expression="#[sessionVars['reqPayload']['file']['parents'] != []]">
														<choice doc:name="Choice">
															<when expression="#[sessionVars['MapKeyArray'] != empty]">
																<foreach collection="#[sessionVars.MapKeyArray]"
																	doc:name="For Each">
																	<logger message="commends msg send to mgmt"
																		level="INFO" doc:name="Logger" />
																	<set-payload
																		value="#[{&quot;googleDriveMessage&quot;: payload,&quot;value&quot;:sessionVars.postMessageMap.get(payload),&quot;pid&quot;:sessionVars.reqPayload.file.parents[0].id,&quot;checkRoot&quot;:sessionVars.reqPayload.file.parents[0].isRoot,&quot;fileName&quot;:sessionVars.reqPayload.file.title}]"
																		doc:name="Prepare Message To Management" />
																	<http:request
																		config-ref="HTTP_Integrations_Management_Request_Configuration"
																		path="/hooks/{instanceUuid}" method="POST"
																		doc:name="Hit Management Webhook">
																		<http:request-builder>
																			<http:uri-param paramName="instanceUuid"
																				value="#[flowVars.instanceUuid]" />
																		</http:request-builder>
																		<http:failure-status-code-validator
																			values="500..599" />
																	</http:request>
																</foreach>
															</when>
															<otherwise>
																<logger level="INFO" doc:name="Logger"
																	message="comments Map #[sessionVars['postMessageMap']]++++++++++++++#[sessionVars['MapKeyArray']]" />
															</otherwise>
														</choice>
													</when>
													<otherwise>
														<logger
															message="parentsField for a file=#[sessionVars['reqPayload']['file']['title']] is empty array +++++ userId=#[sessionVars['userId']]"
															level="INFO" doc:name="Logger" />
													</otherwise>
												</choice>
											</foreach>
											<set-session-variable variableName="MapKeyArray"
												value="" doc:name="Set MapKeyArray Empty" />
											<set-variable variableName="postMessage" value=""
												doc:name="Set postMessage Empty" />
										</foreach>

									</when>
									<otherwise>
										<logger message="changes Nill for User = #[sessionVars.userId]"
											level="INFO" doc:name="Logger" />
									</otherwise>
								</choice>
							</when>
							<otherwise>
								<logger level="INFO" doc:name="Logger"
									message="pageToken Result &quot;not found&quot; for userId=#[sessionVars.userId]" />
							</otherwise>
						</choice>


					</when>
					<otherwise>
						<logger level="INFO" doc:name="Logger" />
					</otherwise>
				</choice>
			</otherwise>
		</choice>

		<catch-exception-strategy doc:name="Catch Exception Strategy">
			<set-variable variableName="exception" value="#[exception.message]"
				doc:name="exception" />
			<logger
				message="exception in polling ++++  #[flowVars['exception']]  ++++++++"
				level="INFO" doc:name="Logger" />
		</catch-exception-strategy>
	</flow>
	<flow name="GetFileCommentsFlow">
		<vm:inbound-endpoint exchange-pattern="request-response"
			path="comments_vm" doc:name="VM" connector-ref="VM_comments" />
		<set-variable variableName="postMessageArray" value="#[new java.util.HashMap()]"
			doc:name="Post Message Map" />
		<set-session-variable variableName="postMessageMap"
			value="#[new java.util.HashMap()]" doc:name="Post Message Map" />
		<foreach collection="#[sessionVars['commentResponse']['comments']]"
			doc:name="For Each">
			<set-variable variableName="commentCreateTime"
				value="#[(new org.mule.el.datetime.DateTime(payload.createdTime))]"
				doc:name="comment create time" />
			<set-variable variableName="commentModifiedTime"
				value="#[(new org.mule.el.datetime.DateTime(payload.modifiedTime))]"
				doc:name="comment modified Time" />

			<choice doc:name="Choice">
				<when expression="#[payload['replies']==[]]">
					<choice doc:name="check comment create msg">
						<when
							expression="#[((flowVars['commentModifiedTime'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['commentModifiedTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
							<set-variable variableName="commentCreate" value="#[payload.content]"
								doc:name="comment message" />
							<expression-component doc:name="Remove '\n' from comments"><![CDATA[flowVars.commentCreate = flowVars.commentCreate.replace('\n',' ')]]></expression-component>
							<set-variable variableName="postMessage1"
								value="#[' '+payload['author']['displayName']+' commented on file ['+sessionVars['reqPayload']['file']['title']+']('+sessionVars['reqPayload']['file']['alternateLink']+') in ['+sessionVars['parentDetails']['title']+']('+sessionVars['parentDetails']['alternateLink']+') as  &quot;'+flowVars.commentCreate+'&quot; ']"
								doc:name="comment create" />
							<expression-component doc:name="Add To Map"><![CDATA[postMessageMap.put(flowVars.postMessage1,'comment')]]></expression-component>
							<set-variable variableName="postMessage1" value=""
								doc:name="Empty the postMessage1" />
						</when>
						<otherwise>
							<logger level="INFO" doc:name="Logger" message="comment and replies empty" />
						</otherwise>
					</choice>

				</when>
				<when expression="#[payload['replies'] != []]">
					<logger level="INFO" doc:name="Logger"
						message="comment &amp; reply at same +++++condition =  #[((flowVars['commentCreateTime'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['commentCreateTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))]++++++++++++++value = #[flowVars['commentCreateTime']] isAfter #[sessionVars['pollingIntervalMinus']] &amp;&amp; #[flowVars['commentCreateTime']]  isBefore #[server.dateTime.changeTimeZone('UTC')] ++++++++++" />
					<choice doc:name="For Replays">
						<when
							expression="#[((flowVars['commentCreateTime'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['commentCreateTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
							<set-variable variableName="commentCreate" value="#[payload.content]"
								doc:name="comment message" />
							<expression-component doc:name="Remove '\n' from comments"><![CDATA[flowVars.commentCreate = flowVars.commentCreate.replace('\n',' ')]]></expression-component>
							<set-variable variableName="postMessage1"
								value="#[' '+payload['author']['displayName']+' commented on file ['+sessionVars['reqPayload']['file']['title']+']('+sessionVars['reqPayload']['file']['alternateLink']+') in ['+sessionVars['parentDetails']['title']+']('+sessionVars['parentDetails']['alternateLink']+') as  &quot;'+flowVars.commentCreate+'&quot; ']"
								doc:name="comment create" />
							<expression-component doc:name="Add To Map"><![CDATA[postMessageMap.put(flowVars.postMessage1,'comment')]]></expression-component>
							<set-variable variableName="postMessage1" value=""
								doc:name="Empty the postMessage1" />
							<set-variable variableName="forComment" value="#[payload.content]"
								doc:name="comment" />

							<expression-component doc:name="Remove '\n' from comment"><![CDATA[flowVars.forComment = flowVars.forComment.replace('\n',' ')]]></expression-component>
							<set-variable variableName="rootUser"
								value="#[payload.author.displayName]" doc:name="Root User" />
							<set-variable variableName="commentTimings" value="#[payload.createdTime]"
								doc:name="comment timing" />
							<foreach collection="#[payload.replies]" doc:name="For Each">
								<set-variable variableName="replyTime"
									value="#[(new org.mule.el.datetime.DateTime(payload.modifiedTime)).format(&quot;yyyy.MM.dd HH:mm:ss&quot;)]"
									doc:name="Reply Modified Time" />
								<set-variable variableName="replyModificationTime"
									value="#[(new org.mule.el.datetime.DateTime(payload.modifiedTime))]"
									doc:name="Reply Modification Time" />
								<choice doc:name="Choice">
									<when
										expression="#[payload.action=='resolve' &amp;&amp; ((flowVars['replyModificationTime'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['replyModificationTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
										<set-variable variableName="postMessage1"
											value="#[''+payload['author']['displayName']+' resolved comment on file ['+sessionVars['reqPayload']['file']['title']+']('+sessionVars['reqPayload']['file']['alternateLink']+') in ['+sessionVars['parentDetails']['title']+']('+sessionVars['parentDetails']['alternateLink']+') \n  -  commented &quot;'+flowVars.forComment+'&quot; by '+flowVars.rootUser+' on '+(new org.mule.el.datetime.DateTime(flowVars.commentTimings)).format(&quot;MMM dd&quot;)+' '+(new org.mule.el.datetime.DateTime(flowVars.commentTimings)).format(&quot;hh:mm a&quot;)+' GMT']"
											doc:name="comment Resolved" />
										<expression-component doc:name="Add To Map"><![CDATA[postMessageMap.put(flowVars.postMessage1,'resol')]]></expression-component>
										<set-variable variableName="postMessage1" value=""
											doc:name="Empty the postMessage1" />
									</when>
									<when
										expression="#[payload.deleted=='false' &amp;&amp; payload.content !=empty &amp;&amp; ((flowVars['replyModificationTime'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['replyModificationTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
										<set-variable variableName="replyComment" value="#[payload.content]"
											doc:name="replyComment" />
										<expression-component doc:name="remove '\n' from replyComment"><![CDATA[flowVars.replyComment = flowVars.replyComment.replace('\n',' ')]]></expression-component>
										<set-variable variableName="postMessage1"
											value="#[''+payload['author']['displayName']+' replied to the comment on file ['+sessionVars['reqPayload']['file']['title']+']('+sessionVars['reqPayload']['file']['alternateLink']+') in ['+sessionVars['parentDetails']['title']+']('+sessionVars['parentDetails']['alternateLink']+') \n  -  '+flowVars.rootUser+' commented  &quot;'+flowVars.forComment+'&quot; on '+(new org.mule.el.datetime.DateTime(flowVars.commentTimings)).format(&quot;MMM dd&quot;)+' '+(new org.mule.el.datetime.DateTime(flowVars.commentTimings)).format(&quot;hh:mm a&quot;)+'  GMT \n  -  '+payload['author']['displayName']+' replied  &quot;'+flowVars.replyComment+'&quot; on '+(new org.mule.el.datetime.DateTime(payload['modifiedTime'])).format(&quot;MMM dd&quot;)+' '+(new org.mule.el.datetime.DateTime(payload['modifiedTime'])).format(&quot;hh:mm a&quot;)+' GMT']"
											doc:name="comment Replies" />
										<expression-component doc:name="Add To Map"><![CDATA[postMessageMap.put(flowVars.postMessage1,'reply')]]></expression-component>
										<set-variable variableName="postMessage1" value=""
											doc:name="Empty the postMessage1" />
									</when>
									<when
										expression="#[payload.action=='reopen' &amp;&amp; ((flowVars['replyModificationTime'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['replyModificationTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
										<set-variable variableName="postMessage1"
											value="#[''+payload['author']['displayName']+' reopened a resolved comment on file ['+sessionVars['reqPayload']['file']['title']+']('+sessionVars['reqPayload']['file']['alternateLink']+') in ['+sessionVars['parentDetails']['title']+']('+sessionVars['parentDetails']['alternateLink']+') \n  - commented &quot;'+flowVars.forComment+'&quot; by '+flowVars.rootUser+' on '+(new org.mule.el.datetime.DateTime(flowVars.commentTimings)).format(&quot;MMM dd&quot;)+' '+(new org.mule.el.datetime.DateTime(flowVars.commentTimings)).format(&quot;hh:mm a&quot;)+' GMT']"
											doc:name="Comment Reopen" />
										<expression-component doc:name="Add To Map"><![CDATA[postMessageMap.put(flowVars.postMessage1,'reopen')]]></expression-component>
										<set-variable variableName="postMessage1" value=""
											doc:name="Empty the postMessage1" />
									</when>
									<otherwise>
										<logger level="INFO" doc:name="Logger"
											message="default comments replies" />
									</otherwise>
								</choice>
							</foreach>

						</when>
						<otherwise>
							<logger message="##############   for replay Default  #################"
								level="INFO" doc:name="Logger" />
							<set-variable variableName="forComment" value="#[payload.content]"
								doc:name="comment" />

							<expression-component doc:name="Remove '\n' from comment"><![CDATA[flowVars.forComment = flowVars.forComment.replace('\n',' ')]]></expression-component>
							<set-variable variableName="rootUser"
								value="#[payload.author.displayName]" doc:name="Root User" />
							<set-variable variableName="commentTimings" value="#[payload.createdTime]"
								doc:name="comment timing" />
							<foreach collection="#[payload.replies]" doc:name="For Each">
								<set-variable variableName="replyTime"
									value="#[(new org.mule.el.datetime.DateTime(payload.modifiedTime)).format(&quot;yyyy.MM.dd HH:mm:ss&quot;)]"
									doc:name="Reply Modified Time" />
								<set-variable variableName="replyModificationTime"
									value="#[(new org.mule.el.datetime.DateTime(payload.modifiedTime))]"
									doc:name="Reply Modification Time" />
								<choice doc:name="Choice">
									<when
										expression="#[payload.action=='resolve' &amp;&amp; ((flowVars['replyModificationTime'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['replyModificationTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
										<set-variable variableName="postMessage1"
											value="#[''+payload['author']['displayName']+' resolved comment on file ['+sessionVars['reqPayload']['file']['title']+']('+sessionVars['reqPayload']['file']['alternateLink']+') in ['+sessionVars['parentDetails']['title']+']('+sessionVars['parentDetails']['alternateLink']+') \n  -  commented &quot;'+flowVars.forComment+'&quot; by '+flowVars.rootUser+' on '+(new org.mule.el.datetime.DateTime(flowVars.commentTimings)).format(&quot;MMM dd&quot;)+' '+(new org.mule.el.datetime.DateTime(flowVars.commentTimings)).format(&quot;hh:mm a&quot;)+' GMT']"
											doc:name="comment Resolved" />
										<expression-component doc:name="Add To Map"><![CDATA[postMessageMap.put(flowVars.postMessage1,'resol')]]></expression-component>
										<set-variable variableName="postMessage1" value=""
											doc:name="Empty the postMessage1" />
									</when>
									<when
										expression="#[payload.deleted=='false' &amp;&amp; payload.content !=empty &amp;&amp; ((flowVars['replyModificationTime'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['replyModificationTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
										<set-variable variableName="replyComment" value="#[payload.content]"
											doc:name="replyComment" />
										<expression-component doc:name="remove '\n' from replyComment"><![CDATA[flowVars.replyComment = flowVars.replyComment.replace('\n',' ')]]></expression-component>
										<set-variable variableName="postMessage1"
											value="#[''+payload['author']['displayName']+' replied to the comment on file ['+sessionVars['reqPayload']['file']['title']+']('+sessionVars['reqPayload']['file']['alternateLink']+') in ['+sessionVars['parentDetails']['title']+']('+sessionVars['parentDetails']['alternateLink']+') \n  -  '+flowVars.rootUser+' commented  &quot;'+flowVars.forComment+'&quot; on '+(new org.mule.el.datetime.DateTime(flowVars.commentTimings)).format(&quot;MMM dd&quot;)+' '+(new org.mule.el.datetime.DateTime(flowVars.commentTimings)).format(&quot;hh:mm a&quot;)+'  GMT \n  -  '+payload['author']['displayName']+' replied  &quot;'+flowVars.replyComment+'&quot; on '+(new org.mule.el.datetime.DateTime(payload['modifiedTime'])).format(&quot;MMM dd&quot;)+' '+(new org.mule.el.datetime.DateTime(payload['modifiedTime'])).format(&quot;hh:mm a&quot;)+' GMT']"
											doc:name="comment Replies" />
										<expression-component doc:name="Add To Map"><![CDATA[postMessageMap.put(flowVars.postMessage1,'reply')]]></expression-component>
										<set-variable variableName="postMessage1" value=""
											doc:name="Empty the postMessage1" />
									</when>
									<when
										expression="#[payload.action=='reopen' &amp;&amp; ((flowVars['replyModificationTime'].isAfter(sessionVars['pollingIntervalMinus'])) &amp;&amp; (flowVars['replyModificationTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
										<set-variable variableName="postMessage1"
											value="#[''+payload['author']['displayName']+' reopened a resolved comment on file ['+sessionVars['reqPayload']['file']['title']+']('+sessionVars['reqPayload']['file']['alternateLink']+') in ['+sessionVars['parentDetails']['title']+']('+sessionVars['parentDetails']['alternateLink']+') \n  -  commented &quot;'+flowVars.forComment+'&quot; by '+flowVars.rootUser+' on '+(new org.mule.el.datetime.DateTime(flowVars.commentTimings)).format(&quot;MMM dd&quot;)+' '+(new org.mule.el.datetime.DateTime(flowVars.commentTimings)).format(&quot;hh:mm a&quot;)+' GMT']"
											doc:name="Comment Reopen" />
										<expression-component doc:name="Add To Array"><![CDATA[postMessageMap.put(flowVars.postMessage1,'reopen')]]></expression-component>
										<set-variable variableName="postMessage1" value=""
											doc:name="Empty the postMessage1" />
									</when>
									<otherwise>
										<logger level="INFO" doc:name="Logger"
											message="default comments replies" />
									</otherwise>
								</choice>
							</foreach>

						</otherwise>
					</choice>

				</when>
				<otherwise>
					<logger level="INFO" doc:name="Logger" message="default comments" />
				</otherwise>
			</choice>
		</foreach>

		<choice doc:name="Choice">
			<when expression="#[sessionVars['postMessageMap'].size() &gt; 0]">
				<set-variable variableName="getMapKeys"
					value="#[sessionVars.postMessageMap.keySet()]" doc:name="Get Map Keys" />
				<set-session-variable variableName="MapKeyArray"
					value="#[new java.util.ArrayList()]" doc:name="Store Map Key In Array" />
				<expression-component doc:name="Expression"><![CDATA[MapKeyArray.addAll(flowVars['getMapKeys']);]]></expression-component>

			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger" message="comments flow Map empty" />
			</otherwise>
		</choice>




	</flow>


</mule>
