<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">

	<flow name="getClientTokensFlow">
		<logger
			message="TESTINGGGGGGGGGGGGG ++++++InId#[message.inboundProperties.'http.query.params'.integrationId] &amp;&amp; UID#[message.inboundProperties.'http.query.params'.userId] AND PRIVATE MESSAGE #[message.inboundProperties.'http.query.params'.privateMessage]"
			level="INFO" doc:name="Logger" />
		<choice doc:name="Choice to Bot or Integration Token">
			<when
				expression="#[message.inboundProperties.'http.query.params'.privateMessage != empty]">
				<logger level="INFO" doc:name="Logger" message="Getting Bot Token!!" />
				<db:select config-ref="MySQL_Configuration" doc:name="Get Bot Token By IntegrationId">
					<db:parameterized-query><![CDATA[SELECT * FROM BOT_TOKENS WHERE integration_id=#[message.inboundProperties.'http.query.params'.integrationId]]]></db:parameterized-query>
				</db:select>
				<choice doc:name="Check Result Set Size">
					<when expression="#[payload != []]">
						<dw:transform-message doc:name="Build Get Client Tokens Response">
							<dw:input-payload
								doc:sample="classpath:dwScripts/buildGetBotClientTokensResponse.dwl"
								mimeType="application/java" />
							<dw:set-payload
								resource="classpath:dwScripts/buildGetBotClientTokensResponse.dwl" />
						</dw:transform-message>
					</when>
					<otherwise>
						<dw:transform-message doc:name="Build No Results Message">
							<dw:input-payload
								doc:sample="classpath:dwScripts/buildSelectNoResultsResponse.dwl"
								mimeType="application/java" />
							<dw:set-payload
								resource="classpath:dwScripts/buildSelectNoResultsResponse.dwl" />
						</dw:transform-message>
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<choice doc:name="Choice">
					<when
						expression="#[message.inboundProperties.'http.query.params'.integrationId != empty &amp;&amp; message.inboundProperties.'http.query.params'.userId != empty]">
						<db:select config-ref="MySQL_Configuration"
							doc:name="Get Token By UserId and IntegrationId">
							<db:parameterized-query><![CDATA[SELECT * FROM CLIENT_TOKENS WHERE integration_id=#[message.inboundProperties.'http.query.params'.integrationId] and user_id=#[message.inboundProperties.'http.query.params'.userId]]]></db:parameterized-query>
						</db:select>
					</when>
					<otherwise>
						<db:select config-ref="MySQL_Configuration" doc:name="Get All Tokens">
							<db:parameterized-query><![CDATA[SELECT * FROM CLIENT_TOKENS]]></db:parameterized-query>
						</db:select>
					</otherwise>
				</choice>
				<choice doc:name="Check Result Set Size">
					<when expression="#[payload != []]">
						<dw:transform-message doc:name="Build Get Client Tokens Response">
							<dw:input-payload
								doc:sample="classpath:dwScripts/buildGetClientTokensResponse.dwl"
								mimeType="application/java" />
							<dw:set-payload
								resource="classpath:dwScripts/buildGetClientTokensResponse.dwl" />
						</dw:transform-message>
					</when>
					<otherwise>
						<dw:transform-message doc:name="Build No Results Message">
							<dw:input-payload
								doc:sample="classpath:dwScripts/buildSelectNoResultsResponse.dwl"
								mimeType="application/java" />
							<dw:set-payload
								resource="classpath:dwScripts/buildSelectNoResultsResponse.dwl" />
						</dw:transform-message>
					</otherwise>
				</choice>
			</otherwise>
		</choice>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy" logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in getClientTokensFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

	<flow name="getClientTokenFlow">
		<db:select config-ref="MySQL_Configuration" doc:name="Get Token">
			<db:parameterized-query><![CDATA[SELECT * FROM CLIENT_TOKENS WHERE client_token_id = #[flowVars['clientTokenId']]]]></db:parameterized-query>

		</db:select>
		<choice doc:name="Check Result Set Size">
			<when expression="#[payload != []]">
				<dw:transform-message doc:name="Build Get Client Token Response">
					<dw:input-payload
						doc:sample="classpath:dwScripts/buildSelectNoResultsResponse.dwl"
						mimeType="application/java" />
					<dw:set-payload
						resource="classpath:dwScripts/buildSelectNoResultsResponse.dwl" />
				</dw:transform-message>
			</when>
			<otherwise>
				<dw:transform-message doc:name="Build No Results Message">
					<dw:input-payload
						doc:sample="classpath:dwScripts/buildSelectNoResultsResponse.dwl"
						mimeType="application/java" />
					<dw:set-payload
						resource="classpath:dwScripts/buildSelectNoResultsResponse.dwl" />
				</dw:transform-message>
			</otherwise>
		</choice>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy" logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in getClientTokenFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

	<flow name="postClientTokenFlow">
		<dw:transform-message doc:name="Transform Payload to Java">
			<dw:set-payload resource="classpath:dwScripts/fromObjectToJava.dwl" />
		</dw:transform-message>
		<db:insert config-ref="MySQL_Configuration" doc:name="Insert Integration Instance"
			autoGeneratedKeys="true" autoGeneratedKeysColumnNames="token_id">
			<db:parameterized-query><![CDATA[INSERT INTO CLIENT_TOKENS (client_id, user_id, access_token, refresh_token, expires, refresh_expires,integration_id) VALUES (#[payload['clientId']], #[payload['userId']], #[payload['accessToken']], #[payload['refreshToken']],IF (#[payload['expires'] != empty], #[payload['expires']],expires),IF (#[payload['refreshExpires'] != empty], #[payload['refreshExpires']],refresh_expires),#[payload['integrationId']])]]></db:parameterized-query>



		</db:insert>
		<dw:transform-message doc:name="Build Success Response">
			<dw:input-payload
				doc:sample="classpath:dwScripts/buildInsertSuccessResponse.dwl"
				mimeType="application/java" />
			<dw:set-payload resource="classpath:dwScripts/buildInsertSuccessResponse.dwl" />
		</dw:transform-message>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy" logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in postClientTokenFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

	<flow name="putClientTokenFlow">
		<dw:transform-message doc:name="Transform Payload to Java">
			<dw:input-payload doc:sample="classpath:dwScripts/fromObjectToJava.dwl"
				mimeType="application/java" />
			<dw:set-payload resource="classpath:dwScripts/fromObjectToJava.dwl" />
		</dw:transform-message>
		<db:update config-ref="MySQL_Configuration" doc:name="Update Token">
			<db:parameterized-query><![CDATA[UPDATE CLIENT_TOKENS SET  
user_id = IF (#[payload['userId'] != empty], #[payload['userId']], user_id), 
access_token = IF (#[payload['accessToken'] != empty], #[payload['accessToken']], access_token), 
expires = IF (#[payload['expires'] != empty], #[payload['expires']], expires), 
refresh_token = IF (#[payload['refreshToken'] != empty], #[payload['refreshToken']], refresh_token), 
refresh_expires = IF (#[payload['refreshExpires'] != empty], #[payload['refreshExpires']], refresh_expires)
WHERE client_token_id = #[flowVars['clientTokenId']]]]></db:parameterized-query>

		</db:update>
		<dw:transform-message doc:name="Build Success Response">
			<dw:input-payload
				doc:sample="classpath:dwScripts/buildUpdateSuccessResponse.dwl"
				mimeType="application/java" />
			<dw:set-payload resource="classpath:dwScripts/buildUpdateSuccessResponse.dwl" />
		</dw:transform-message>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy" logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in putClientTokenFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

	<flow name="deleteClientTokenFlow">
		<db:delete config-ref="MySQL_Configuration" doc:name="Delete Token">
			<db:parameterized-query><![CDATA[DELETE FROM CLIENT_TOKENS WHERE client_token_id = #[flowVars['clientTokenId']]]]></db:parameterized-query>

		</db:delete>
		<dw:transform-message doc:name="Build Success Response">
			<dw:input-payload
				doc:sample="classpath:dwScripts/buildDeleteSuccessResponse.dwl"
				mimeType="application/java" />
			<dw:set-payload resource="classpath:dwScripts/buildDeleteSuccessResponse.dwl" />
		</dw:transform-message>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy" logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in deleteClientTokenFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>
	<flow name="deleteClientOperationsFlow">
		<db:delete config-ref="MySQL_Configuration" doc:name="Database">
			<db:parameterized-query><![CDATA[DELETE FROM CLIENT_TOKENS WHERE user_id=#[message.inboundProperties.'http.query.params'.userId] AND integration_id=#[message.inboundProperties.'http.query.params'.integrationId]]]></db:parameterized-query>
		</db:delete>
		<dw:transform-message doc:name="Transform Message">
			<dw:input-payload
				doc:sample="classpath:dwScripts/buildDeleteClientOperationResponse.dwl"
				mimeType="application/java" />
			<dw:set-payload
				resource="classpath:dwScripts/buildDeleteClientOperationResponse.dwl" />
		</dw:transform-message>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy" logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in deleteClientOperationsFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

</mule>
