<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">

	<flow name="getIntegrationTokensRouterFlow">
		<flow-ref name="setIntegrationTokensFiltersFlow"
			doc:name="Set Integration Tokens Filters Flow Reference" />

		<choice doc:name="Choice - Token Filters">
			<when
				expression="#[flowVars.applicationId == empty &amp;&amp; flowVars.userId != empty]">
				<flow-ref name="getIntegrationTokensPerUserFlow"
					doc:name="Get Integration Tokens Per User Flow Reference" />
			</when>
			<when
				expression="#[flowVars.applicationId != empty &amp;&amp; flowVars.userId == empty]">
				<flow-ref name="getIntegrationTokensPerApplicationFlow"
					doc:name="Get Integration Tokens Per Application Flow Reference" />
			</when>
			<when
				expression="#[flowVars.applicationId != empty &amp;&amp; flowVars.userId != empty]">
				<flow-ref name="getIntegrationTokensPerUserAndApplicationFlow"
					doc:name="Get Integration Tokens Per User And Application Flow Reference" />
			</when>
			<otherwise>
				<flow-ref name="getAllIntegrationTokensFlow" doc:name="Get All Integration Tokens Flow Reference" />
			</otherwise>
		</choice>
		<choice doc:name="Check Result Set Size">
			<when expression="#[payload != []]">
				<dw:transform-message doc:name="Build Get Integration Token Response">
					<dw:input-payload
						doc:sample="classpath:dwScripts/buildGetIntegrationTokensResponse.dwl"
						mimeType="application/java" />
					<dw:set-payload
						resource="classpath:dwScripts/buildGetIntegrationTokensResponse.dwl" />
				</dw:transform-message>
			</when>
			<otherwise>
				<dw:transform-message doc:name="Build No Results Message">
					<dw:input-payload
						doc:sample="classpath:dwScripts/buildSelectNoResultsResponse.dwl"
						mimeType="application/java" />
					<dw:set-payload
						resource="classpath:dwScripts/buildSelectNoResultsResponse.dwl" />
				</dw:transform-message>
			</otherwise>
		</choice>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy"
				logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in getIntegrationTokensRouterFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

	<flow name="setIntegrationTokensFiltersFlow">
		<set-variable variableName="userId"
			value="#[message.inboundProperties.'http.query.params'.userId]"
			doc:name="Set User ID" />
		<set-variable variableName="applicationId"
			value="#[message.inboundProperties.'http.query.params'.applicationId]"
			doc:name="Set Application ID" />
		<set-variable variableName="instanceUuid"
			value="#[message.inboundProperties.'http.query.params'.instanceUuid]"
			doc:name="instanceUuid" />
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy"
				logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in setIntegrationTokensFiltersFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

	<flow name="getAllIntegrationTokensFlow">
		<db:select config-ref="MySQL_Configuration" doc:name="Get Token">
			<db:dynamic-query><![CDATA[SELECT * FROM INTEGRATION_APP_TOKENS WHERE integration_id = '#[flowVars['integrationId']]']]></db:dynamic-query>
		</db:select>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy"
				logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in getAllIntegrationTokensFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

	<flow name="getIntegrationTokensPerUserFlow">
		<db:select config-ref="MySQL_Configuration" doc:name="Get Token">
			<db:dynamic-query><![CDATA[SELECT * FROM INTEGRATION_APP_TOKENS WHERE user_id = '#[flowVars['userId']]' AND integration_id = '#[flowVars['integrationId']]']]></db:dynamic-query>

		</db:select>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy"
				logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in getIntegrationTokensPerUserFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

	<flow name="getIntegrationTokensPerApplicationFlow">
		<db:select config-ref="MySQL_Configuration" doc:name="Get Token">
			<db:dynamic-query><![CDATA[SELECT * FROM INTEGRATION_APP_TOKENS WHERE application_id = #[flowVars['applicationId']] AND integration_id = #[flowVars['integrationId']]]]></db:dynamic-query>
		</db:select>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy"
				logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in getIntegrationTokensPerApplicationFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

	<flow name="getIntegrationTokensPerUserAndApplicationFlow">
		<db:select config-ref="MySQL_Configuration" doc:name="Get Token">
			<db:dynamic-query><![CDATA[SELECT * FROM INTEGRATION_APP_TOKENS WHERE application_id = #[flowVars['applicationId']] AND user_id = '#[flowVars['userId']]' AND integration_id = '#[flowVars['integrationId']]']]></db:dynamic-query>
		</db:select>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy"
				logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in getIntegrationTokensPerUserAndApplicationFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

	<flow name="getIntegrationTokenFlow">
		<db:select config-ref="MySQL_Configuration" doc:name="Get Token">
			<db:parameterized-query><![CDATA[SELECT * FROM INTEGRATION_APP_TOKENS WHERE app_token_id = #[flowVars['appTokenId']]]]></db:parameterized-query>

		</db:select>
		<choice doc:name="Check Result Set Size">
			<when expression="#[payload != []]">
				<dw:transform-message doc:name="Build Get Integration Token Response">
					<dw:input-payload
						doc:sample="classpath:dwScripts/buildGetIntegrationTokenResponse.dwl"
						mimeType="application/java" />
					<dw:set-payload
						resource="classpath:dwScripts/buildGetIntegrationTokenResponse.dwl" />
				</dw:transform-message>
			</when>
			<otherwise>
				<dw:transform-message doc:name="Build No Results Message">
					<dw:input-payload
						doc:sample="classpath:dwScripts/buildSelectNoResultsResponse.dwl"
						mimeType="application/java" />
					<dw:set-payload
						resource="classpath:dwScripts/buildSelectNoResultsResponse.dwl" />
				</dw:transform-message>
			</otherwise>
		</choice>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy"
				logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in getIntegrationTokenFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

	<flow name="postIntegrationTokenFlow">
		<dw:transform-message doc:name="Transform Payload to Java">
			<dw:input-payload doc:sample="classpath:dwScripts/fromObjectToJava.dwl"
				mimeType="application/java" />
			<dw:set-payload resource="classpath:dwScripts/fromObjectToJava.dwl" />
		</dw:transform-message>
		<choice doc:name="Choice to check expires exists">
			<when expression="#[payload.expires != empty]">
				<set-variable variableName="expires"
					value="#[server.dateTime.plusSeconds(payload.expires).format('yyyy-MM-dd HH:mm:ss')]"
					doc:name="Set Expires " />
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger" message="No Expiry date!!!!!!!!!!!" />
			</otherwise>
		</choice>
		<logger
			message="Messageeeeeee #[message.payloadAs(java.lang.String)] and #[payload.refreshExpires]"
			level="INFO" doc:name="Logger" />
		<choice doc:name="Choice to check refreshExpires exists">
			<when expression="#[payload.refreshExpires != empty]">
				<set-variable variableName="refreshExpires"
					value="#[server.dateTime.plusSeconds(payload.refreshExpires).format('yyyy-MM-dd HH:mm:ss')]"
					doc:name="Set refreshExpires" />
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger"
					message="No refreshExpires date!!!!!!!!!!!" />
			</otherwise>
		</choice>
		<logger
			message="EXPIRES #[flowVars.expires] and RefreshExpires #[flowVars.refreshExpires]"
			level="INFO" doc:name="Logger" />
		<db:insert config-ref="MySQL_Configuration" doc:name="Insert Token"
			autoGeneratedKeys="true" autoGeneratedKeysColumnNames="token_id">
			<db:parameterized-query><![CDATA[INSERT INTO INTEGRATION_APP_TOKENS (application_id, integration_id, user_id, access_token, refresh_token, expires, refresh_expires,sub_domain) VALUES (#[payload['applicationId']], #[payload['integrationId']], #[payload['userId']], #[payload['accessToken']], #[payload['refreshToken']], IF (#[payload['expires'] != empty], #[flowVars['expires']], expires),IF (#[payload['refreshExpires'] != empty], #[flowVars['refreshExpires']], refresh_expires),IF (#[payload['subDomain'] != empty], #[payload['subDomain']], sub_domain))]]></db:parameterized-query>


		</db:insert>
		<dw:transform-message doc:name="Build Success Response">
			<dw:input-payload
				doc:sample="classpath:dwScripts/buildInsertSuccessResponse.dwl"
				mimeType="application/java" />
			<dw:set-payload resource="classpath:dwScripts/buildInsertSuccessResponse.dwl" />
		</dw:transform-message>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy"
				logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in postIntegrationTokenFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

	<flow name="putIntegrationTokenFlow">
		<dw:transform-message doc:name="Transform Payload to Java">
			<dw:input-payload doc:sample="classpath:dwScripts/fromObjectToJava.dwl"
				mimeType="application/java" />
			<dw:set-payload resource="classpath:dwScripts/fromObjectToJava.dwl" />
		</dw:transform-message>

		<choice doc:name="Choice">
			<when expression="#[payload.expires != empty]">
				<set-variable variableName="expires"
					value="#[server.dateTime.plusSeconds(payload.expires).format('yyyy-MM-dd HH:mm:ss')]"
					doc:name="Set Expires " />
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger" />
			</otherwise>
		</choice>
		<logger
			message="Messageeeeeee #[message.payloadAs(java.lang.String)] and #[payload.refreshExpires]"
			level="INFO" doc:name="Logger" />
		<choice doc:name="Choice to check refreshExpires exists">
			<when expression="#[payload.refreshExpires != empty]">
				<set-variable variableName="refreshExpires"
					value="#[server.dateTime.plusSeconds(payload.refreshExpires).format('yyyy-MM-dd HH:mm:ss')]"
					doc:name="Set refreshExpires" />
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger"
					message="No refreshExpires date!!!!!!!!!!!" />
			</otherwise>
		</choice>
		<logger
			message="Update EXPIRES #[flowVars.expires] and RefreshExpires #[flowVars.refreshExpires]"
			level="INFO" doc:name="Logger" />
		<db:update config-ref="MySQL_Configuration" doc:name="Update Token">
            <db:parameterized-query><![CDATA[UPDATE INTEGRATION_APP_TOKENS SET  
access_token = IF (#[payload['accessToken'] != empty], #[payload['accessToken']], access_token), 
expires = IF (#[payload['expires'] != empty], #[flowVars['expires']], expires), 
refresh_token = IF (#[payload['refreshToken'] != empty], #[payload['refreshToken']], refresh_token), 
refresh_expires = IF (#[payload['refreshExpires'] != empty], #[flowVars['refreshExpires']], refresh_expires),
sub_domain = IF (#[payload['subDomain'] != empty], #[payload['subDomain']], sub_domain)
WHERE app_token_id = #[flowVars['appTokenId']]]]></db:parameterized-query>

		</db:update>

		<dw:transform-message doc:name="Build Success Response">
			<dw:input-payload
				doc:sample="classpath:dwScripts/buildUpdateSuccessResponse.dwl"
				mimeType="application/java" />
			<dw:set-payload resource="classpath:dwScripts/buildUpdateSuccessResponse.dwl" />
		</dw:transform-message>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy"
				logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in putIntegrationTokenFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

	<flow name="deleteIntegrationTokenFlow">
		<db:delete config-ref="MySQL_Configuration" doc:name="Delete Token">
			<db:parameterized-query><![CDATA[DELETE FROM INTEGRATION_APP_TOKENS WHERE app_token_id = #[flowVars['appTokenId']]]]></db:parameterized-query>
		</db:delete>
		<dw:transform-message doc:name="Build Success Response">
			<dw:input-payload
				doc:sample="classpath:dwScripts/buildDeleteSuccessResponse.dwl"
				mimeType="application/java" />
			<dw:set-payload resource="classpath:dwScripts/buildDeleteSuccessResponse.dwl" />
		</dw:transform-message>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy" logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in deleteIntegrationTokenFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>
	<flow name="deleteIntegrationTokenOperationsFlow">
		<db:delete config-ref="MySQL_Configuration" doc:name="Database">
			<db:parameterized-query><![CDATA[DELETE FROM INTEGRATION_APP_TOKENS WHERE user_id=#[message.inboundProperties.'http.query.params'.userId] and integration_id=#[flowVars['integrationId']]]]></db:parameterized-query>
		</db:delete>
		<dw:transform-message doc:name="Transform Message">
			<dw:input-payload
				doc:sample="classpath:dwScripts/buildDeleteSuccessResponse.dwl"
				mimeType="application/java" />
			<dw:set-payload resource="classpath:dwScripts/buildDeleteSuccessResponse.dwl" />
		</dw:transform-message>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="Catch Exception Strategy"
				logException="false">
				<set-variable variableName="exception" value="#[exception.message]"
					doc:name="exception" />
				<logger
					message="Exception in deleteIntegrationTokenOperationsFlow = #[flowVars['exception']]"
					level="INFO" doc:name="Logger" />

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>
</mule>
