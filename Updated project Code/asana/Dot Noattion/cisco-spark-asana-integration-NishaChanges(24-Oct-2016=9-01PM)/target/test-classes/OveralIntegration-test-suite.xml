<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <munit:config name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:asana-integration.xml"/>
        <spring:import resource="classpath:integration-token-operations.xml"/>
        <spring:import resource="classpath:core-services-invocations.xml"/>
        <spring:import resource="classpath:asana-api-calls.xml"/>
        <spring:import resource="classpath:global.xml"/>
    </spring:beans>
    <munit:test name="new-test-suite-postAuthDetailsFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "integrationId": 21,
  "authSettings": {
    "code": "0%2F800ce51c96bc0bcb88ffee953829ecdb"
  }
}]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="postAuthDetailsFlow" doc:name="Flow-ref to postAuthDetailsFlow"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-postFormatMessageFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"hookResponse":{
	"events": [{
		"resource": 189188881910357,
		"user": 187152065370189,
		"type": "project",
		"action": "changed",
		"created_at": "2016-10-07T17:17:24.833Z",
		"parent": null
	}, {
		"resource": 193073272856646,
		"user": 187152065370189,
		"type": "task",
		"action": "added",
		"created_at": "2016-10-07T17:17:24.797Z",
		"parent": 189188881910357
	}, {
		"resource": 193073272856646,
		"user": 187152065370189,
		"type": "task",
		"action": "changed",
		"created_at": "2016-10-07T17:17:27.363Z",
		"parent": null
	}, {
		"resource": 193073272856646,
		"user": 187152065370189,
		"type": "task",
		"action": "changed",
		"created_at": "2016-10-07T17:17:27.862Z",
		"parent": null
	}, {
		"resource": 193073272856646,
		"user": 187152065370189,
		"type": "task",
		"action": "changed",
		"created_at": "2016-10-07T17:17:28.623Z",
		"parent": null
	}, {
		"resource": 193073272856646,
		"user": 187152065370189,
		"type": "task",
		"action": "changed",
		"created_at": "2016-10-07T17:17:31.445Z",
		"parent": null
	}]
},
  "userEvents": "{\"notifications\":[\"created\",\"completed\",\"assigned\",\"subtask\",\"comment\",\"attachment\",\"duedate\",\"updated\"],\"project_id\":\"190781615918414\",\"team_id\":\"187156701640407\",\"organization_id\":\"9433177677643\",\"displayName\":\"test\"}",
	"instanceDetails": {
		"instanceId": 6144,
		"integrationId": "25",
		"userId": "Y2lzY29zcGFyazovL3VzL1BFT1BMRS8yYTA0YzVkMy0yNGJjLTQ1ZWItYmQzYS05ZDU1OGRmMmZhMjI",
		"updatedDate": "2016-10-06T07:08:33",
		"messageFormat": "Asana Bot",
		"createdDate": "2016-10-06T04:39:12",
		"status": "ACTIVE",
		"channelId": "Y2lzY29zcGFyazovL3VzL1JPT00vMjlmYzUzZTAtNjQ4MS0xMWU2LWE4NzctNmY2OGRjZjQ2YWFh",
		"configJson": "{\"notifications\":[\"created\",\"completed\",\"assigned\",\"subtask\",\"comment\",\"attachment\",\"duedate\",\"updated\"],\"project_id\":\"190781615918414\",\"team_id\":\"187156701640407\",\"organization_id\":\"9433177677643\",\"displayName\":\"test\"}",
		"instanceUuid": "699db8c0-8be3-11e6-8dd2-0e5b2e556333"
	}
}
]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="postFormatMessageFlow1" doc:name="Flow-ref to postFormatMessageFlow1"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-postIntegrationSettingsFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"integrationId" : "25",
	"userId":"Y2lzY29zcGFyazovL3VzL1BFT1BMRS8yYTA0YzVkMy0yNGJjLTQ1ZWItYmQzYS05ZDU1OGRmMmZhMjI"
}]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="postIntegrationSettingsFlow" doc:name="postIntegrationSettingsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-setupIntegrationFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"instanceId":"1993",
	"channelId": "Y2lzY2ZmRmMy0zZjRjLWJiM2MtZjZmY2U5Yzc5ODcy",
	"integrationId": "25",
	"status": "ACTIVE",
	"userId": "Y2lzY29zcGFyazovL3VzL1BFT1BMRS8yYTA0YzVkMy0yNGJjLTQ1ZWItYmQzYS05ZDU1OGRmMmZhMjI",
	"messageFormat": "asana Bot :Hello...User",
	"configJson": {
		"project_id": "187165222232966",
		"displayName": "asana DisplayName",
		"notifications":["eventCreation","eventChange","eventCancellation","eventResponse"]
	},
	"instanceUuid":"122782d0-58ab-11e6-9d7f-0a2b781e132f"
}]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="setupIntegrationFlow" doc:name="Flow-ref to setupIntegrationFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-tearDownIntegrationFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"instanceId":"1992",
	"channelId": "Y2lzY2ZmRmMy0zZjRjLWJiM2MtZjZmY2U5Yzc5ODcy",
	"integrationId": "25",
	"status": "ACTIVE",
	"userId": "Y2lzY29zcGFyazovL3VzL1BFT1BMRS8yYTA0YzVkMy0yNGJjLTQ1ZWItYmQzYS05ZDU1OGRmMmZhMjI",
	"messageFormat": "asana Bot :Hello...User",
	"configJson": {
		"project_id": "187165222232966",
		"displayName": "asana DisplayName",
		"webhook_id": 189269115635789,
		"notifications": ["eventCreation", "eventChange", "eventCancellation", "eventResponse"]
	},
	"instanceUuid":"jhbfgjhk455375"
}]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="tearDownIntegrationFlow" doc:name="tearDownIntegrationFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-updateIntegrationFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"instance_id":"1992",
	"channelId": "Y2lzY2ZmRmMy0zZjRjLWJiM2MtZjZmY2U5Yzc5ODcy",
	"integrationId": "25",
	"status": "ACTIVE",
	"userId": "Y2lzY29zcGFyazovL3VzL1BFT1BMRS8yYTA0YzVkMy0yNGJjLTQ1ZWItYmQzYS05ZDU1OGRmMmZhMjI",
	"messageFormat": "asana Bot :Hello...User",
	"configJson": {
		"project_id":"453684454412",
		"displayName": "asana DisplayName",
		"organization_id":"4563256695",
		"team_id":"5523698",
		"notifications":["eventCreation","eventChange","eventCancellation","eventResponse"]
	},
	"repo_modified":true,
	"repo_id_old" :"45234875356",
	"instanceUuid":"jhbfgjhk455375"
	
}]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="updateIntegrationFlow" doc:name="Flow-ref to updateIntegrationFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-coreServicesAlertsFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="client_id" value="${asana.integration.client.id}" doc:name="Set Client_id"/>
        <set-variable variableName="client_secret" value="${asana.integration.client.secret}" doc:name="Set Client_Secret"/>
        <flow-ref name="coreServicesAlertsFlow" doc:name="Flow-ref to coreServicesAlertsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-coreServicesLoggingFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="client_id" value="${asana.integration.client.id}" doc:name="Set Client_id"/>
        <set-variable variableName="client_secret" value="${asana.integration.client.secret}" doc:name="Set Client_Secret"/>
        <flow-ref name="coreServicesLoggingFlow" doc:name="Flow-ref to coreServicesLoggingFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-coreServicesTrackingFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="client_id" value="${asana.integration.client.id}" doc:name="Set Client_id"/>
        <set-variable variableName="client_secret" value="${asana.integration.client.secret}" doc:name="Set Client_Secret"/>
        <flow-ref name="coreServicesTrackingFlow" doc:name="Flow-ref to coreServicesTrackingFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-postasanaTokenFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "integrationId": 21,
  "authSettings": {
    "code": "0%2F800ce51c96bc0bcb88ffee953829ecdb"
  }
}]]></dw:set-payload>
        </dw:transform-message>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-variable variableName="tokenRequest"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
        </dw:transform-message>
        <flow-ref name="postasanaTokenFlow" doc:name="Flow-ref to postasanaTokenFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-postasanaRefreshTokenFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="refreshToken" value="#['0/433e0f053e26a7a4d6d48322ed97158b']" doc:name="Set Asana Refresh Token"/>
        <flow-ref name="postasanaRefreshTokenFlow" doc:name="Flow-ref to postasanaRefreshTokenFlow"/>
        <set-variable variableName="error" value="#[payload.error]" doc:name="Set Token"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-true message="Expected Refresh Token But Found #[payload]" condition="#[flowVars.error == empty]" doc:name="Assert True"/>
    </munit:test>
    <munit:test name="new-test-suite-getAsanaUserFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="asanaToken" value="#['eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpemF0aW9uIjoxODcxNjIyMjI2NTU0NjYsInNjb3BlIjoiIiwiaWF0IjoxNDc1ODY5MzAxLCJleHAiOjE0NzU4NzI5MDF9.EFPkRd0gardrTxzlX0FVkuyx3Yk5WH-sfZX5nlYwL7E']" doc:name="Set Asana Token"/>
        <flow-ref name="getAsanaUserFlow" doc:name="Flow-ref to getAsanaUserFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-getAsanaOrganizationsFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="asanaToken" value="#['eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpemF0aW9uIjoxODcxNjIyMjI2NTU0NjYsInNjb3BlIjoiIiwiaWF0IjoxNDc1ODY5MzAxLCJleHAiOjE0NzU4NzI5MDF9.EFPkRd0gardrTxzlX0FVkuyx3Yk5WH-sfZX5nlYwL7E']" doc:name="Set Asana Token"/>
        <flow-ref name="getAsanaOrganizationsFlow" doc:name="Flow-ref to getAsanaOrganizationsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-getAsanaTeamsInOrganizationsFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="workspaceId" value="9433177677643" doc:name="Set Workspace Id"/>
        <set-variable variableName="asanaToken" value="#['eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpemF0aW9uIjoxODcxNjIyMjI2NTU0NjYsInNjb3BlIjoiIiwiaWF0IjoxNDc1ODY5MzAxLCJleHAiOjE0NzU4NzI5MDF9.EFPkRd0gardrTxzlX0FVkuyx3Yk5WH-sfZX5nlYwL7E']" doc:name="Set Asana Token"/>
        <flow-ref name="getAsanaTeamsInOrganizationsFlow" doc:name="Flow-ref to getAsanaTeamsInOrganizationsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-getAsanaProjectsFlowTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="team_id" value="187156701640407" doc:name="Set Team Id"/>
        <set-variable variableName="asanaToken" value="#['eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpemF0aW9uIjoxODcxNjIyMjI2NTU0NjYsInNjb3BlIjoiIiwiaWF0IjoxNDc1NjIwNDExLCJleHAiOjE0NzU2MjQwMTF9.dkT-qKovKWPBXZ1q6Rt8bZCRevDcVRHQ0ctbvP-6ia0']" doc:name="Set Asana Token"/>
        <flow-ref name="getAsanaProjectsFlow" doc:name="Flow-ref to getAsanaProjectsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-statusDisableForAnInstanceTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="instanceId" value="1992" doc:name="Set InstanceId"/>
        <flow-ref name="statusDisableForAnInstance" doc:name="Flow-ref to statusDisableForAnInstance"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="new-test-suite-getTokenByChoiceConditionTest" description="Test">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="integrationId" value="asanaiidasanaiid" doc:name="Set Integration Id"/>
        <set-variable variableName="userId" value="" doc:name="Set User Id"/>
        <flow-ref name="getTokenByChoiceCondition" doc:name="Flow-ref to getTokenByChoiceCondition"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
</mule>
