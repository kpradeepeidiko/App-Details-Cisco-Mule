<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <munit:config doc:name="Munit configuration" mock-connectors="false" mock-inbounds="false"/>
    <spring:beans>
        <spring:import resource="classpath:asana-api-calls.xml"/>
        <spring:import resource="classpath:asana-integration.xml"/>
        <spring:import resource="classpath:integration-token-operations.xml"/>
        <spring:import resource="classpath:global.xml"/>
    </spring:beans>
    <munit:test name="asana-api-calls-test-suite-postasanaTokenFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "integrationId": 21,
  "authSettings": {
    "code": "0%2F800ce51c96bc0bcb88ffee953829ecdb"
  }
}]]></dw:set-payload>
        </dw:transform-message>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-variable variableName="tokenRequest"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
        </dw:transform-message>
        <flow-ref name="postasanaTokenFlow" doc:name="Flow-ref to postasanaTokenFlow"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>

        <munit:assert-not-null doc:name="Assert Not Null Payload"/>

    </munit:test>
    <munit:test name="asana-api-calls-test-suite-postasanaRefreshTokenFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>

        </mock:when>
        <set-variable variableName="refreshToken" value="#['0/433e0f053e26a7a4d6d48322ed97158b']" doc:name="Set Asana Refresh Token"/>
        <flow-ref name="postasanaRefreshTokenFlow" doc:name="Flow-ref to postasanaRefreshTokenFlow"/>
        <set-variable variableName="error" value="#[payload.error]" doc:name="Set Token"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-true message="Expected Refresh Token But Found #[payload]" condition="#[flowVars.error == empty]" doc:name="Assert True"/>
    </munit:test>
    <munit:test name="asana-api-calls-test-suite-getAsanaUserFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="asanaToken" value="#['eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpemF0aW9uIjoxODcxNjIyMjI2NTU0NjYsInNjb3BlIjoiIiwiaWF0IjoxNDc1NjIwNDExLCJleHAiOjE0NzU2MjQwMTF9.dkT-qKovKWPBXZ1q6Rt8bZCRevDcVRHQ0ctbvP-6ia0']" doc:name="Set Asana Token"/>
        <flow-ref name="getAsanaUserFlow" doc:name="Flow-ref to getAsanaUserFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="asana-api-calls-test-suite-getAsanaOrganizationsFlowTest" description="Test">
    	<mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="asanaToken" value="#['eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpemF0aW9uIjoxODcxNjIyMjI2NTU0NjYsInNjb3BlIjoiIiwiaWF0IjoxNDc1NjIwNDExLCJleHAiOjE0NzU2MjQwMTF9.dkT-qKovKWPBXZ1q6Rt8bZCRevDcVRHQ0ctbvP-6ia0']" doc:name="Set Asana Token"/>
        <flow-ref name="getAsanaOrganizationsFlow" doc:name="Flow-ref to getAsanaOrganizationsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="asana-api-calls-test-suite-getAsanaTeamsInOrganizationsFlowTest" description="Test">
    	<mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="workspaceId" value="9433177677643" doc:name="Set Workspace Id"/>
    	<set-variable variableName="asanaToken" value="#['eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpemF0aW9uIjoxODcxNjIyMjI2NTU0NjYsInNjb3BlIjoiIiwiaWF0IjoxNDc1NjIwNDExLCJleHAiOjE0NzU2MjQwMTF9.dkT-qKovKWPBXZ1q6Rt8bZCRevDcVRHQ0ctbvP-6ia0']" doc:name="Set Asana Token"/>
        <flow-ref name="getAsanaTeamsInOrganizationsFlow" doc:name="Flow-ref to getAsanaTeamsInOrganizationsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="asana-api-calls-test-suite-getAsanaProjectsFlowTest" description="Test">
    	<mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="team_id" value="187156701640407" doc:name="Set Team Id"/>
    	<set-variable variableName="asanaToken" value="#['eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpemF0aW9uIjoxODcxNjIyMjI2NTU0NjYsInNjb3BlIjoiIiwiaWF0IjoxNDc1NjIwNDExLCJleHAiOjE0NzU2MjQwMTF9.dkT-qKovKWPBXZ1q6Rt8bZCRevDcVRHQ0ctbvP-6ia0']" doc:name="Set Asana Token"/>
        <flow-ref name="getAsanaProjectsFlow" doc:name="Flow-ref to getAsanaProjectsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="asana-api-calls-test-suite-statusDisableForAnInstanceTest" description="Test">
    	<mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="instanceId" value="1992" doc:name="Set InstanceId"/>
        <flow-ref name="statusDisableForAnInstance" doc:name="Flow-ref to statusDisableForAnInstance"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="asana-api-calls-test-suite-getTokenByChoiceConditionTest" description="Test">
    	<mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="integrationId" value="asanaiid" doc:name="Set Integration Id"/>
        <set-variable variableName="userId" value="asanauid" doc:name="Set User Id"/>
        <flow-ref name="getTokenByChoiceCondition" doc:name="Flow-ref to getTokenByChoiceCondition"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="asana-api-calls-test-suite-deleteasanaHookFlowTest" description="Test">
    	<mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="webhook_id" value="49834617086025" doc:name="Set Webhook_id"/>
        <set-variable variableName="token" value="#['eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpemF0aW9uIjoxODcxNjIyMjI2NTU0NjYsInNjb3BlIjoiIiwiaWF0IjoxNDc1NjIxMDM2LCJleHAiOjE0NzU2MjQ2MzZ9.XG_kMezPZ7TUpjh9GWNWoL568mbtn_S0A-HKLP0a7eI']" doc:name="Set Asana Token"/>
        <flow-ref name="deleteasanaHookFlow" doc:name="deleteasanaHookFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
</mule>
