<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:CiscoSpark="http://www.mulesoft.org/schema/mule/CiscoSpark"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/CiscoSpark http://www.mulesoft.org/schema/mule/CiscoSpark/current/mule-CiscoSpark.xsd">
	<http:request-config name="HTTP_Request_mangmt_webhook"
		protocol="HTTPS" host="cisco-spark-integration-management-new-dev.cloudhub.io"
		port="443" basePath="api" doc:name="HTTP Request Configuration" />
	<flow name="getMessageformatFlow">
		<dw:transform-message doc:name="Get Webhook Response">
			<dw:input-payload doc:sample="sample_data\json.json" />
			<dw:set-variable variableName="webhookResponse"
				resource="classpath:dwScripts/buildPostHooksRequest.dwl" />
		</dw:transform-message>
		<logger message="Request Payload #[message.payloadAs(java.lang.String)]"
			level="DEBUG" doc:name="Logger" />

		<set-variable variableName="status" value="ACTIVE"
			doc:name="Set Status" />
		<enricher target="#[flowVars['integrationsInstanceResponse']]"
			doc:name="Integrations Instance Response">
			<flow-ref name="getIntegrationsInstancesByUuidFlow"
				doc:name="getIntegrationsInstancesByUuidFlow" />
		</enricher>
		<choice doc:name="Choice">
			<when
				expression="#[flowVars.integrationsInstanceResponse.toString() !='{message=No results}']">
				<logger
					message="Integration Instance by UUID #[flowVars['integrationsInstanceResponse']] and #[flowVars['integrationsInstanceResponse'][0]['configJson']]"
					level="INFO" doc:name="Logger" />
				<set-variable variableName="integrationId"
					value="#[flowVars['integrationsInstanceResponse'][0]['integrationId']]"
					doc:name="Set Integration ID" />
				<set-variable variableName="configJson"
					value="#[flowVars['integrationsInstanceResponse'][0]['configJson']]"
					mimeType="application/json" doc:name="Set ConfigJosn value" />
				<dw:transform-message doc:name="Transform Message">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
flowVars.configJson]]></dw:set-payload>
				</dw:transform-message>
				<set-variable variableName="privateMessage"
					value="#[payload['private_message']]" doc:name="Set Private Messge or not" />
				<logger
					message="#[flowVars.configJson] AND  PRIVAEMESSAGE #[flowVars.privateMessage]"
					level="INFO" doc:name="Logger" />
				<choice doc:name="Check Integration Status">
					<when expression="#[flowVars['integrationId'] != empty]">
						<enricher target="#[flowVars['integrationSettings']]"
							doc:name="Integration Settings">
							<flow-ref name="getIntegrationSettingsFlow" doc:name="getIntegrationSettingsFlow" />
						</enricher>
						<choice doc:name="Choice">
							<when
								expression="#[flowVars.integrationSettings.toString() != '{message=No results}']">
								<enricher target="#[flowVars['formattedMessage']]"
									doc:name="Message Enricher">
									<flow-ref name="invokeDynamicMessageFormatFlow"
										doc:name="invokeDynamicMessageFormatFlow" />
								</enricher>
								<logger
									message="Dynamic Flow Response = #[flowVars['formattedMessage']] "
									level="INFO" doc:name="Logger" />
								<set-variable variableName="userId"
									value="#[flowVars['integrationsInstanceResponse'][0]['userId']]"
									doc:name="Get User Id" />
								<set-variable variableName="integrationId"
									value="#[flowVars['integrationsInstanceResponse'][0]['integrationId']]"
									doc:name="Get Integration Id" />
								<set-variable variableName="roomId"
									value="#[flowVars['integrationsInstanceResponse'][0]['channelId']]"
									doc:name="Get Room Id" />
								<choice doc:name="Choice to get Bot or Integration Token">
									<when expression="#[flowVars.privateMessage == 'true']">
										<logger message="Posting Message Using Bot token!!"
											level="INFO" doc:name="Logger" />
										<enricher target="#[flowVars['getClientTokenResponse']]"
											doc:name="Message Enricher">
											<flow-ref name="getBotClientTokenFlow" doc:name="getBotClientTokenFlow" />
										</enricher>
									</when>
									<otherwise>
										<logger message="Posting Message Using Integration token!!"
											level="INFO" doc:name="Logger" />
										<remove-variable variableName="privateMessage"
											doc:name="Remove privateMessage" />
										<enricher target="#[flowVars['getClientTokenResponse']]"
											doc:name="Message Enricher">
											<flow-ref name="getClientTokenFlow" doc:name="getClientTokenFlow" />
										</enricher>
									</otherwise>
								</choice>
								<choice doc:name="Choice">
									<when
										expression="#[flowVars.getClientTokenResponse.toString() != '{message=No results}']">
										<set-variable variableName="sparkToken"
											value="#[flowVars['getClientTokenResponse'][0]['accessToken']]"
											doc:name="sparkToken" />
										<logger
											message="TOKEN #[flowVars.sparkToken] and Private Message #[flowVars.privateMessage]"
											level="INFO" doc:name="Logger" />
										<choice doc:name="Choice">
											<when
												expression="#[flowVars['formattedMessage']['formatMessage'] != []]">
												<foreach collection="#[flowVars.formattedMessage.formatMessage]"
													doc:name="Loop Formatted Message">
													<choice doc:name="Check All Values Null">
														<when
															expression="#[(payload['markDown'] !=null) || (payload['text'] !=null) || (payload['html'] !=null)]">
															<choice doc:name="Choice to post form Bot or Integration Token">
																<when expression="#[flowVars.privateMessage == 'true']">
																	<logger message="Posting Message with Bot token!!"
																		level="INFO" doc:name="Logger" />
																	<choice doc:name="Check Html For Twitter">
																		<when expression="#[payload['html'] == null]">
																			<CiscoSpark:post-messages
																				config-ref="CiscoSpark__Configuration" token="Bearer #[flowVars['sparkToken']]"
																				doc:name="CiscoSpark">
																				<CiscoSpark:messages-post-request
																					text="#[payload['text']]" toPersonId="#[flowVars['roomId']]"
																					markdown="#[payload['markDown']]" html="#[payload['html']]" />
																			</CiscoSpark:post-messages>
																		</when>
																		<otherwise>
																			<CiscoSpark:post-messages
																				config-ref="CiscoSpark__Configuration" token="Bearer #[flowVars['sparkToken']]"
																				doc:name="CiscoSparkMedia">
																				<CiscoSpark:messages-post-request
																					text="#[payload['text']]" toPersonId="#[flowVars['roomId']]"
																					markdown="#[payload['markDown']]" files="#[payload['html']]" />
																			</CiscoSpark:post-messages>
																		</otherwise>
																	</choice>
																</when>
																<otherwise>
																	<logger message="Posting Message with Integration token!!"
																		level="INFO" doc:name="Logger" />
																	<choice doc:name="Check Html For Twitter">
																		<when expression="#[payload['html'] == null]">
																			<CiscoSpark:post-messages
																				config-ref="CiscoSpark__Configuration" token="Bearer #[flowVars['sparkToken']]"
																				doc:name="CiscoSpark">
																				<CiscoSpark:messages-post-request
																					roomId="#[flowVars['roomId']]" text="#[payload['text']]"
																					markdown="#[payload['markDown']]" html="#[payload['html']]" />
																			</CiscoSpark:post-messages>
																		</when>
																		<otherwise>
																			<CiscoSpark:post-messages
																				config-ref="CiscoSpark__Configuration" token="Bearer #[flowVars['sparkToken']]"
																				doc:name="CiscoSparkMedia">
																				<CiscoSpark:messages-post-request
																					roomId="#[flowVars['roomId']]" text="#[payload['text']]"
																					markdown="#[payload['markDown']]" files="#[payload['html']]" />
																			</CiscoSpark:post-messages>
																		</otherwise>
																	</choice>
																</otherwise>
															</choice>

															<async doc:name="Async">
																<set-variable variableName="trackingId"
																	value="#[payload.trackingID]" doc:name="Set Traking Id" />
																<set-variable variableName="statusCode"
																	value="#[payload.statusCode]" doc:name="Set Status Code" />
																<set-variable variableName="statusMessage"
																	value="#[payload.statusMessage]" doc:name="Set Status Message" />
																<flow-ref name="trackingDetailsFlow" doc:name="trackingDetailsFlow" />
															</async>
														</when>
														<otherwise>
															<logger
																message="all null from spec_flow == #[payload['markDown']] || #[payload['text']] !=null || #[payload['html']]"
																level="INFO" doc:name="Logger" />
														</otherwise>
													</choice>
												</foreach>
											</when>
											<otherwise>
												<logger
													message="post_webhook formatMsg ==&gt; #[flowVars['formattedMessage']['formatMessage']]"
													level="INFO" doc:name="Logger" />
											</otherwise>
										</choice>
									</when>
									<otherwise>
										<dw:transform-message doc:name="Transform Message">
											<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"clientTokenResponse": flowVars.getClientTokenResponse
}]]></dw:set-payload>
										</dw:transform-message>
										<logger message="NO TOKEN FOUND" level="INFO" doc:name="Logger" />
									</otherwise>
								</choice>
							</when>
							<otherwise>
								<dw:transform-message doc:name="Transform Message">
									<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"settingsResponse": flowVars.integrationSettings
}]]></dw:set-payload>
								</dw:transform-message>
							</otherwise>
						</choice>
					</when>
					<otherwise>
						<dw:transform-message doc:name="Transform Message">
							<dw:set-payload
								resource="classpath:dwScripts/buildPostHookFailsResponse.dwl" />
						</dw:transform-message>

					</otherwise>
				</choice>
			</when>
			<otherwise>
				<dw:transform-message doc:name="Transform Message">
					<dw:set-payload
						resource="classpath:dwScripts/buildPostHookFailsResponse.dwl" />
				</dw:transform-message>
				<logger message="No Instance Found!!" level="INFO" doc:name="Logger" />
			</otherwise>
		</choice>





	</flow>
	<flow name="getIntegrationsInstancesByUuidFlow">
		<http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration"
			path="/integrations/instances" method="GET" doc:name="Get Integration Instance">
			<http:request-builder>
				<http:query-param paramName="status" value="#[flowVars['status']]" />
				<http:query-param paramName="instanceUuid"
					value="#[flowVars['instanceUuid']]" />

			</http:request-builder>
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>
		<dw:transform-message doc:name="Transform Response to Json">
			<dw:set-payload
				resource="classpath:dwScripts/buildPostIntegrationsInstancesFromInstanceUuid.dwl" />
		</dw:transform-message>
	</flow>
	<flow name="everNoteWebhookFlow">
		<set-variable variableName="userId"
			value="#[message.inboundProperties.'http.query.params'.userId]"
			doc:name="Set Evernote userId" />
		<expression-component doc:name="Expression"><![CDATA[flowVars.userId=flowVars.userId.toString().replace('[','');
flowVars.userId=flowVars.userId.toString().replace(']','');]]></expression-component>
		<set-variable variableName="guid"
			value="#[message.inboundProperties.'http.query.params'.guid]"
			doc:name="Set Evernote guid" />
		<choice doc:name="Choice">
			<when expression="#[flowVars.guid != empty]">
				<expression-component doc:name="Expression"><![CDATA[flowVars.guid=flowVars.guid.toString().replace('[','');
flowVars.guid=flowVars.guid.toString().replace(']','');]]></expression-component>
			</when>
			<otherwise>
				<logger message="guid = #[flowVars.guid]" level="INFO"
					doc:name="Logger" />
			</otherwise>
		</choice>
		<set-variable variableName="notebookGuid"
			value="#[message.inboundProperties.'http.query.params'.notebookGuid]"
			doc:name="Set Evernote notebookGuid" />
		<expression-component doc:name="Expression"><![CDATA[flowVars.notebookGuid=flowVars.notebookGuid.toString().replace('[','');
flowVars.notebookGuid=flowVars.notebookGuid.toString().replace(']','');]]></expression-component>
		<set-variable variableName="reason"
			value="#[message.inboundProperties.'http.query.params'.reason]"
			doc:name="Set Evernote reason" />
		<expression-component doc:name="Expression"><![CDATA[flowVars.reason=flowVars.reason.toString().replace('[','');
flowVars.reason=flowVars.reason.toString().replace(']','');]]></expression-component>
		<logger
			message="user_id = #[flowVars.userId]++++++guid = #[flowVars.guid]++++ notebook = #[flowVars.notebookGuid] ++++++reason = #[flowVars.reason]++++++++"
			level="INFO" doc:name="Logger" />
		<http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration"
			path="/evernote/settings/{evernoteUserId}" method="GET"
			doc:name="Get Evernote Settings ">
			<http:request-builder>
				<http:uri-param paramName="evernoteUserId" value="#[flowVars['userId']]" />
			</http:request-builder>
		</http:request>
		<dw:transform-message doc:name="Transform Message">
			<dw:set-variable variableName="evernoteSettingsResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
		</dw:transform-message>
		<choice doc:name="Choice">
			<when
				expression="#[flowVars['evernoteSettingsResponse'].toString() != '{message=No Result Found}']">
				<foreach collection="#[flowVars['evernoteSettingsResponse']]"
					doc:name="Loop All Evernote Instances">
					<set-variable variableName="instanceUuid" value="#[payload.instanceUuid]"
						doc:name="Set instanceUuid" />

					<set-payload doc:name="Set Payload"
						value="#[{&quot;guid&quot;:flowVars['guid'],&quot;notebookGuid&quot;:flowVars['notebookGuid'],&quot;reason&quot;:flowVars['reason'],&quot;userId&quot;:flowVars['userId']}]" />
					<http:request config-ref="HTTP_Request_mangmt_webhook"
						path="/hooks/{instanceUuid}" method="POST" doc:name="Hit Management Flow">
						<http:request-builder>
							<http:uri-param paramName="instanceUuid"
								value="#[flowVars['instanceUuid']]" />
						</http:request-builder>
					</http:request>
				</foreach>
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger"
					message="get by evernote userId == #[flowVars.evernoteSettingsResponse]" />
			</otherwise>
		</choice>
		<catch-exception-strategy doc:name="Catch Exception Strategy">
			<set-variable variableName="exception" value="#[exception.message]"
				doc:name="exception" />
			<logger
				message="exception in Evernote webhook Flow +++++  #[flowVars.exception]  +++++++++++++"
				level="INFO" doc:name="Logger" />

		</catch-exception-strategy>
	</flow>
	<flow name="invokeDynamicMessageFormatFlow">
		<set-variable variableName="dynamicHost"
			value="#[flowVars['integrationSettings']['host']]" doc:name="Dynamic Host" />
		<set-variable variableName="dynamicPort"
			value="#[flowVars['integrationSettings']['port']]" doc:name="Dyanmic Port" />
		<set-variable variableName="dynamicBasePath"
			value="#[flowVars['integrationSettings']['basePath']]" doc:name="Dynamic Base Path" />
		<dw:transform-message doc:name="Transform Response to Json">
			<dw:set-payload
				resource="classpath:dwScripts/buildPostHookResponseToDynamicHost.dwl" />
		</dw:transform-message>
		<http:request config-ref="HTTP_Dynamic_Request_Configuration"
			path="/formatMessage" method="POST" doc:name="HTTP">
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>
		<logger
			message="post_webhook = msgFortm response from specific #[message.payloadAs(java.lang.String)]"
			level="INFO" doc:name="Logger" />
		<dw:transform-message doc:name="Transform Response to Java">
			<dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl" />
		</dw:transform-message>
	</flow>
</mule>
