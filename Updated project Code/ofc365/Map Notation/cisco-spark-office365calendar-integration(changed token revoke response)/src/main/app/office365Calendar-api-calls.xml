<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">

	<http:request-config name="HTTP_Access_Token_Request_Configuration"
		protocol="HTTPS" host="${office365Calendar.api.access.token.host}"
		port="${office365Calendar.api.access.token.port}" doc:name="HTTP Request Configuration"
		basePath="${office365Calendar.api.access.token.base.path}" responseTimeout="400000"/>

	<http:request-config name="HTTP_Operations_Request_Configuration"
		protocol="HTTPS" host="${office365Calendar.api.operations.host}" port="${office365Calendar.api.operations.port}"
		basePath="${office365Calendar.api.operations.base.path}" doc:name="HTTP Request Configuration" responseTimeout="4000000"/>
	<vm:connector name="VM1" validateConnections="true"
		doc:name="VM" />

	<flow name="postoffice365CalendarTokenFlow">
		<set-payload
			value="#[{&quot;code&quot;:flowVars.tokenRequest.authSettings.code,&quot;client_id&quot;:&quot;${office365Calendar.integration.client.id}&quot;,&quot;client_secret&quot;:&quot;${office365Calendar.integration.client.secret}&quot;,&quot;redirect_uri&quot;:&quot;${office365Calendar.integration.redirecr.uri}&quot;,&quot;grant_type&quot;:&quot;${office365Calendar.integration.grantType}&quot;,&quot;scope&quot;:&quot;${office365Calendar.integration.scopes}&quot;}]"
			doc:name="Set Payload" />
		<http:request config-ref="HTTP_Access_Token_Request_Configuration"
			path="${office365Calendar.api.access.token.path}" method="POST"
			doc:name="Access Token Request">
			<http:request-builder>
				<http:header headerName="Content-Type"
					value="application/x-www-form-urlencoded" />
			</http:request-builder>
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>
		<dw:transform-message doc:name="Transform Response to Json">
			<dw:set-payload resource="classpath:dwScripts/fromPayloadToJson.dwl" />
		</dw:transform-message>
	</flow>
	<flow name="postoffice365CalendarRefreshTokenFlow">
		<set-payload
			value="#[{&quot;refresh_token&quot;:flowVars['refreshToken'],&quot;client_id&quot;:&quot;${office365Calendar.integration.client.id}&quot;,&quot;client_secret&quot;:&quot;${office365Calendar.integration.client.secret}&quot;,&quot;redirect_uri&quot;:&quot;${office365Calendar.integration.redirecr.uri}&quot;,&quot;grant_type&quot;:&quot;${office365Calendar.integration.refresh.grantType}&quot;,&quot;scope&quot;:&quot;${office365Calendar.integration.scopes}&quot;}]"
			doc:name="Set Payload" />
		<http:request config-ref="HTTP_Access_Token_Request_Configuration"
			path="${office365Calendar.api.access.token.path}" method="POST"
			doc:name="Refresh Token Request">
			<http:request-builder>
				<http:header headerName="Content-Type"
					value="application/x-www-form-urlencoded" />
			</http:request-builder>
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>
		<dw:transform-message doc:name="Transform Message To Java">
			<dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl" />
		</dw:transform-message>
	</flow>
	<flow name="statusDisableForAnInstance">
		<dw:transform-message doc:name="Transform Message">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "status": "DISABLED"
}]]></dw:set-payload>
		</dw:transform-message>
		<logger
			message="status Disable = #[message.payloadAs(java.lang.String)]::::::::::::::::#[flowVars['instanceId']]"
			level="INFO" doc:name="Logger" />
		<http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration"
			path="/integrations/instances/{instanceId}" method="PUT"
			doc:name="Disable The Status for the instance">
			<http:request-builder>
				<http:uri-param paramName="instanceId" value="#[flowVars['instanceId']]" />
			</http:request-builder>
		</http:request>
	</flow>
	<flow name="getoffice365CalendarsListFlow">
		<http:request config-ref="HTTP_Operations_Request_Configuration"
			path="/me/calendars" method="GET" doc:name="Get Calenders List">
			<http:request-builder>
				<http:header headerName="Authorization" value="Bearer #[flowVars['token']]" />
			</http:request-builder>
		</http:request>
		<dw:transform-message doc:name="Transform Response to Java">
			<dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl" />
		</dw:transform-message>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy
				when="exception.causedBy(org.mule.module.http.internal.request.ResponseValidatorException)"
				doc:name="Catch Exception Strategy">
				<set-property propertyName="http.status" value="#[400]"
					doc:name="400" />
                <logger message="message from API getCalList = #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
                </dw:transform-message>
			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>
	<flow name="getOffice365CalendarUesrFlow">
		<http:request config-ref="HTTP_Operations_Request_Configuration"
			path="/me" method="GET" doc:name="Get Calendar User">
			<http:request-builder>
                <http:header headerName="Authorization" value="Bearer #[flowVars['token']]"/>
			</http:request-builder>
		</http:request>
		<dw:transform-message doc:name="Transform Message">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
		</dw:transform-message>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy
				when="exception.causedBy(org.mule.module.http.internal.request.ResponseValidatorException)"
				doc:name="Catch Exception Strategy">
				<set-property propertyName="http.status" value="#[400]"
					doc:name="400" />
                <logger message="message from API getUserList = #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
                </dw:transform-message>
			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>
	<flow name="getTokenByChoiceCondition">
		<logger
			message="getTokenByChoice  intgrnId=#[flowVars['integrationId']]+++++++++++++++userId=#[flowVars['userId']]"
			level="INFO" doc:name="Logger" />
		<choice doc:name="Choice">
			<when
				expression="#[flowVars['integrationId'] != null &amp;&amp; flowVars['userId'] != null]">
				<enricher target="#[flowVars['integrationTokenResponse']]"
					doc:name="Message Enricher">
					<flow-ref name="getIntegrationTokenFlow" doc:name="getIntegrationTokenFlow" />
				</enricher>
				<choice doc:name="Check Token Result">
					<when
						expression="#[flowVars['integrationTokenResponse'].toString() != '{message=No results}']">
						<choice doc:name="Check Refresh Empty">
							<when
								expression="#[flowVars['integrationTokenResponse'][0]['refreshToken'] != null]">
								<set-variable variableName="refreshToken"
									value="#[flowVars['integrationTokenResponse'][0]['refreshToken']]"
									doc:name="Set Refresh Token" />
								<enricher target="#[flowVars['refreshTokenResponse']]"
									doc:name="Message Enricher">
									<flow-ref name="postoffice365CalendarRefreshTokenFlow"
										doc:name="postoffice365CalendarRefreshTokenFlow" />
								</enricher>
								<choice doc:name="Choice">
									<when
										expression="#[flowVars['refreshTokenResponse'].toString() != '{error=invalid_grant, error_description=Bad Request}']">
										<set-variable variableName="token"
											value="#[flowVars['refreshTokenResponse']['access_token']]"
											doc:name="Set Token" />
										<dw:transform-message doc:name="Build Tear Down Integration Response">
											<dw:set-payload
												resource="classpath:dwScripts/buildTokenFlowReponse.dwl" />
										</dw:transform-message>
									</when>
									<otherwise>
										<dw:transform-message doc:name="Transform Message">
											<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	"message":"Generate Token By Refresh Token Failed in tearDown Flow"
}]]></dw:set-payload>
										</dw:transform-message>
									</otherwise>
								</choice>
							</when>
							<otherwise>
								<dw:transform-message doc:name="Transform Message">
									<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	"message":"Found Refresh Token Empty In Tear Down Flow"
}]]></dw:set-payload>
								</dw:transform-message>
							</otherwise>
						</choice>
					</when>
					<otherwise>
						<dw:transform-message doc:name="Transform Message">
							<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"message":"Found Token Result Empty In tearDown Flow"
}]]></dw:set-payload>
						</dw:transform-message>
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<dw:transform-message doc:name="Transform Message">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	"message": "Found UserId or IntegrationId empty In tearDown Flow"
}]]></dw:set-payload>
				</dw:transform-message>
			</otherwise>
		</choice>
	</flow>


	<flow name="startO365CalendarPollingFlow">
		<http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration"
			path="/integrations/instances" method="GET" doc:name="Get By Integration Id">
			<http:request-builder>
				<http:query-param paramName="integrationId"
					value="${office365Calendar.integration.id}" />
				<http:query-param paramName="status" value="ACTIVE" />



			</http:request-builder>
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>
		<dw:transform-message doc:name="Transform Message">
			<dw:set-variable variableName="instancesPayload"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
		</dw:transform-message>
		<choice doc:name="Choice">
			<when
				expression="#[flowVars['instancesPayload'].toString() != '{message=No results}']">
				<set-session-variable variableName="maap"
					value="#[new java.util.HashMap()]" doc:name="Set Maap" />
				<foreach collection="#[flowVars['instancesPayload']]"
					doc:name="Loop All Instances And Add UserIds,InstanceUuids To Maap">
					<choice doc:name="Check UserId Exists">
						<when expression="#[maap.containsKey(payload['userId'])]">
							<expression-component doc:name="Expression To Append Element"><![CDATA[maap.get(payload['userId']).add(payload['instanceUuid'])]]></expression-component>
						</when>
						<otherwise>
							<set-variable variableName="uuidList"
								value="#[new java.util.ArrayList()]" doc:name="Create UUID List" />
							<expression-component doc:name="Expression To Add First Element"><![CDATA[uuidList.add(payload['instanceUuid']);
maap.put(payload['userId'],uuidList)]]></expression-component>
						</otherwise>
					</choice>
				</foreach>
				<set-variable variableName="userIdSet"
					value="#[sessionVars.maap.keySet()]" doc:name="Set UserId Set" />
				<set-variable variableName="userIds"
					value="#[new java.util.ArrayList()]" doc:name="UseId List" />
				<expression-component doc:name="Expression Set to List"><![CDATA[userIds.addAll(flowVars['userIdSet']);]]></expression-component>
				<logger
					message="MapResult=#[sessionVars['maap']]==&gt;userIdArray=#[flowVars['userIds']]"
					level="DEBUG" doc:name="Logger" />
				<foreach collection="#[flowVars['userIds']]" doc:name="Loop All User Ids">
					<set-session-variable variableName="userId"
						value="#[payload]" doc:name="Set UserId" />
					<choice doc:name="Choice">
						<when expression="#[sessionVars['userId'] != empty]">
							<vm:outbound-endpoint exchange-pattern="one-way"
								path="ATPT-flow" connector-ref="VM1" doc:name="AccessToken and PageToken" />
						</when>
						<otherwise>
							<logger level="INFO" doc:name="Logger" message="UserId Null In go To VM" />
						</otherwise>
					</choice>
				</foreach>
			</when>
			<otherwise>
				<logger message="get by integrationId = #[flowVars['instancesPayload']]"
					level="INFO" doc:name="Logger" />
			</otherwise>
		</choice>


	</flow>


	<flow name="AccessTokenAndPageTokenFlow">
		<vm:inbound-endpoint exchange-pattern="one-way"
			path="ATPT-flow" connector-ref="VM1" doc:name="AccessToken and PageToken" />
		<logger
			message="VM payload=#[payload] ::::::::::::::::userId=#[sessionVars['userId']]==&gt;#[sessionVars.maap.get(sessionVars.userId)]"
			level="DEBUG" doc:name="Logger" />
		<http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration"
			path="/integrations/{integrationId}/appTokens" method="GET"
			doc:name="Get O365 Access Token">
			<http:request-builder>
				<http:query-param paramName="client_id"
					value="${runtime.clientidenforcement.id}" />
				<http:query-param paramName="client_secret"
					value="${runtime.clientidenforcement.secret}" />
				<http:query-param paramName="userId"
					value="#[sessionVars['userId']]" />
				<http:uri-param paramName="integrationId"
					value="${office365Calendar.integration.id}" />

			</http:request-builder>
			<http:failure-status-code-validator
				values="500..599" />
		</http:request>
		<dw:transform-message doc:name="Transform Message To Java">
			<dw:set-variable variableName="integrationTokenResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
		</dw:transform-message>
		<logger
			message="token payload of zero =  #[flowVars['integrationTokenResponse'][0]]"
			level="DEBUG" doc:name="Logger" />

		<choice doc:name="Token Response">
			<when
				expression="#[flowVars.integrationTokenResponse.toString()=='{message=No results}']">
				<logger level="INFO" doc:name="Logger"
					message="token Response = No Results in Polling" />
			</when>
			<otherwise>
				<choice doc:name="Check Refresh Token">
					<when
						expression="#[flowVars['integrationTokenResponse'][0]['refreshToken'] != null]">
						<set-variable variableName="serverTime"
							value="#[(new org.mule.el.datetime.DateTime(server.dateTime)).plusSeconds(300)]"
							doc:name="ServerTime" />
						<set-variable variableName="dbexpire"
							value="#[(new org.mule.el.datetime.DateTime(flowVars['integrationTokenResponse'][0]['expires']))]"
							doc:name="Db Expire" />
						<choice doc:name="Check Access Token Expires">
							<when expression="#[flowVars.serverTime.isAfter(flowVars.dbexpire)]">
								<set-variable variableName="refreshToken"
									value="#[flowVars['integrationTokenResponse'][0]['refreshToken']]"
									doc:name="Set Refresh Token" />
								<set-payload
									value="#[{&quot;refresh_token&quot;:flowVars['refreshToken'],&quot;client_id&quot;:&quot;${office365Calendar.integration.client.id}&quot;,&quot;client_secret&quot;:&quot;${office365Calendar.integration.client.secret}&quot;,&quot;redirect_uri&quot;:&quot;${office365Calendar.integration.redirecr.uri}&quot;,&quot;grant_type&quot;:&quot;${office365Calendar.integration.refresh.grantType}&quot;,&quot;scope&quot;:&quot;${office365Calendar.integration.scopes}&quot;}]"
									doc:name="Refresh Token Body" />
								<logger
									message="#[{&quot;refresh_token&quot;:flowVars['refreshToken'],&quot;client_id&quot;:&quot;${office365Calendar.integration.client.id}&quot;,&quot;client_secret&quot;:&quot;${office365Calendar.integration.client.secret}&quot;,&quot;redirect_uri&quot;:&quot;${office365Calendar.integration.redirecr.uri}&quot;,&quot;grant_type&quot;:&quot;${office365Calendar.integration.grantType}&quot;,&quot;scope&quot;:&quot;${office365Calendar.integration.scopes}&quot;}]"
									level="DEBUG" doc:name="Logger" />
								<http:request config-ref="HTTP_Access_Token_Request_Configuration"
									path="${office365Calendar.api.access.token.path}" method="POST"
									doc:name="GET O365 Access Token">
									<http:request-builder>
										<http:header headerName="Content-Type"
											value="application/x-www-form-urlencoded" />
									</http:request-builder>
									<http:failure-status-code-validator
										values="500..599" />
								</http:request>
								<logger message="#[message.payloadAs(java.lang.String)]"
									level="DEBUG" doc:name="Logger" />
								<dw:transform-message doc:name="Transform Message To Java">
									<dw:set-variable variableName="refreshTokenResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
								</dw:transform-message>
								<set-variable variableName="expires_in"
									value="#[flowVars['refreshTokenResponse']['expires_in']]"
									doc:name="Set expires_in" />
								<set-variable variableName="GCAccessToken"
									value="#[flowVars['refreshTokenResponse']['access_token']]"
									doc:name="Set AccessToken" />
								<choice doc:name="Check For Revoke Access Token">
									<when
										expression="#[flowVars['expires_in'] != null &amp;&amp; flowVars['GCAccessToken'] != null]">
										<dw:transform-message doc:name="Prepare Json Body">
											<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "accessToken": flowVars['GCAccessToken'],
  "expires": flowVars['expires_in']
}]]></dw:set-payload>
										</dw:transform-message>
										<logger
											message="put Access Token payload==&gt; RTR=#[flowVars['refreshTokenResponse']] #[flowVars['expires_in']]==#[flowVars['refreshTokenResponse']['expires_in']]++++++++#[flowVars['GDAccessToken']]==#[flowVars['refreshTokenResponse']['access_token']] payload as body = #[message.payloadAs(java.lang.String)] :::::::::::::::: tokenId=#[flowVars['integrationTokenResponse'][0]['tokenId']]:::::::::: intgrId=${office365Calendar.integration.id}"
											level="DEBUG" doc:name="Logger" />
										<http:request
											config-ref="HTTP_Integrations_Runtime_Request_Configuration"
											path="/integrations/{integrationId}/appTokens/{appTokenId}"
											method="PUT" doc:name="Put Access Token">
											<http:request-builder>
												<http:query-param paramName="client_id"
													value="${runtime.clientidenforcement.id}" />
												<http:query-param paramName="client_secret"
													value="${runtime.clientidenforcement.secret}" />
												<http:uri-param paramName="integrationId"
													value="${office365Calendar.integration.id}" />
												<http:uri-param paramName="appTokenId"
													value="#[flowVars['integrationTokenResponse'][0]['tokenId']]" />
												<http:header headerName="Content-Type" value="application/json" />



											</http:request-builder>
											<http:failure-status-code-validator
												values="500..599" />
										</http:request>
									</when>
									<otherwise>
										<logger level="INFO" doc:name="Logger"
											message="Refresh Token Not success For useId=#[sessionVars['userId']]==&gt;tokenId=#[flowVars['integrationTokenResponse'][0]['tokenId']]" />
									</otherwise>
								</choice>
							</when>
							<otherwise>
								<set-variable variableName="GCAccessToken"
									value="#[flowVars['integrationTokenResponse'][0]['accessToken']]"
									doc:name="AccessToken" />
							</otherwise>
						</choice>
						<http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration"
							path="/office365/settings/{userId}" method="GET"
							doc:name="Get User Last Time From DB">
							<http:request-builder>
								<http:uri-param paramName="userId"
									value="#[sessionVars['userId']]" />
							</http:request-builder>
						</http:request>
						<dw:transform-message doc:name="Transform Message">
							<dw:set-variable variableName="userTimingsResponse"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
						</dw:transform-message>
						<choice doc:name="Choice">
							<when
								expression="#[flowVars['userTimingsResponse'].toString() != '{message=No Result Found}']">
								<logger
									message="DB Time = #[flowVars['userTimingsResponse'][0]['cursorTime']] +++++ org = #[(new org.mule.el.datetime.DateTime(flowVars['userTimingsResponse'][0]['cursorTime']))]"
									level="INFO" doc:name="Logger" />
								<set-variable variableName="forCrUpServerTimeMinusPollingTime"
									value="#[(new org.mule.el.datetime.DateTime(flowVars['userTimingsResponse'][0]['cursorTime']))]"
									doc:name="Set User Time From DB" />
								<set-variable variableName="time1"
									value="#[server.dateTime.changeTimeZone('UTC')]" doc:name="Set Server Time" />
								<expression-component doc:name="Remove 'Z'"><![CDATA[flowVars['time2'] = flowVars['time1'].toString().split('Z')[0]]]></expression-component>
								<dw:transform-message doc:name="Store DateTime  For User in DB">
									<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"userId":sessionVars['userId'],
	"cursorTime":flowVars['time2']
}]]></dw:set-payload>
								</dw:transform-message>
								<http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration"
									path="/office365/settings/{userId}" method="PUT"
									doc:name="Put Lates Time In DB">
									<http:request-builder>
										<http:uri-param paramName="userId"
											value="#[sessionVars['userId']]" />
									</http:request-builder>
								</http:request>
							</when>
							<otherwise>
								<logger level="INFO" doc:name="Logger"
									message="O365 Settings = #[flowVars['userTimingsResponse']] for user #[sessionVars['userId']]" />
							</otherwise>
						</choice>
						<foreach collection="#[sessionVars.maap.get(sessionVars['userId'])]"
							doc:name="Loop All Instance Uuids">

							<set-variable variableName="instanceUuid" value="#[payload]"
								doc:name="Set Instance Uuid" />
							<http:request config-ref="HTTP_Integrations_Runtime_Request_Configuration"
								path="/integrations/instances" method="GET" doc:name="Get By Instance Uuid">
								<http:request-builder>
									<http:query-param paramName="instanceUuid"
										value="#[flowVars['instanceUuid']]" />
									<http:query-param paramName="status" value="ACTIVE" />



								</http:request-builder>
							</http:request>

							<dw:transform-message doc:name="Transform Message To Java">
								<dw:set-variable variableName="instancesUuidResult"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
							</dw:transform-message>
							<choice doc:name="Check No Result Condition">
								<when
									expression="#[flowVars['instancesUuidResult'].toString() != '{message=No results}']">
									<set-variable variableName="conf"
										value="#[flowVars['instancesUuidResult'][0]['configJson']]"
										doc:name="Store ConfigJson In Variable" />
									<set-payload value="#[flowVars['conf']]" mimeType="application/json"
										doc:name="Convert ConfigJson To Json" />

									<dw:transform-message doc:name="Transform ConfigJson To Jave">
										<dw:set-variable variableName="configJsonValue"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
									</dw:transform-message>
									<set-variable variableName="timeBasedValue"
										value="#[flowVars['configJsonValue']['time_base']]" doc:name="Get Time Based Value" />
									<set-variable variableName="offValue"
										value="#[flowVars['configJsonValue']['offset']]" doc:name="Set User TimeZone" />
									<set-variable variableName="calendarName"
										value="#[flowVars['configJsonValue']['calendar_name']]"
										doc:name="Set CalendarName" />
									<set-variable variableName="dayTimeBase"
										value="#[flowVars['configJsonValue']['utcTime']]" doc:name="Get Day Time Base" />
									<set-variable variableName="startDateTime"
										value="#[(new org.mule.el.datetime.DateTime(server.dateTime)).plusHours(-24)]"
										doc:name="Set Start Date Time" />
									<set-variable variableName="endDateTime"
										value="#[(new org.mule.el.datetime.DateTime(server.dateTime)).plusHours(24)]"
										doc:name="Set End Date Time" />
									<set-variable variableName="calendar_id"
										value="#[flowVars['configJsonValue']['calendar_id']]"
										doc:name="Set Calendar Id" />
									<http:request config-ref="HTTP_Operations_Request_Configuration"
										path="/me/calendars/#[flowVars['calendar_id']]/events" method="GET"
										doc:name="Get Calendar Events By Calendar Id">
										<http:request-builder>
											<http:query-param paramName="startDateTime"
												value="#[flowVars['startDateTime']]" />
											<http:query-param paramName="endDateTime"
												value="#[flowVars['endDateTime']]" />
											<http:header headerName="Authorization"
												value="Bearer #[flowVars['GCAccessToken']]" />



										</http:request-builder>
									</http:request>
									<logger
										message="events payload start = #[flowVars['startDateTime']] +++++++++ end = #[flowVars['endDateTime']]     #[message.payloadAs(java.lang.String)] ++++++"
										level="INFO" doc:name="Logger" />
									<dw:transform-message doc:name="Transform Message To Java">
										<dw:set-variable variableName="GCItemsList"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
									</dw:transform-message>
									<set-variable variableName="PollingIntervalTime"
										value="-${polling.interval}" doc:name="PollingTime" />

									<set-variable variableName="remainderArray"
										value="#[new java.util.ArrayList()]" doc:name="Set Remainders Array" />
									<choice doc:name="Choice">
										<when expression="#[flowVars['GCItemsList']['value'] != []]">
											<foreach collection="#[flowVars['GCItemsList']['value']]"
												doc:name="Loop All Items">
												<dw:transform-message doc:name="Transform Message To Java">
													<dw:set-variable variableName="itemDetails"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
												</dw:transform-message>
												<choice doc:name="Check Status Cancelled">
													<when expression="#[flowVars['itemDetails'] != null]">
														<set-variable variableName="eventStartTime"
															value="#[(new org.mule.el.datetime.DateTime(flowVars['itemDetails']['Start']['DateTime'])).changeTimeZone('UTC')]"
															doc:name="Event Start Time" />
														<set-variable variableName="crt"
															value="#[(new org.mule.el.datetime.DateTime(flowVars['itemDetails']['CreatedDateTime']))]"
															doc:name="crt" />
														<set-variable variableName="updt"
															value="#[(new org.mule.el.datetime.DateTime(flowVars['itemDetails']['LastModifiedDateTime']))]"
															doc:name="updt" />
														<expression-component doc:name="Set Start Date"><![CDATA[flowVars['startDate'] = flowVars['itemDetails']['Start']['DateTime'].toString().split('T')[0]]]></expression-component>

														<set-variable variableName="getDate"
															value="#[(new org.mule.el.datetime.DateTime(flowVars['startDate'])).format(&quot;MMM dd&quot;)]"
															doc:name="Get Date" />
														<set-variable variableName="startTime"
															value="#[(new org.mule.el.datetime.DateTime(flowVars['itemDetails']['Start']['DateTime'])).format(&quot;hh:mm a&quot;)]"
															doc:name="Set Start Time" />
														<set-variable variableName="endTime"
															value="#[(new org.mule.el.datetime.DateTime(flowVars['itemDetails']['End']['DateTime'])).format(&quot;hh:mm a&quot;)]"
															doc:name="Set End Time" />

														<set-variable variableName="forCrUpServerTimeMinusPollingTime1"
															value="#[server.dateTime.plusSeconds(-140).changeTimeZone('UTC')]"
															doc:name="For CrUp Server Time Minus Polling Time" />

														<choice doc:name="Check Event Title">
															<when expression="#[flowVars['itemDetails']['Subject'] == null]">
																<set-variable variableName="eventTitle"
																	value="unTitledEvent" doc:name="Set Title To Untitle Event" />
															</when>
															<otherwise>
																<set-variable variableName="eventTitle"
																	value="#[flowVars['itemDetails']['Subject']]" doc:name="Set Event Title" />
															</otherwise>
														</choice>

														<choice doc:name="Check Created Or Updated">
															<when
																expression="#[((flowVars['crt'].isAfter(flowVars['forCrUpServerTimeMinusPollingTime'])) &amp;&amp; (flowVars['crt'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
																<set-variable variableName="postMessage"
																	value="#['New Event ['+flowVars['eventTitle']+']('+flowVars['itemDetails']['WebLink']+') created in ['+flowVars['calendarName']+'](https://outlook.office.com/owa/?realm=k12.wv.us&amp;path=/calendar/view/Month#) \n - '+flowVars['getDate']+' from '+flowVars['startTime']+'  to '+flowVars['endTime']+'(UTC) \n - Description :  '+flowVars['itemDetails']['BodyPreview']+'  \n - Location : '+flowVars['itemDetails']['Location']['DisplayName']+' ']"
																	doc:name="Event Create" />
																<set-variable variableName="value" value="eventCreation"
																	doc:name="Create Value" />

															</when>
															<when
																expression="#[((flowVars['updt'].isAfter(flowVars['forCrUpServerTimeMinusPollingTime'])) &amp;&amp; (flowVars['updt'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
																<set-variable variableName="postMessage"
																	value="#['Event ['+flowVars['eventTitle']+']('+flowVars['itemDetails']['WebLink']+') updated in ['+flowVars['calendarName']+'](https://outlook.office.com/owa/?realm=k12.wv.us&amp;path=/calendar/view/Month#) \n - '+flowVars['getDate']+' from '+flowVars['startTime']+'  to '+flowVars['endTime']+'(UTC) \n - Description :  '+flowVars['itemDetails']['BodyPreview']+'  \n - Location : '+flowVars['itemDetails']['Location']['DisplayName']+' ']"
																	doc:name="Update Message today" />
																<set-variable variableName="value" value="eventUpdate"
																	doc:name="Update Value" />

															</when>

															<otherwise>
																<logger message="default condition for crt or update"
																	level="DEBUG" doc:name="Check crt or update default" />
															</otherwise>
														</choice>
														<choice doc:name="PostMessage Not Null">
															<when expression="#[flowVars['postMessage'] != empty]">
																<set-payload
																	value="#[{&quot;gcMessage&quot;: flowVars['postMessage'],&quot;value&quot;:flowVars['value']}]"
																	doc:name="Prepare Message To Management" />
																<logger
																	message="crt or up #[message.payloadAs(java.lang.String)]"
																	level="DEBUG" doc:name="Logger" />
																<http:request
																	config-ref="HTTP_Integrations_Management_Request_Configuration"
																	path="/hooks/{instanceUuid}" method="POST"
																	doc:name="Hit Management Webhook">
																	<http:request-builder>
																		<http:uri-param paramName="instanceUuid"
																			value="#[flowVars['instanceUuid']]" />


																	</http:request-builder>
																	<http:failure-status-code-validator
																		values="500..599" />
																</http:request>

															</when>
															<otherwise>
																<logger message="postmessg(crt upd tmeBased) null"
																	level="INFO" doc:name="Logger" />
															</otherwise>
														</choice>
														<choice doc:name="Check User Time-based Value">
															<when expression="#[flowVars['timeBasedValue'] != null]">
																<choice doc:name="Check Time Based Values">
																	<when
																		expression="#[flowVars['timeBasedValue']=='15 minute before']">
																		<set-variable variableName="RTime"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['eventStartTime'])).plusMinutes(-15).changeTimeZone('UTC')]"
																			doc:name="Reduce Start Time To 15 Mins" />
																		<logger
																			message="15Mins = for #[flowVars['eventTitle']] ++++++++ condition = #[((flowVars['RTime'].isAfter(flowVars['forCrUpServerTimeMinusPollingTime'])) &amp;&amp; (flowVars['RTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))] +++++++++++++++++ Value = #[flowVars['RTime']] isAfter #[flowVars['forCrUpServerTimeMinusPollingTime']] &amp;&amp; #[flowVars['RTime']] isBefore #[server.dateTime.changeTimeZone('UTC')]"
																			level="INFO" doc:name="Logger" />
																		<choice doc:name="15 min">
																			<when
																				expression="#[((flowVars['RTime'].isAfter(flowVars['forCrUpServerTimeMinusPollingTime'])) &amp;&amp; (flowVars['RTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
																				<set-variable variableName="postMessage1"
																					value="#['Event ['+flowVars['eventTitle']+']('+flowVars['itemDetails']['WebLink']+') in ['+flowVars['calendarName']+'](https://outlook.office.com/owa/?realm=k12.wv.us&amp;path=/calendar/view/Month#) starts in 15 minutes \n - '+flowVars['getDate']+' from '+flowVars['startTime']+'  to '+flowVars['endTime']+'(UTC) \n - Description :  '+flowVars['itemDetails']['BodyPreview']+'  \n - Location : '+flowVars['itemDetails']['Location']['DisplayName']+' ']"
																					doc:name="15 Mins Message" />
																			</when>
																			<otherwise>
																				<logger level="DEBUG" doc:name="15 Min"
																					message="15 min failed" />
																			</otherwise>
																		</choice>
																	</when>
																	<when
																		expression="#[flowVars['timeBasedValue']=='30 minute before']">
																		<set-variable variableName="RTime"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['eventStartTime'])).plusMinutes(-30).changeTimeZone('UTC')]"
																			doc:name="Reduce Start Time To 30 Mins" />
																		<logger
																			message="30 Min for for #[flowVars['eventTitle']]+++++++++++  condition = #[((flowVars['RTime'].isAfter(flowVars['forCrUpServerTimeMinusPollingTime'])) &amp;&amp; (flowVars['RTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))] +++++++++++++++++ Value = #[flowVars['RTime']] isAfter #[flowVars['forCrUpServerTimeMinusPollingTime']] &amp;&amp; #[flowVars['RTime']] isBefore #[server.dateTime.changeTimeZone('UTC')]"
																			level="INFO" doc:name="Logger" />
																		<choice doc:name="30 min">
																			<when
																				expression="#[((flowVars['RTime'].isAfter(flowVars['forCrUpServerTimeMinusPollingTime'])) &amp;&amp; (flowVars['RTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
																				<set-variable variableName="postMessage1"
																					value="#['Event ['+flowVars['eventTitle']+']('+flowVars['itemDetails']['WebLink']+') in ['+flowVars['calendarName']+'](https://outlook.office.com/owa/?realm=k12.wv.us&amp;path=/calendar/view/Month#) starts in 30 minutes \n - '+flowVars['getDate']+' from '+flowVars['startTime']+'  to '+flowVars['endTime']+'(UTC) \n - Description :  '+flowVars['itemDetails']['BodyPreview']+'  \n - Location : '+flowVars['itemDetails']['Location']['DisplayName']+' ']"
																					doc:name="30 Mins Message" />
																			</when>
																			<otherwise>
																				<logger level="DEBUG" doc:name="30 Min"
																					message="30 min failed" />
																			</otherwise>
																		</choice>

																	</when>
																	<when expression="#[flowVars['timeBasedValue']=='1 hour before']">
																		<set-variable variableName="RTime"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['eventStartTime'])).plusHours(-1).changeTimeZone('UTC')]"
																			doc:name="Reduce Start Time To 1 hour" />
																		<logger
																			message="1hr for #[flowVars['eventTitle']]+++++ condition = #[((flowVars['RTime'].isAfter(flowVars['forCrUpServerTimeMinusPollingTime'])) &amp;&amp; (flowVars['RTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))] +++++++++++++++++ Value = #[flowVars['RTime']] isAfter #[flowVars['forCrUpServerTimeMinusPollingTime']] &amp;&amp; #[flowVars['RTime']] isBefore #[server.dateTime.changeTimeZone('UTC')]"
																			level="INFO" doc:name="Logger" />
																		<choice doc:name="1 hr">
																			<when
																				expression="#[((flowVars['RTime'].isAfter(flowVars['forCrUpServerTimeMinusPollingTime'])) &amp;&amp; (flowVars['RTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
																				<set-variable variableName="postMessage1"
																					value="#['Event ['+flowVars['eventTitle']+']('+flowVars['itemDetails']['WebLink']+') in ['+flowVars['calendarName']+'](https://outlook.office.com/owa/?realm=k12.wv.us&amp;path=/calendar/view/Month#) starts in 1 hour \n - '+flowVars['getDate']+' from '+flowVars['startTime']+'  to '+flowVars['endTime']+'(UTC) \n - Description :  '+flowVars['itemDetails']['BodyPreview']+'  \n - Location : '+flowVars['itemDetails']['Location']['DisplayName']+' ']"
																					doc:name="1 hr Message" />
																			</when>
																			<otherwise>
																				<logger level="DEBUG" doc:name="1 hr"
																					message="1 hr failed" />
																			</otherwise>
																		</choice>

																	</when>
																	<when expression="#[flowVars['timeBasedValue']=='2 hour before']">
																		<set-variable variableName="RTime"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['eventStartTime'])).plusHours(-2).changeTimeZone('UTC')]"
																			doc:name="Reduce Start Time To 2 hr" />
																		<logger
																			message="2 hr for #[flowVars.eventTitle]++++++++ condition = #[((flowVars['RTime'].isAfter(flowVars['forCrUpServerTimeMinusPollingTime'])) &amp;&amp; (flowVars['RTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))] +++++++++++++++++ Value = #[flowVars['RTime']] isAfter #[flowVars['forCrUpServerTimeMinusPollingTime']] &amp;&amp; #[flowVars['RTime']] isBefore #[server.dateTime.changeTimeZone('UTC')]"
																			level="INFO" doc:name="Logger" />
																		<choice doc:name="2 hrs">
																			<when
																				expression="#[((flowVars['RTime'].isAfter(flowVars['forCrUpServerTimeMinusPollingTime'])) &amp;&amp; (flowVars['RTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
																				<set-variable variableName="postMessage1"
																					value="#['Event ['+flowVars['eventTitle']+']('+flowVars['itemDetails']['WebLink']+') in ['+flowVars['calendarName']+'](https://outlook.office.com/owa/?realm=k12.wv.us&amp;path=/calendar/view/Month#) starts in 2 hour \n - '+flowVars['getDate']+' from '+flowVars['startTime']+'  to '+flowVars['endTime']+'(UTC) \n - Description :  '+flowVars['itemDetails']['BodyPreview']+'  \n - Location : '+flowVars['itemDetails']['Location']['DisplayName']+' ']"
																					doc:name="2 hrs Message" />
																			</when>
																			<otherwise>
																				<logger level="DEBUG" doc:name="2 hrs "
																					message="2 hrs failed" />
																			</otherwise>
																		</choice>

																	</when>
																	<when expression="#[flowVars['timeBasedValue']=='4 hour before']">
																		<set-variable variableName="RTime"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['eventStartTime'])).plusHours(-4).changeTimeZone('UTC')]"
																			doc:name="Reduce Start Time To 4 hrs" />
																		<logger
																			message="4 hrs for #[flowVars.eventTitle]++++++++++++++ condition = #[((flowVars['RTime'].isAfter(flowVars['forCrUpServerTimeMinusPollingTime'])) &amp;&amp; (flowVars['RTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))] +++++++++++++++++ Value = #[flowVars['RTime']] isAfter #[flowVars['forCrUpServerTimeMinusPollingTime']] &amp;&amp; #[flowVars['RTime']] isBefore #[server.dateTime.changeTimeZone('UTC')]"
																			level="INFO" doc:name="Logger" />
																		<choice doc:name="4 hrs">
																			<when
																				expression="#[((flowVars['RTime'].isAfter(flowVars['forCrUpServerTimeMinusPollingTime'])) &amp;&amp; (flowVars['RTime'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
																				<set-variable variableName="postMessage1"
																					value="#['Event ['+flowVars['eventTitle']+']('+flowVars['itemDetails']['WebLink']+') in ['+flowVars['calendarName']+'](https://outlook.office.com/owa/?realm=k12.wv.us&amp;path=/calendar/view/Month#) starts in 4 hour \n - '+flowVars['getDate']+' from '+flowVars['startTime']+'  to '+flowVars['endTime']+'(UTC) \n - Description :  '+flowVars['itemDetails']['BodyPreview']+'  \n - Location : '+flowVars['itemDetails']['Location']['DisplayName']+' ']"
																					doc:name="4 hrs Message" />
																			</when>
																			<otherwise>
																				<logger message="4 hrs failed" level="DEBUG"
																					doc:name="Logger" />
																			</otherwise>
																		</choice>

																	</when>

																	<otherwise>
																		<logger message="Default time_based " level="INFO"
																			doc:name="Default" />
																	</otherwise>
																</choice>
																<set-variable variableName="TBV"
																	value="timeBasedReminder" doc:name="Time Based Value" />
															</when>
															<otherwise>
																<logger
																	message="Defaul ++++++time_based_value =  #[flowVars['timeBasedValue']]"
																	level="INFO" doc:name="Logger" />
															</otherwise>
														</choice>
														<choice doc:name="PostMessage Not Null">
															<when expression="#[flowVars['postMessage1'] != empty]">
																<set-payload
																	value="#[{&quot;gcMessage&quot;: flowVars['postMessage1'],&quot;value&quot;:flowVars['TBV']}]"
																	doc:name="Prepare Message To Management" />
																<logger
																	message="Time-based #[message.payloadAs(java.lang.String)]"
																	level="DEBUG" doc:name="Logger" />
																<http:request
																	config-ref="HTTP_Integrations_Management_Request_Configuration"
																	path="/hooks/{instanceUuid}" method="POST"
																	doc:name="Hit Management Webhook">
																	<http:request-builder>
																		<http:uri-param paramName="instanceUuid"
																			value="#[flowVars['instanceUuid']]" />

																	</http:request-builder>
																	<http:failure-status-code-validator
																		values="500..599" />
																</http:request>
															</when>
															<otherwise>
																<logger message="postmessg(crt upd tmeBased) null"
																	level="DEBUG" doc:name="Logger" />
															</otherwise>
														</choice>
														<set-variable variableName="startTimeInUtc"
															value="#[(new  org.mule.el.datetime.DateTime(flowVars['itemDetails']['Start']['DateTime'])).changeTimeZone('UTC')]"
															doc:name="Set Start Time In UTC" />
														<set-variable variableName="setUtcDate"
															value="#[server.dateTime.format('yyyy-MM-dd')]" doc:name="Set UTC date" />
														<set-variable variableName="utcStartTimeToAddArray"
															value="#[flowVars['setUtcDate']]T00:00:00Z" doc:name="Set Utc Start Time" />
														<set-variable variableName="utcEndTime1"
															value="#[flowVars['setUtcDate']]T23:59:00Z" doc:name="Variable" />
														<set-variable variableName="utcEndTimeToAddArray"
															value="#[(new org.mule.el.datetime.DateTime(flowVars['utcEndTime1'])).plusHours(24)]"
															doc:name="Set Utc End Time" />
														<choice doc:name="Choice">
															<when expression="#[flowVars.offValue.contains('.')]">
																<dw:transform-message doc:name="Transform Message">
																	<dw:set-variable variableName="splitCondtn"><![CDATA[%dw 1.0
%output application/java
---
flowVars['offValue'] splitBy "."]]></dw:set-variable>
																</dw:transform-message>
																<expression-component doc:name="Expression"><![CDATA[flowVars['offset1'] = Integer.parseInt(flowVars['splitCondtn'][0])]]></expression-component>
																<expression-component doc:name="Expression"><![CDATA[flowVars['offset2'] = Integer.parseInt(flowVars['splitCondtn'][1])]]></expression-component>
																<choice doc:name="Check Minus or Plus">
																	<when expression="#[flowVars.offset1.toString().contains('-')]">
																		<dw:transform-message doc:name="Transform Message">
																			<dw:set-variable variableName="minusPlus"><![CDATA[%dw 1.0
%output application/java
---
flowVars['offset1'] splitBy "-"]]></dw:set-variable>
																		</dw:transform-message>
																		<expression-component doc:name="Expression"><![CDATA[flowVars['offset3'] = Integer.parseInt(flowVars['minusPlus'][1])]]></expression-component>
																		<set-variable variableName="userStartTime1"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['utcStartTimeToAddArray'])).plusHours(flowVars['offset3'])]"
																			doc:name="Add User Time Zone" />
																		<set-variable variableName="userEndTime1"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['utcEndTimeToAddArray'])).plusHours(flowVars['offset3'])]"
																			doc:name="user end time" />
																		<set-variable variableName="userStartTime"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['userStartTime1'])).plusMinutes(flowVars['offset2']).changeTimeZone('UTC')]"
																			doc:name="Variable" />
																		<set-variable variableName="userEndTime"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['userEndTime1'])).plusMinutes(flowVars['offset2']).changeTimeZone('UTC')]"
																			doc:name="Variable" />
																	</when>
																	<otherwise>
																		<set-variable variableName="userStartTime1"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['utcStartTimeToAddArray'])).plusHours(-flowVars['offset1'])]"
																			doc:name="Add User Time Zone" />
																		<set-variable variableName="userEndTime1"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['utcEndTimeToAddArray'])).plusHours(-flowVars['offset1'])]"
																			doc:name="user end time" />
																		<set-variable variableName="userStartTime"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['userStartTime1'])).plusMinutes(-flowVars['offset2']).changeTimeZone('UTC')]"
																			doc:name="Variable" />
																		<set-variable variableName="userEndTime"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['userEndTime1'])).plusMinutes(-flowVars['offset2']).changeTimeZone('UTC')]"
																			doc:name="Variable" />
																	</otherwise>
																</choice>

															</when>
															<otherwise>
																<choice doc:name="Check Minus or Plus For Not Dot">
																	<when expression="#[flowVars.offValue.toString().contains('-')]">
																		<dw:transform-message doc:name="Transform Message">
																			<dw:set-variable variableName="minusPlus"><![CDATA[%dw 1.0
%output application/java
---
flowVars['offValue'] splitBy '-']]></dw:set-variable>
																		</dw:transform-message>
																		<expression-component doc:name="Expression"><![CDATA[flowVars['offValue1'] = Integer.parseInt(flowVars['minusPlus'][1])]]></expression-component>
																		<set-variable variableName="userStartTime"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['utcStartTimeToAddArray'])).plusHours(flowVars['offValue1']).changeTimeZone('UTC')]"
																			doc:name="Set User Start Time" />
																		<set-variable variableName="userEndTime"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['utcEndTimeToAddArray'])).plusHours(flowVars['offValue1']).changeTimeZone('UTC')]"
																			doc:name="Set User End Time" />
																	</when>
																	<otherwise>
																		<expression-component doc:name="Expression"><![CDATA[flowVars['offValue1'] = Integer.parseInt(flowVars['offValue'])]]></expression-component>
																		<set-variable variableName="userStartTime"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['utcStartTimeToAddArray'])).plusHours(-flowVars['offValue1']).changeTimeZone('UTC')]"
																			doc:name="Set User Start Time" />
																		<set-variable variableName="userEndTime"
																			value="#[(new org.mule.el.datetime.DateTime(flowVars['utcEndTimeToAddArray'])).plusHours(-flowVars['offValue1']).changeTimeZone('UTC')]"
																			doc:name="Set User End Time" />
																	</otherwise>
																</choice>

															</otherwise>
														</choice>

														<logger
															message="Add Array Condition =&gt;postMsg== #[flowVars['postMessage']] == null &amp;&amp; +++++++++ condition in choice = #[flowVars['postMessage'] == empty &amp;&amp; (flowVars['startTimeInUtc'].isAfter(flowVars['userStartTime']) &amp;&amp; flowVars['startTimeInUtc'].isBefore(flowVars['userEndTime']))]"
															level="DEBUG" doc:name="Add Array Condition" />
														<choice doc:name="Check PostMessage">
															<when
																expression="#[((flowVars['startTimeInUtc'].isAfter(flowVars['userStartTime'])) &amp;&amp; (flowVars['startTimeInUtc'].isBefore(flowVars['userEndTime'])))]">
																<set-variable variableName="reminderMessage"
																	value="#['Event ['+flowVars['eventTitle']+']('+flowVars['itemDetails']['WebLink']+') in ['+flowVars['calendarName']+'](https://outlook.office.com/owa/?realm=k12.wv.us&amp;path=/calendar/view/Month#) \n - '+flowVars['getDate']+' from '+flowVars['startTime']+'  to '+flowVars['endTime']+'(UTC) \n - Description :  '+flowVars['itemDetails']['BodyPreview']+'  \n - Location : '+flowVars['itemDetails']['Location']['DisplayName']+' ']"
																	doc:name="Prepare Remainder Message" />
																<expression-component doc:name="Add To Reminder Array"><![CDATA[remainderArray.add(flowVars['reminderMessage'])]]></expression-component>
															</when>
															<otherwise>
																<logger level="DEBUG" doc:name="Logger"
																	message="Add array Condition failed" />

															</otherwise>
														</choice>
														<set-variable variableName="postMessage"
															value="" doc:name="Set postMessage To Null" />
														<set-variable variableName="postMessage1"
															value="" doc:name="Set postMessage1 To Null" />
													</when>
													<otherwise>
														<logger message="event Status Canceled" level="INFO"
															doc:name="Event Status Canceled" />
													</otherwise>
												</choice>


											</foreach>
											<choice doc:name="Choice">
												<when
													expression="#[flowVars['dayTimeBase'] != empty &amp;&amp; flowVars['dayTimeBase'] !='NaN:NaN' ]">
													<set-variable variableName="dayBasedTimeStamp"
														value="#[server.dateTime.format('yyyy-MM-dd')]T#[flowVars.dayTimeBase]:00"
														doc:name="Change Day Based To TimeStamp" />
													<set-variable variableName="dayBasedTimeStamp1"
														value="#[(new org.mule.el.datetime.DateTime(flowVars['dayBasedTimeStamp']))]"
														doc:name="Convert DayBased Timestamp From String To Datetime" />
													<logger
														message="Day Based ++++ Day_base=#[flowVars['dayTimeBase']] +++ Value==&gt;size = #[flowVars['remainderArray'].size()] ++++++ #[flowVars['dayBasedTimeStamp1']] isAfter #[flowVars['forCrUpServerTimeMinusPollingTime']] &amp;&amp; #[flowVars['dayBasedTimeStamp1']] isBefore #[server.dateTime.changeTimeZone('UTC')]  ++++condition = #[(flowVars.remainderArray != []) &amp;&amp; ((flowVars['dayBasedTimeStamp1'].isAfter(flowVars['forCrUpServerTimeMinusPollingTime'])) &amp;&amp; (flowVars['dayBasedTimeStamp1'].isBefore(server.dateTime.changeTimeZone('UTC'))))]+++++"
														level="INFO" doc:name="Logger" />
													<choice doc:name="Check Reminder Message">
														<when
															expression="#[(flowVars.remainderArray != []) &amp;&amp; ((flowVars['dayBasedTimeStamp1'].isAfter(flowVars['forCrUpServerTimeMinusPollingTime'])) &amp;&amp; (flowVars['dayBasedTimeStamp1'].isBefore(server.dateTime.changeTimeZone('UTC'))))]">
															<set-variable variableName="bufferStreamMessage"
																value="#[new java.lang.StringBuffer()]" doc:name="Set A buffer Stream" />
															<set-variable variableName="arraySize"
																value="#[flowVars.remainderArray.size()]" doc:name="Today's events Array Size" />
															<foreach collection="#[flowVars['remainderArray']]"
																doc:name="For Each">
																<choice doc:name="Choice">
																	<when expression="#[flowVars.counter==1]">
																		<set-variable variableName="TodaysMessage"
																			value="#['**There are '+flowVars.arraySize+' events today** \n \n']"
																			doc:name="TodaysMessage" />
																		<expression-component doc:name="Append To Buffer Stream"><![CDATA[bufferStreamMessage.append(flowVars['TodaysMessage'])]]></expression-component>
																		<expression-component doc:name="Append To Buffer Stream"><![CDATA[bufferStreamMessage.append(payload)]]></expression-component>
																		<expression-component doc:name="Expression"><![CDATA[bufferStreamMessage.append('\n \n')]]></expression-component>
																	</when>
																	<when expression="#[flowVars.counter&gt;1]">
																		<expression-component doc:name="Append To Buffer Stream"><![CDATA[bufferStreamMessage.append(payload)]]></expression-component>
																		<expression-component doc:name="Expression"><![CDATA[bufferStreamMessage.append('\n \n')]]></expression-component>
																	</when>
																	<otherwise>
																		<logger
																			message="for loop day based counter =  #[flowVars.counter]"
																			level="INFO" doc:name="Logger" />
																	</otherwise>
																</choice>
															</foreach>
															<set-payload
																value="#[{&quot;gcMessage&quot;: flowVars['bufferStreamMessage'],&quot;value&quot;:&quot;remainders&quot;}]"
																doc:name="Set Remainders Message" />
															<http:request
																config-ref="HTTP_Integrations_Management_Request_Configuration"
																path="/hooks/{instanceUuid}" method="POST"
																doc:name="Send Message To Management">
																<http:request-builder>
																	<http:uri-param paramName="instanceUuid"
																		value="#[flowVars['instanceUuid']]" />
																</http:request-builder>
															</http:request>
														</when>
														<otherwise>
															<logger message="loop all day msgs condition not true"
																level="DEBUG" doc:name="Logger" />

														</otherwise>

													</choice>
												</when>
												<otherwise>
													<logger level="INFO" doc:name="Logger"
														message="user day based value = #[flowVars['dayTimeBase']]  for userId = #[sessionVars['userId']]" />
												</otherwise>
											</choice>


										</when>
										<otherwise>
											<logger
												message="events value=#[flowVars['GCItemsList']['value']] for user = #[sessionVars['userId']]"
												level="INFO" doc:name="Logger" />
										</otherwise>
									</choice>

								</when>
								<otherwise>
									<logger message="instanceUuid #[flowVars.instanceUuid]  Inactive"
										level="INFO" doc:name="Logger" />
								</otherwise>
							</choice>
						</foreach>


					</when>
					<otherwise>
						<logger level="INFO" doc:name="Logger"
							message="refresh Token Null In Polling" />
					</otherwise>
				</choice>
			</otherwise>
		</choice>

		<catch-exception-strategy doc:name="Catch Exception Strategy">
			<set-variable variableName="exception" value="#[exception.message]"
				doc:name="exception" />
			<logger
				message="exception in polling ++++++ #[flowVars.exception]++++++++++++++"
				level="INFO" doc:name="Logger" />
		</catch-exception-strategy>
	</flow>




</mule>
