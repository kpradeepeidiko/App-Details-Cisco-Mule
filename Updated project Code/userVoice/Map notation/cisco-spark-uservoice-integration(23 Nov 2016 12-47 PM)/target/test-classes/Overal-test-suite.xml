<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <munit:config name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:uservoice-integration.xml"/>
        <spring:import resource="classpath:core-services-invocations.xml"/>
        <spring:import resource="classpath:uservoice-api-calls.xml"/>
        <spring:import resource="classpath:global.xml"/>
    </spring:beans>
    <munit:test name="Overal-test-suite-postAuthDetailsFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[{&quot;grantType&quot;: &quot;authorization_code&quot;,&quot;clientId&quot;: &quot;8FS9UXeMT2pj7t6JSg&quot;,&quot;clientSecret&quot;: &quot;raShXP96VvHtz3nqBktFHutNJz4tduG9&quot;,&quot;code&quot;:&quot;Q7MV4uvPUNbWGu2EPC&quot;}]" doc:name="Set Payload"/>
        <flow-ref name="postAuthDetailsFlow" doc:name="Flow-ref to postAuthDetailsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="Overal-test-suite-postFormatMessageFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <flow-ref name="postFormatMessageFlow" doc:name="Flow-ref to postFormatMessageFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="Overal-test-suite-postIntegrationSettingsFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[{&quot;token&quot; : &quot;sascdscdskwqhdiuqwhda7y8dyas&quot;}]" doc:name="Set Payload"/>
        <flow-ref name="postIntegrationSettingsFlow" doc:name="Flow-ref to postIntegrationSettingsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="Overal-test-suite-setupIntegrationFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[{&quot;grantType&quot;: &quot;authorization_code&quot;,&quot;clientId&quot;: &quot;8FS9UXeMT2pj7t6JSg&quot;,&quot;clientSecret&quot;: &quot;raShXP96VvHtz3nqBktFHutNJz4tduG9&quot;,&quot;code&quot;:&quot;Q7MV4uvPUNbWGu2EPC&quot;}]" doc:name="Set Payload"/>
        <flow-ref name="setupIntegrationFlow" doc:name="setupIntegrationFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="Overal-test-suite-updateIntegrationFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[{&quot;grantType&quot;: &quot;authorization_code&quot;,&quot;clientId&quot;: &quot;8FS9UXeMT2pj7t6JSg&quot;,&quot;clientSecret&quot;: &quot;raShXP96VvHtz3nqBktFHutNJz4tduG9&quot;,&quot;code&quot;:&quot;Q7MV4uvPUNbWGu2EPC&quot;}]" doc:name="Set Payload"/>
        <flow-ref name="updateIntegrationFlow" doc:name="Flow-ref to updateIntegrationFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="Overal-test-suite-tearDownIntegrationFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[{&quot;grantType&quot;: &quot;authorization_code&quot;,&quot;clientId&quot;: &quot;8FS9UXeMT2pj7t6JSg&quot;,&quot;clientSecret&quot;: &quot;raShXP96VvHtz3nqBktFHutNJz4tduG9&quot;,&quot;code&quot;:&quot;Q7MV4uvPUNbWGu2EPC&quot;}]" doc:name="Set Payload"/>
        <flow-ref name="tearDownIntegrationFlow" doc:name="Flow-ref to tearDownIntegrationFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="Overal-test-suite-healthCheckFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[{&quot;integrationId&quot;: &quot;Y2lzY29zcGFyazovL3VzL0FQUExJQ0FUSU9OLzAyM2RmYmMwLTQ5MjUtNDc1NC05ZDJiLTdkMjE0NmY4ZDllMg&quot;,&quot;userId&quot;: &quot;Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMGU2OWMzYi1lMzU4LTQ3ZTUtODQyYy02MWMxMmRlNTVhY2Q&quot;}]" doc:name="Set Payload"/>
        <flow-ref name="healthCheckFlow" doc:name="Flow-ref to healthCheckFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="Overal-test-suite-coreServicesAlertsFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="client_secret" value="${uservoice.integration.client.secret}" doc:name="Set Client Secret"/>
        <set-variable variableName="client_Id" value="${uservoice.integration.client.id} " doc:name="Set Client Id"/>
        <flow-ref name="coreServicesAlertsFlow" doc:name="Flow-ref to coreServicesAlertsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="Overal-test-suite-coreServicesLoggingFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="client_secret" value="${uservoice.integration.client.secret}" doc:name="Set Client Secret"/>
        <set-variable variableName="client_Id" value="${uservoice.integration.client.id} " doc:name="Set Client Id"/>
        <flow-ref name="coreServicesLoggingFlow" doc:name="Flow-ref to coreServicesLoggingFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="Overal-test-suite-coreServicesTrackingFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="client_secret" value="${uservoice.integration.client.secret}" doc:name="Set Client Secret"/>
        <set-variable variableName="client_Id" value="${uservoice.integration.client.id} " doc:name="Set Client Id"/>
        <flow-ref name="coreServicesTrackingFlow" doc:name="Flow-ref to coreServicesTrackingFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="Overal-test-suite-getWebhookFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[{&quot;token&quot; :&quot;sascdscdskwqhdiuqwhda7y8dyas&quot;}]" doc:name="Set Payload"/>
        <set-variable variableName="uuid" value="#[function:uuid]" doc:name="Generate UUID"/>
        <set-variable variableName="webhook" value="https://${uservoice.webhook.domain}/api/hooks/#[flowVars.uuid]" doc:name="Construct Webhook"/>
        <flow-ref name="getWebhookFlow" doc:name="Flow-ref to getWebhookFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
</mule>
