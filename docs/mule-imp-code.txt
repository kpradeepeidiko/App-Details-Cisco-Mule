JSON Sample : 
-------------------------------------
[  
   {  
      "Spark_Token":"Bearer ODZjMDFjMWQtZGViOS00YTMxLTgwMzctMjA4ZTFmY2YyZjU2OGQyNzM",
      "IntegrationId":"A1",
      "Stripe_Access_Key":"sk_test_cEOA8zs7zr32KRywD1DH1kaZ"
   }
]

db-->in variable(#[message.payload[0].Spark_Token])
=====================================================================================
components
-------------------
<expression-component doc:name="Expression"><![CDATA[flowVars.tu = flowVars.req.myUrl.split('duplicated task from ')[1]]]></expression-component>

<logger message="#[flowVars.tt]" level="INFO" doc:name="Logger"/>

<set-variable variableName="v1" value="12:52 AM" doc:name="v1"/>

<choice doc:name="Choice">
            <when expression="">
                <logger level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
====================================================================
using tranformations on db value
-------------------------------------
obj-to-json-->trafrm Msg(input payload-json = output define Map)--> boj-to-json
===================================================================================
to get http status = #[message.inboundProperties.'http.status']

#[message.inboundProperties.'http.query.params'.guid]

(or)

#[message.inboundProperties['http.query.params']['client_id']]
 
#[message.inboundProperties['http.query.params']['client_secret']]



input : http://192.168.1.200:8089/integrations/1001
output : 1001
use Expression as : #[message.inboundProperties.'http.request.uri'.split("/")[2]]



http://localhost:8089/pradeep/{id}/schema/{print}

#[message.inboundProperties.'http.uri.params'.id]
#[message.inboundProperties.'http.uri.params'.print]

=============================================================================

#[message.inboundProperties.'http.method' == 'GET']
#[message.inboundProperties.'http.method' == 'POST']


#[payload != []]

===========================================================================

#[flowVars.name = flowVars.name.toString().split("\\?")[0]]

input: http://localhost:8089/pradeep/bitbucket?id=454554
output : bitbucket
==============================================================
TO GENERATE UNIQUE ID FOR EACH REQUEST :  #[java.util.UUID.randomUUID().toString()](52b1fd86-6e23-4379-862b-75d60ae5ee3f) (place it in session variable)

<logger message="Variable set with #[sessionVars.messageID]" level="INFO"/>
 
===================================================================================
 DATE TIME IN MULE   :   #[new org.mule.el.datetime.DateTime(new Date());] (or)  #[server.dateTime.format('yyyy-MM-ddHH:mm:ss')]
 
 DATE RELATED IN DB     :   select CURRENT_TIMESTAMP (OUTPUT = 2016-07-11 03:36:04.0)  
							& 
							select now() (OUTPUT = 2016-07-11 03:38:42.0) 
							
							&
							select CURDATE() (output =  2016-07-28)
							

	getTimestame from database in mule  :: select DATE_FORMAT(created_date,'%m-%d-%YT%h:%i %p') as created_date from integration_instances 
	-----------------------------------------
	 06-27-2016 T04:32 PM

	in Transformation--->MAP(createdDate = string,updatedDate = string)

===================================================================================
Compare Date code
------------------
flowVars['date']=flowVars['dueOn'].split('-')[2];
flowVars['month']=flowVars['dueOn'].split('-')[1];
flowVars['year']=flowVars['dueOn'].split('-')[0];
if(flowVars['month']<13&&flowVars['date']<32&&flowVars['year'].length()==4)
{
flowVars['dueOn']=flowVars['year'].concat('-'+flowVars['month']+'-'+flowVars['date']);
}
else
flowVars['dueOn']=flowVars['dueOn'].concat(' is not a valid date');
================================================================================
POST IN MULE
----------------------------------------------------------------------------
1)HTTP
2)SET_PAYLOAD = #[{'client_id':'9UbNuqV9BuVnMDWBam','client_secret':'NyhNCyLWqwddR7j2feHzpJBzfePZx3wJ','grant_type':'authorization_code','code':'3fBQWgXCuvV7EG7QxE'}]
				(OR)
#[{'client_id':flowVars.client_id,'client_secret':flowVars.client_secret,'grant_type':flowVars.grant_type,'code':flowVars.code}]

3)HTTP :  <http:success-status-code-validator values="0..599"/>

==================================================================================

output as json using 'set payload'
-----------------------------------------
{"HookResponse":"#[flowVars.webhookResponse]","userEvents":"#[flowVars.integrationsInstanceResponse.configJson]"}




===================================================
increment flowVars value
--------------------------------
pageToken=Integer.parseInt(pageToken)+1;



=================================================
${app.home}/classes/googlea43f71d48e2cce70.html


ALTER TABLE tablename AUTO_INCREMENT = 1
=============================================
Add Array
----------
#[new java.util.ArrayList()]
postMessageArray.add(flowVars.postMessage1)

flowVars.postMessageArray = flowVars.postMessageArray.toString().replace(',','').replace('[','').replace(']','')


Place 'and' for last ','
--------------------------------
flowVars.names1=flowVars.UsersArray.toString().substring(1,flowVars.UsersArray.toString().length()-1)
(to remove '[' and ']' from array)

flowVars.names = names1.substring(0,names1.lastIndexOf(","))+" and "+names1.substring(names1.lastIndexOf(",")+1)
(to place 'and' at las index of ',')



Buffer Stream
---------------------
#[new java.lang.StringBuffer()]

bufferStreamMessage.append(payload) 
postMessage.append('\n\n\n\n\n')



======================================================
catch 403 error
---------------------
<choice-exception-strategy doc:name="Choice Exception Strategy">
        <catch-exception-strategy when="exception.causedBy(org.mule.module.http.internal.request.ResponseValidatorException)" doc:name="Catch Exception Strategy">
     		<set-property propertyName="http.status" value="#[403]" doc:name="403" />
		   	<set-payload value="{&quot;error&quot;: &quot;You are not a member of that team.&quot;}" mimeType="application/json" doc:name="errorMessage" />
 		</catch-exception-strategy>
 </choice-exception-strategy>
==================================================================================


Ternary operator
-------------------
#[(flowVars.name != empty) ? flowVars.name : 'name empty']



#[server.dateTime.changeTimeZone('UTC')] (Gives 2016-11-03T10:59:44.607Z)

#[server.dateTime.format('yyyy-MM-dd HH:mm:ss')] (Gives 2106-10-14 1:24:23)

#[server.dateTime.plusSeconds(-150).changeTimeZone('UTC')]

===========================================
if ==> et = 2016-10-10T14:00:00+05:30
-------------------------------------
#[(new org.mule.el.datetime.DateTime(flowVars.et)).format("hh:mm a")] gives 02:00 PM

#[(new org.mule.el.datetime.DateTime(flowVars.et)).plusMinutes(10).format("hh:mm a")] gives 02:10 PM

#[(new org.mule.el.datetime.DateTime(flowVars.et)).plusHours(1).format("hh:mm a")]  gives 03:00 PM

#[(new org.mule.el.datetime.DateTime()).plusMonths(4).format("MMMM dd,YYYY")] 



if ==> tt = 2016-10-10 (yyyy-MM-dd format)
-----------------------------------------
#[(new org.mule.el.datetime.DateTime(flowVars.tt)).format("MMM dd")] gives Oct 10
#[(new org.mule.el.datetime.DateTime(flowVars.tt)).plusDays(-1).format("MMM dd")] gives Oct 9


#[(new org.mule.el.datetime.DateTime(flowVars.myTime)).format("MMM dd yyyy hh:mm a")]: 
For 2016-10-06T14:18:20.142Z 
Output : Oct 06 2016 02:18 PM

========================================================================================================
dwl scripts formats
----------------------
<dw:set-variable variableName="userEventsVariable" 
				resource="classpath:dwScripts/fromPayloadToJava.dwl" />
				
<dw:set-payload
				resource="classpath:dwScripts/buildPostAuthDetailsResponse.dwl" />
======================================================================================
Mule filters example
--------------------
https://dzone.com/articles/different-types-of-anypoint-filters-in-mulesoft

https://www.slideshare.net/Krishna_in/filters-in-mule		

https://docs.mulesoft.com/mule-user-guide/v/3.4/using-filters		

To Enter In to Exception For Filters
--------------------------------------
<message-filter throwOnUnaccepted="true" doc:name="Expression_filter">
			<expression-filter
				expression="#[payload.toString().contains('name') &amp;&amp; payload.name == 'pradeep']"
				doc:name="Expression" nullReturnsTrue="true" />
		</message-filter>

				
===================================================================================
Setting mime/type in transformation message
----------------------------------------------
MimeType was not resolved '*/*' delegating to Java.

<dw:input-payload mimeType="application/json"/>
<dw:input-payload mimeType="application/java"/>

=======================================================================================
health _check flow
-----------------------
token_response => message=No results
=======================================================================================

File Component
-----------------
Set Path : C:\Users\db2admin.bandaru-PC\Downloads\New_Folder\New_Folder\Folder1\sam

====================================================================================
Reading xml file using xpath
--------------------------------
MEL :
-----
#[xpath3('/messagebody/header/mesgid')]  (output = 001)

Expl :
------
<messagebody>
	<header>
		<mesgid>001</mesgid>
		<mesgName>pradeep</mesgName>
	</header>
</messagebody>
=========================================================================================
Exceptions:
----------------
1. Runtime Exception Strategy:
++++++++++++++++++++++++++++++++	
#[exception.causedBy(org.mule.api.expression.ExpressionRuntimeException)||exception.causedBy(org.mule.api.MuleRuntimeException)]


2. HTTP Validator Exception Strategy
+++++++++++++++++++++++++++++++++++++
#[exception.causedBy(org.mule.module.http.internal.request.ResponseValidatorException)]

3. Time out Exception Strategy
+++++++++++++++++++++++++++++++
#[exception.causedBy(java.util.concurrent.TimeoutException)]

=========================================================================================
https://docs.mulesoft.com/mule-user-guide/v/3.9/dataweave-examples


%dw 1.0
%output application/json
---
payload mapObject (
	'$$': $ when '$$' != 'bookId' otherwise 'pradeep@123'
)		
 
 
when
----
{
	"name":"pradeep",
	"designation":"ASE",
	"bookId":"kp"
}
=======================================================================================
%dw 1.0
%output application/json skipNullOn="everywhere"
---
payload.sprakRooms.items map (
 	$ when ($.title == flowVars.roomTitle) otherwise null
)


when
-------
{
	"items":[{},
	{},
	{}]
}

Map:
------
-->Takes input as array and returns array output.
-->invoked with two parameters: "index" and the "value".
-->Index is defined by default as $$ and the value as $.
=======================================================================================
%dw 1.0
%output application/json skipNullOn="everywhere"
---
{
a:((payload.changes..original_values.labels)[0] map (null when (((payload.changes..new_values.labels)[0]) contains $) otherwise $)) when (sizeOf ((payload.changes..original_values.labels)[0]))> (sizeOf ((payload.changes..new_values.labels)[0])) otherwise (payload.changes..new_values.labels)[0] map (null when (((payload.changes..original_values.labels)[0]) contains $) otherwise $),
event:"Deleted" when (sizeOf ((payload.changes..original_values.labels)[0]))> (sizeOf ((payload.changes..new_values.labels)[0])) otherwise "Created"
}


Response
---------
{
    "a": [
        "yellow"
    ],
    "event": "Deleted"
}

=========================================================
%dw 1.0
%output application/json skipNullOn="everywhere"
%input payload application/json
%var user = {"firstName":"Marlin", "lastName":"Magnus", "Address Line1":"Address Line1"}
---
{
	"Original_Value Size": (sizeOf (payload.Changes.original_values)),
	"New_Value Size": (sizeOf (payload.Changes.new_values)),
	"Event": "Deleted" when (sizeOf (payload.Changes.original_values)) > (sizeOf (payload.Changes.new_values)) otherwise "Created",
	"Color": ((payload.Changes.original_values) map (null when ((payload.Changes.new_values) contains $) otherwise $)) 
	when (sizeOf (payload.Changes.original_values)) > (sizeOf (payload.Changes.new_values)) 
	otherwise ((payload.Changes.new_values) map (null when ((payload.Changes.original_values) contains $) otherwise $))	
}


input:
--------
{
	"Changes": {
		"original_values": [
			"red",
			"white",
			"Orange",
			"Yello"
		],
		"new_values": [
			"red",
			"white",
			"Orange"
		]
	}
}


output:
-------
{
    "Original Size": 4,
    "New Size": 3,
    "event": "Deleted",
    "New Value": [
        "Yello"
    ]
}

--> what ever matched we are making it null
==================================================================================
